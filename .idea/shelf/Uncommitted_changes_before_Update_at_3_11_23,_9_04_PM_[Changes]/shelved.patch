Index: src/main/java/aar226_akc55_ayc62_ahl88/src/edu/cornell/cs/cs4120/xic/ir/visit/IRLoweringVisitor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package aar226_akc55_ayc62_ahl88.src.edu.cornell.cs.cs4120.xic.ir.visit;\n\nimport aar226_akc55_ayc62_ahl88.newast.stmt.Stmt;\nimport aar226_akc55_ayc62_ahl88.src.edu.cornell.cs.cs4120.xic.ir.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class IRLoweringVisitor extends IRVisitor {\n    private static final int WORD_BYTES = 8;\n    private static final String OUT_OF_BOUNDS = \"_xi_out_of_bounds\";\n    private int labelCnt;\n    private int tempCnt;\n    private String nxtLabel() {\n        return String.format(\"l%d\", (labelCnt++));\n    }\n\n    private String nxtTemp() {\n        return String.format(\"t%d\", (tempCnt++));\n    }\n    public IRLoweringVisitor (IRNodeFactory inf) {\n        super(inf);\n        labelCnt = 0;\n        tempCnt = 0;\n    }\n\n    private class BasicBlock {} // Need to think about what to add\n\n    @Override\n    protected IRNode leave(IRNode parent, IRNode n, IRNode n_, IRVisitor v_) {\n        if (n_ instanceof IRBinOp irbin) return canon(irbin);\n        if (n_ instanceof IRCall irc) return canon(irc);\n        if (n_ instanceof IRCallStmt ircstmt) return canon(ircstmt);\n        if (n_ instanceof IRCJump ircj) return canon(ircj);\n        if (n_ instanceof IRCompUnit icu) return canon(icu);\n        if (n_ instanceof IRConst ic) return canon(ic);\n        if (n_ instanceof IRESeq ireseq) return canon(ireseq);\n        if (n_ instanceof IRExp irexp) return  canon(irexp);\n        if (n_ instanceof IRFuncDecl irfunc) return canon(irfunc);\n        if (n_ instanceof IRJump irj) return canon(irj);\n        if (n_ instanceof IRLabel irl) return canon(irl);\n        if (n_ instanceof IRMem irmem) return canon(irmem);\n        if (n_ instanceof IRMove irmove) return canon(irmove);\n        if (n_ instanceof IRName irname) return canon(irname);\n        if (n_ instanceof IRReturn irret) return canon(irret);\n        if (n_ instanceof IRSeq irseq) return canon(irseq);\n        if (n_ instanceof IRTemp irtem) return canon(irtem);\n\n        throw new Error(\"Why is node not found\");\n    }\n\n\n    // Lower each statment then flatten all sequences\n    private IRNode canon(IRSeq node) {\n        ArrayList<IRStmt> flatten = new ArrayList<>();\n        for (IRStmt stmt: node.stmts()){\n            if (stmt instanceof IRSeq seq){\n                flatten.addAll(seq.stmts());\n            }else{\n                flatten.add(stmt);\n            }\n        }\n        return new IRSeq(flatten);\n    }\n\n    // Lower each return expressions then add Return\n    private IRNode canon(IRReturn node) {\n//        ArrayList<IRStmt> stmts = new ArrayList<>();\n//        ArrayList<IRExpr> exprs = new ArrayList<>();\n//\n//        for (IRExpr expr : node.rets()) {\n//\n//        }\n        return node;\n    }\n\n    // Lower Move be very careful look at slides\n    private IRNode canon(IRMove node) {\n//        IRExpr target = node.target();\n//        IRExpr source = node.source();\n//\n//        if (target instanceof )\n\n        return node;\n    }\n\n    // Create Basic Blocks And reorder all the body\n    private IRNode canon(IRFuncDecl node) {\n        return node;\n    }\n\n\n    // Lift Statement thats it\n    private IRNode canon(IRExp node) {\n        if (node.expr() instanceof IRESeq ire) {\n            return ire.stmt();\n        }\n        return new IRSeq();\n    }\n\n    // do nothing\n    private IRNode canon(IRCompUnit node) {\n        return node;\n    }\n\n    // Lower each Expr\n    private IRNode canon(IRCallStmt node) {\n        ArrayList<IRStmt> stmts = new ArrayList<>();\n        ArrayList<String> temps_strs = new ArrayList<>();\n\n        for (IRExpr expr : node.args()) {\n            String ti = nxtTemp();\n            if (expr instanceof IRESeq eseq) {\n                stmts.add(eseq.stmt());\n                temps_strs.add(ti);\n                stmts.add(new IRMove(new IRTemp(ti),eseq.expr()));\n            }else{\n                stmts.add(new IRMove(new IRTemp(ti),expr));\n            }\n        }\n\n        String t = nxtTemp();\n\n        List<IRExpr> temps = new ArrayList<>();\n        for (String tmp : temps_strs) {\n            temps.add(new IRTemp(tmp));\n        }\n\n        stmts.add(new IRCallStmt(node.target(), node.n_returns(), temps));\n        stmts.add(new IRMove(new IRTemp(t), new IRTemp(\"_RV1\")));\n\n        return new IRESeq(new IRSeq(stmts), new IRTemp(t));\n    }\n    // Lower each Expr\n    private IRNode canon(IRCall node) {\n        return node;\n    }\n\n    // if commute do that otherwise do normal\n    private IRNode canon(IRBinOp node) {\n        return node;\n    }\n\n    // canonical\n    private IRNode canon(IRConst node){\n        return node;\n    }\n    // canonical\n    private IRNode canon(IRLabel node){\n        return node;\n    }\n    // canonical\n    private IRNode canon(IRName node){\n        return node;\n    }\n    // canonical\n    private IRNode canon(IRTemp node) {\n        return node;\n    }\n    // MEM\n    private IRNode canon(IRMem node){\n        if (node.expr() instanceof IRESeq ireseq) { // lift expression\n            IRStmt svec = ireseq.stmt();\n            IRExpr ire = ireseq.expr();\n            return new IRESeq(svec, new IRMem(ire));\n        }\n        return node;\n    }\n    // Conditional Jump\n    private IRNode canon(IRCJump node){\n        if (node.cond() instanceof IRESeq ireseq) {\n            IRStmt svec = ireseq.stmt();\n            IRExpr ire = ireseq.expr();\n            return new IRSeq(svec, new IRCJump(ire, node.trueLabel(), node.falseLabel()));\n        }\n        return node;\n    }\n    // Jump\n    private IRNode canon(IRJump node){\n        if (node.target() instanceof IRESeq ireseq) {\n            IRStmt svec = ireseq.stmt();\n            IRExpr ire = ireseq.expr();\n            return new IRSeq(svec, new IRJump(ire));\n        }\n        return node;\n    }\n    // ESEQ\n    private IRNode canon(IRESeq node){\n        if (node.expr() instanceof IRESeq ireseq) {\n            IRStmt svec = ireseq.stmt();\n            IRExpr ire = ireseq.expr();\n            return new IRESeq(new IRSeq(node.stmt(), svec), ire);\n        }\n        return node;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/aar226_akc55_ayc62_ahl88/src/edu/cornell/cs/cs4120/xic/ir/visit/IRLoweringVisitor.java b/src/main/java/aar226_akc55_ayc62_ahl88/src/edu/cornell/cs/cs4120/xic/ir/visit/IRLoweringVisitor.java
--- a/src/main/java/aar226_akc55_ayc62_ahl88/src/edu/cornell/cs/cs4120/xic/ir/visit/IRLoweringVisitor.java	
+++ b/src/main/java/aar226_akc55_ayc62_ahl88/src/edu/cornell/cs/cs4120/xic/ir/visit/IRLoweringVisitor.java	
@@ -66,13 +66,26 @@
 
     // Lower each return expressions then add Return
     private IRNode canon(IRReturn node) {
-//        ArrayList<IRStmt> stmts = new ArrayList<>();
-//        ArrayList<IRExpr> exprs = new ArrayList<>();
-//
-//        for (IRExpr expr : node.rets()) {
-//
-//        }
-        return node;
+        ArrayList<IRStmt> stmts = new ArrayList<>();
+        ArrayList<String> temps_strs = new ArrayList<>();
+
+        for (IRExpr expr : node.rets()) {
+            String ti = nxtTemp();
+            if (expr instanceof IRESeq eseq) {
+                stmts.add(eseq.stmt());
+                temps_strs.add(ti);
+                stmts.add(new IRMove(new IRTemp(ti),eseq.expr()));
+            }else{
+                stmts.add(new IRMove(new IRTemp(ti),expr));
+            }
+        }
+        List<IRExpr> temps = new ArrayList<>();
+        for (String tmp : temps_strs) {
+            temps.add(new IRTemp(tmp));
+        }
+
+        stmts.add(new IRReturn(temps));
+        return new IRSeq(stmts);
     }
 
     // Lower Move be very careful look at slides
@@ -91,7 +104,7 @@
     }
 
 
-    // Lift Statement thats it
+    // Lift Statement that is it
     private IRNode canon(IRExp node) {
         if (node.expr() instanceof IRESeq ire) {
             return ire.stmt();
@@ -132,15 +145,54 @@
 
         return new IRESeq(new IRSeq(stmts), new IRTemp(t));
     }
-    // Lower each Expr
+    // Lower each Expr we never call this lol?
     private IRNode canon(IRCall node) {
         return node;
     }
 
     // if commute do that otherwise do normal
     private IRNode canon(IRBinOp node) {
+        return doesBinopCommunte(node) ? commuteBinop(node) : defaultBinop(node);
+    }
+
+    // to do
+    private boolean doesBinopCommunte(IRBinOp node){
+        return false;
+    }
+
+    private IRNode commuteBinop(IRBinOp node){
+        ArrayList<IRStmt> hoisted = new ArrayList<>();
+        IRExpr e1 = node.left();
+        IRExpr e2 = node.right();
+        if (node.left() instanceof IRESeq ires1){
+            hoisted.add(ires1.stmt());
+            e1 = ires1.expr();
+        }
+        if (node.right() instanceof  IRESeq ires2){
+            hoisted.add(ires2.stmt());
+            e2 = ires2.expr();
+        }
+        if (hoisted.size() != 0){
+            return new IRESeq(new IRSeq(hoisted),new IRBinOp(node.opType(),e1,e2));
+        }
         return node;
     }
+    private IRNode defaultBinop(IRBinOp node){
+        ArrayList<IRStmt> stmts = new ArrayList<>();
+        String t1 = nxtTemp();
+        if (node.left() instanceof IRESeq ires1){
+            stmts.add(ires1.stmt());
+            stmts.add(new IRMove(new IRTemp(t1), ires1.expr()));
+        }else{
+            stmts.add(new IRMove(new IRTemp(t1), node.left()));
+        }
+        if (node.right() instanceof IRESeq ires2){
+            stmts.add(ires2.stmt());
+            return new IRESeq(new IRSeq(stmts),new IRBinOp(node.opType(),new IRTemp(t1),ires2.expr()));
+        }else{
+            return new IRESeq(new IRSeq(stmts),new IRBinOp(node.opType(),new IRTemp(t1),node.right()));
+        }
+    }
 
     // canonical
     private IRNode canon(IRConst node){
