Index: src/main/java/aar226_akc55_ayc62_ahl88/src/edu/cornell/cs/cs4120/xic/ir/visit/IRLoweringVisitor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package aar226_akc55_ayc62_ahl88.src.edu.cornell.cs.cs4120.xic.ir.visit;\n\nimport aar226_akc55_ayc62_ahl88.src.edu.cornell.cs.cs4120.xic.ir.*;\n\npublic class IRLoweringVisitor extends IRVisitor {\n    private static final int WORD_BYTES = 8;\n    private static final String OUT_OF_BOUNDS = \"_xi_out_of_bounds\";\n    private int labelCnt;\n    private int tempCnt;\n    private String nxtLabel() {\n        return String.format(\"l%d\", (labelCnt++));\n    }\n\n    private String nxtTemp() {\n        return String.format(\"t%d\", (tempCnt++));\n    }\n    public IRLoweringVisitor (IRNodeFactory inf) {\n        super(inf);\n        labelCnt = 0;\n        tempCnt = 0;\n    }\n\n    private class BasicBlock {} // Need to think about what to add\n\n    @Override\n    protected IRNode leave(IRNode parent, IRNode n, IRNode n_, IRVisitor v_) {\n        if (n_ instanceof IRBinOp irbin) return canon(irbin);\n        if (n_ instanceof IRCall irc) return canon(irc);\n        if (n_ instanceof IRCallStmt ircstmt) return canon(ircstmt);\n        if (n_ instanceof IRCJump ircj) return canon(ircj);\n        if (n_ instanceof IRCompUnit icu) return canon(icu);\n        if (n_ instanceof IRConst ic) return canon(ic);\n        if (n_ instanceof IRESeq ireseq) return canon(ireseq);\n        if (n_ instanceof IRExp irexp) return  canon(irexp);\n        if (n_ instanceof IRFuncDecl irfunc) return canon(irfunc);\n        if (n_ instanceof IRJump irj) return canon(irj);\n        if (n_ instanceof IRLabel irl) return canon(irl);\n        if (n_ instanceof IRMem irmem) return canon(irmem);\n        if (n_ instanceof IRMove irmove) return canon(irmove);\n        if (n_ instanceof IRName irname) return canon(irname);\n        if (n_ instanceof IRReturn irret) return canon(irret);\n        if (n_ instanceof IRSeq irseq) return canon(irseq);\n        if (n_ instanceof IRTemp irtem) return canon(irtem);\n\n        throw new Error(\"Why is node not found\");\n    }\n\n\n    // Lower each statment then flatten all sequences\n    private IRNode canon(IRSeq node) {\n        return node;\n    }\n\n    // Lower each return expressions then add Return\n    private IRNode canon(IRReturn node) {\n        return node;\n    }\n\n    // Lower Move be very careful look at slides\n    private IRNode canon(IRMove node) {\n        return node;\n    }\n\n    // Create Basic Blocks And reorder all the body\n    private IRNode canon(IRFuncDecl node) {\n        return node;\n    }\n\n\n    // Lift Statement thats it\n    private IRNode canon(IRExp node) {\n        return node;\n    }\n\n    // do nothing\n    private IRNode canon(IRCompUnit node) {\n        return node;\n    }\n\n    // Lower each Expr\n    private IRNode canon(IRCallStmt node) {\n        return node;\n    }\n    // Lower each Expr\n    private IRNode canon(IRCall node) {\n        return node;\n    }\n\n    // if commute do that otherwise do normal\n    private IRNode canon(IRBinOp node) {\n        return node;\n    }\n\n    // canonical\n    private IRNode canon(IRConst node){\n        return node;\n    }\n    // canonical\n    private IRNode canon(IRLabel node){\n        return node;\n    }\n    // canonical\n    private IRNode canon(IRName node){\n        return node;\n    }\n    // canonical\n    private IRNode canon(IRTemp node) {\n        return node;\n    }\n    // MEM\n    private IRNode canon(IRMem node){\n        if (node.expr() instanceof IRESeq ireseq){ // lift expression\n            IRStmt svec = ireseq.stmt();\n            IRExpr ire = ireseq.expr();\n        }\n        return node;\n    }\n    // Conditional Jump\n    private IRNode canon(IRCJump node){\n        return node;\n    }\n    // Jump\n    private IRNode canon(IRJump node){\n\n        return node;\n    }\n    // ESEQ\n    private IRNode canon(IRESeq node){\n        return node;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/aar226_akc55_ayc62_ahl88/src/edu/cornell/cs/cs4120/xic/ir/visit/IRLoweringVisitor.java b/src/main/java/aar226_akc55_ayc62_ahl88/src/edu/cornell/cs/cs4120/xic/ir/visit/IRLoweringVisitor.java
--- a/src/main/java/aar226_akc55_ayc62_ahl88/src/edu/cornell/cs/cs4120/xic/ir/visit/IRLoweringVisitor.java	(revision 91d12835fdb1c8bb5fa35d1282fee92f718a7e24)
+++ b/src/main/java/aar226_akc55_ayc62_ahl88/src/edu/cornell/cs/cs4120/xic/ir/visit/IRLoweringVisitor.java	(date 1678572373739)
@@ -2,6 +2,8 @@
 
 import aar226_akc55_ayc62_ahl88.src.edu.cornell.cs.cs4120.xic.ir.*;
 
+import java.util.ArrayList;
+
 public class IRLoweringVisitor extends IRVisitor {
     private static final int WORD_BYTES = 8;
     private static final String OUT_OF_BOUNDS = "_xi_out_of_bounds";
@@ -48,7 +50,15 @@
 
     // Lower each statment then flatten all sequences
     private IRNode canon(IRSeq node) {
-        return node;
+        ArrayList<IRStmt> flatten = new ArrayList<>();
+        for (IRStmt stmt: node.stmts()){
+            if (stmt instanceof IRSeq seq){
+                flatten.addAll(seq.stmts());
+            }else{
+                flatten.add(stmt);
+            }
+        }
+        return new IRSeq(flatten);
     }
 
     // Lower each return expressions then add Return
