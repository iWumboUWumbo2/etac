//
// Chip-8 Emulator
// Based off of the following implementation:
// https://github.com/Klairm/chip8/
//

use io
use conv
use timer
use curses

RAM:int[]
V:int[]
I:int
DT:int
ST:int

PC:int
SP:int

ROM:int[]

stack:int[]

keyboard:int[]
display:int[]

startTime:int[]

clearDisplay() {
    i:int = 0;
    while (i < length(display)) {
        display[i] = 0;
        i = i + 1;
    }
}

// helpers cause no bitwise operators

// bitwise OR
OR(a:int, b:int):int {
    res:int = 0
    n:int = 1

    while ((a > 0) | (b > 0)) {
        if (((a % 2) == 1) | ((b % 2) == 1)) {
            res = res + n;
        }
        a = a / 2;
        b = b / 2;
        n = n * 2;
    }

    return res;
}

// bitwise AND
AND(a:int, b:int):int {
    res:int = 0
    n:int = 1

    while ((a > 0) & (b > 0)) {
        if (((a % 2) == 1) & ((b % 2) == 1)) {
            res = res + n;
        }
        a = a / 2;
        b = b / 2;
        n = n * 2;
    }

    return res;
}

// bitwise XOR
XOR(a:int, b:int):int {
    res:int = 0
    n:int = 1

    while ((a > 0) | (b > 0)) {
        if (((a % 2) == 1) != ((b % 2) == 1)) {
            res = res + n;
        }
        a = a / 2;
        b = b / 2;
        n = n * 2;
    }

    return res;
}

// get the lowest n bits of a number
nbits(num:int, bitcount:int):int {
    res:int = 0;
    shift:int = 1;

    i:int = 0;
    while (i < bitcount) {
        bit:int;
        if (num % 2 == 1) {
            bit = 1;
        } else {
            bit = 0;
        }
        res = res + bit * shift;
        shift = shift * 2;
        num = num / 2;
        i = i + 1;
    }

    return res;
}

get_lsb(num:int):int {
    if (num % 2 == 1) {
        return 1;
    } else {
        return 0;
    }
}

get_msb_8(num:int):int {
    num = num / 128;
    if (num % 2 == 1) {
        return 1;
    } else {
        return 0;
    }
}

get_itype(num:int):int {
    return num / 4096;
}

get_nnn(num:int):int {
    return nbits(num, 12);
}

get_n(num:int):int {
    return nbits(num, 4);
}

get_x(num:int):int {
    num = num / 256;
    return get_n(num);
}

get_y(num:int):int {
    low:int = get_kk(num);
    return low / 16;
}

get_kk(num:int):int {
    return nbits(num, 8);
}

rand():int {
    l:int[] = getTimestamp();
    return timestampDifference(l, startTime) % 256;
}

// Use dummies cause can't init global arrays
setup() {
    I = 0;
    DT = 0;
    ST = 0;

    PC = 512; // 0x200
    SP = 0

    dummyRAM:int[4096];
    RAM = dummyRAM;

    dummyV:int[16];
    V = dummyV;

    dummyStack:int[16];
    stack = dummyStack;

    dummyKeyboard:int[16];
    keyboard = dummyKeyboard;

    dummyDisplay:int[2048];
    display = dummyDisplay;

    ROM = {
    162, 180, 35, 230, 34, 182, 112, 1, 208, 17, 48, 37, 18, 6, 113, 255, 208, 17, 96, 26, 208, 17, 96, 37, 49, 0, 18, 14, 196, 112, 68, 112, 18, 28, 195, 3, 96, 30, 97, 3, 34, 92, 245, 21, 208, 20, 63, 1, 18, 60, 208, 20, 113, 255, 208, 20, 35, 64, 18, 28, 231, 161, 34, 114, 232, 161, 34, 132, 233, 161, 34, 150, 226, 158, 18, 80, 102, 0, 246, 21, 246, 7, 54, 0, 18, 60, 208, 20, 113, 1, 18, 42, 162, 196, 244, 30, 102, 0, 67, 1, 102, 4, 67, 2, 102, 8, 67, 3, 102, 12, 246, 30, 0, 238, 208, 20, 112, 255, 35, 52, 63, 1, 0, 238, 208, 20, 112, 1, 35, 52, 0, 238, 208, 20, 112, 1, 35, 52, 63, 1, 0, 238, 208, 20, 112, 255, 35, 52, 0, 238, 208, 20, 115, 1, 67, 4, 99, 0, 34, 92, 35, 52, 63, 1, 0, 238, 208, 20, 115, 255, 67, 255, 99, 3, 34, 92, 35, 52, 0, 238, 128, 0, 103, 5, 104, 6, 105, 4, 97, 31, 101, 16, 98, 7, 0, 238, 64, 224, 0, 0, 64, 192, 64, 0, 0, 224, 64, 0, 64, 96, 64, 0, 64, 64, 96, 0, 32, 224, 0, 0, 192, 64, 64, 0, 0, 224, 128, 0, 64, 64, 192, 0, 0, 224, 32, 0, 96, 64, 64, 0, 128, 224, 0, 0, 64, 192, 128, 0, 192, 96, 0, 0, 64, 192, 128, 0, 192, 96, 0, 0, 128, 192, 64, 0, 0, 96, 192, 0, 128, 192, 64, 0, 0, 96, 192, 0, 192, 192, 0, 0, 192, 192, 0, 0, 192, 192, 0, 0, 192, 192, 0, 0, 64, 64, 64, 64, 0, 240, 0, 0, 64, 64, 64, 64, 0, 240, 0, 0, 208, 20, 102, 53, 118, 255, 54, 0, 19, 56, 0, 238, 162, 180, 140, 16, 60, 30, 124, 1, 60, 30, 124, 1, 60, 30, 124, 1, 35, 94, 75, 10, 35, 114, 145, 192, 0, 238, 113, 1, 19, 80, 96, 27, 107, 0, 208, 17, 63, 0, 123, 1, 208, 17, 112, 1, 48, 37, 19, 98, 0, 238, 96, 27, 208, 17, 112, 1, 48, 37, 19, 116, 142, 16, 141, 224, 126, 255, 96, 27, 107, 0, 208, 225, 63, 0, 19, 144, 208, 225, 19, 148, 208, 209, 123, 1, 112, 1, 48, 37, 19, 134, 75, 0, 19, 166, 125, 255, 126, 255, 61, 1, 19, 130, 35, 192, 63, 1, 35, 192, 122, 1, 35, 192, 128, 160, 109, 7, 128, 210, 64, 4, 117, 254, 69, 2, 101, 4, 0, 238, 167, 0, 242, 85, 168, 4, 250, 51, 242, 101, 240, 41, 109, 50, 110, 0, 221, 229, 125, 5, 241, 41, 221, 229, 125, 5, 242, 41, 221, 229, 167, 0, 242, 101, 162, 180, 0, 238, 106, 0, 96, 25, 0, 238, 55, 35
    };

    startTime = getTimestamp();

    fonts:int[] = {
        240, 144, 144, 144, 240,
        32, 96, 32, 32, 112,
        240, 16, 240, 128, 240,
        240, 16, 240, 16, 240,
        144, 144, 240, 16, 16,
        240, 128, 240, 16, 240,
        240, 128, 240, 144, 240,
        240, 16, 32, 64, 64,
        240, 144, 240, 144, 240,
        240, 144, 240, 16, 240,
        240, 144, 240, 144, 144,
        224, 144, 224, 144, 224,
        240, 128, 128, 128, 240,
        224, 144, 144, 144, 224,
        240, 128, 240, 128, 240,
        240, 128, 240, 128, 128
    };

    i:int = 0;
    while (i < length(fonts)) {
        RAM[i] = fonts[i];
        i = i + 1
    }

    i = 0;
    while (i < length(ROM)) {
        RAM[512 + i] = ROM[i];
        i = i + 1;
    }
}

execute() {
    instr:int = OR(RAM[PC] * 256, RAM[PC + 1]);
    PC = PC + 2;

    itype:int = get_itype(instr);
    nnn:int = get_nnn(instr);
    n:int = get_n(instr);
    x:int = get_x(instr);
    y:int = get_y(instr);
    kk:int = get_kk(instr);

    if (itype == 0) {
        // 00E0 - CLS
        if (instr == 224) {
            clearDisplay();
        }

        // 00EE - RET
        else if (instr == 238) {
            SP = SP - 1;
            PC = stack[SP];
        }
    }

    // 1nnn - JP addr
    else if (itype == 1) {
        PC = nnn;
    }

    // 2nnn - CALL addr
    else if (itype == 2) {
        stack[SP] = PC;
        SP = SP + 1;
        PC = nnn;
    }

    // 3xkk - SE Vx, byte
    else if (itype == 3) {
        if (V[x] == kk) {
            PC = PC + 2;
        }
    }

    // 4xkk - SNE Vx, byte
    else if (itype == 4) {
        if (V[x] != kk) {
            PC = PC + 2;
        }
    }

    // 5xy0 - SE Vx, Vy
    else if (itype == 5) {
        if (V[x] == V[y]) {
            PC = PC + 2;
        }
    }

    // 6xkk - LD Vx, byte
    else if (itype == 6) {
        V[x] = kk;
    }

    // 7xkk - ADD Vx, byte
    else if (itype == 7) {
        V[x] = V[x] + kk;
    }

    else if (itype == 8) {
        // 8xy0 - LD Vx, Vy
        if (n == 0) {
            V[x] = V[y];
        }

        // 8xy1 - OR Vx, Vy
        else if (n == 1) {
            V[x] = OR(V[x], V[y]);
        }

        // 8xy2 - AND Vx, Vy
        else if (n == 2) {
            V[x] = AND(V[x], V[y]);
        }

        // 8xy3 - XOR Vx, Vy
        else if (n == 3) {
            V[x] = XOR(V[x], V[y]);
        }

        // 8xy4 - ADD Vx, Vy
        else if (n == 4) {
            sum:int = V[x] + V[y]

            if (sum > 255) {
                V[15] = 1;
            }
            else {
                V[15] = 0;
            }

            V[x] = nbits(sum, 8);
        }

        // TODO: May not work due to sign
        // 8xy5 - SUB Vx, Vy
        else if (n == 5) {
            if (V[x] > V[y]) {
                V[15] = 1;
            }
            else {
                V[15] = 0;
            }

            V[x] = nbits(V[x] - V[y], 8);
        }

        // 8xy6 - SHR Vx {, Vy}
        else if (n == 6) {
            V[15] = get_lsb(V[x]);
            V[x] = V[x] / 2
        }

        // 8xy7 - SUBN Vx, Vy
        else if (n == 7) {
            if (V[y] > V[x]) {
                V[15] = 1;
            }
            else {
                V[15] = 0;
            }

            V[x] = nbits(V[y] - V[x], 8);
        }

        // 8xyE - SHL Vx {, Vy}
        else if (n == 14) {
            V[15] = get_msb_8(V[x]);
            V[x] = nbits(V[x] * 2, 8);
        }
    }

    // 9xy0 - SNE Vx, Vy
    else if (itype == 9) {
        if (V[x] != V[y]) {
            PC = PC + 2;
        }
    }

    // Annn - LD I, addr
    else if (itype == 10) {
        I = nnn;
    }

    // Bnnn - JP V0, addr
    else if (itype == 11) {
        PC = nnn + V[0];
    }

    // Cxkk - RND Vx, byte
    else if (itype == 12) {
        V[x] = AND(rand(), kk);
    }

    // Dxyn - DRW Vx, Vy, nibble
    else if (itype == 13) {
        V_x:int = V[x];
        V_y:int = V[y];

        pixel:int;

        V[15] = 0;

        yline:int = 0;
        while (yline < n) {
            pixel = RAM[I + yline];
            k:int = 128;

            xline:int = 0;
            while (xline < 8) {
                if (get_lsb(pixel / k) == 1) {
                    dpos:int = (V_x + xline + ((V_y + yline) * 64));
                    if (display[dpos] == 1) {
                        V[15] = 1;
                    }
                    display[dpos] = XOR(display[dpos], 1);
                }
                k = k / 2;
                xline = xline + 1;
            }
            yline = yline + 1;
        }
    }

    else if (itype == 14) {
        // Ex9E - SKP Vx
        if (kk == 158) {
            if (keyboard[V[x]] != 0) {
                PC = PC + 2;
            }
        }
        // ExA1 - SKNP Vx
        else if (kk == 161) {
            if (keyboard[V[x]] != 0) {
                PC = PC + 2;
            }
        }
    }

    else if (itype == 15) {
        // Fx07 - LD Vx, DT
        if (kk == 7) {
            V[x] = DT;
        }

        // Fx0A - LD Vx, K
        else if (kk == 10) {
            press:bool = false;

            i:int = 0;
            while (i < length(keyboard)) {
                if (keyboard[i] == 1) {
                    press = true;
                    V[x] = i;
                }
                i = i + 1;
            }

            if (!press) {
                PC = PC - 2;
            }
        }

        // Fx15 - LD DT, Vx
        else if (kk == 21) {
            DT = V[x];
        }

        // Fx18 - LD ST, Vx
        else if (kk == 24) {
            ST = V[x];
        }

        // Fx1E - ADD I, Vx
        else if (kk == 30) {
            I = I + V[x]
        }

        // Fx29 - LD F, Vx
        else if (kk == 41) {
            I = V[x] * 5;
        }

        // Fx33 - LD B, Vx
        else if (kk == 51) {
            V_x:int = V[x];

            // ones
            RAM[I+2] = V_x % 10;
            V_x = V_x / 10;

            // tens
            RAM[I+1] = V_x % 10;
            V_x = V_x / 10;

            // hundreds
            RAM[I] = V_x % 10
        }

        // Fx55 - LD [I], Vx
        else if (kk == 85) {
            i:int = 0;
            while (i <= x) {
                RAM[I+i] = V[i];
                i = i + 1
            }
        }

        // Fx65 - LD Vx, [I]
        else if (kk == 101) {
            i:int = 0;
            while (i <= x) {
                V[i] = RAM[I+i];
                i = i + 1
            }
        }
    }
}

draw() {
    x:int = 0
    while (x < 64) {
        y:int = 0
        while (y < 32) {
            if (display[x + y * 64] == 1) {
                putCharAt('x', x, y);
            }
            y = y + 1
        }
        x = x + 1;
    }

    refreshWindow()
}

main(args:int[][]) {
    initCurses();
    showCursor(false)
    echoKeys(false)

    setup();

    while (true) {
        execute();
        draw();
    }

    destroyCurses();
}