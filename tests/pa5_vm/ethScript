# eth test script
#
# This file is a test script for eth (etac Test Harness).  It
# conforms to the following grammar:
#
#   ScriptFile      ::= Commands+
#   Command         ::= build
#                     | CompilerTest
#   CompilerTest    ::= TestKind (\(TestName\))? ([TestPath])? ("CmdLineArgs")?
#                           { (FileTest;)* }
#   TestKind        ::= etac
#   TestName        ::= LitString
#   FileTest        ::= Filenames Description? FailureSet?
#   Filenames       ::= Filename+
#   Description     ::= LitString
#   FailureSet      ::= Failure (, Failure)*
#   Failure         ::= \( ErrorKind \)
#                     | \( ErrorKind, LitString \)
#
#   TestPath        :   the path to the test files, enclosed in quotes,
#                       relative to the path given in eth's -testpath flag.
#   CmdLineArgs     :   command-line arguments for etac
#   Filename        :   the name of a file, interpreted from TestPath.
#   LitString       :   a literal string, enclosed in quotes.
#   ErrorKind       :   one of, or a unique prefix of one of the following
#                       strings: "Leetacal Error", "Syntax Error", or
#                       "Semantic Error".
#
# eth runs the commands in order of appearance.

# build compiler first
build

etac ("Test --help") "--help" {
    ;
}

etac ("Test --irgen") "-libpath $(testpath) --irgen" {
    arr_multdim_chain.eta;
    arrayEdge.eta;
    array_aliasing.eta;
    array_basicbitch_loop.eta;
    array_concatenation.eta;
    array_lengths.eta;
    arrlength_simple.eta;
    basic_array.eta;
    bigarr.eta;
    binopFunc.eta;
    binopTest.eta;
    bool_chain.eta;
    call_triple.eta;
    create_empty_array.eta;
    double_inc.eta;
    eq_binop.eta;
    fib.eta;
    gigaarray.eta;
    hello.eta;
    hi_mult.eta;
    longLoop.eta;
    narray2.eta;
    nested_arr.eta;
    print2darr_double_block.eta;
    print_char.eta;
    procdure.eta;
    read_arr_first_element.eta;
    rec.eta;
    test1.eta;
    test2.eta;
    test3.eta;
    test4.eta;
    test5.eta;
    testingargs.eta;
    tooDarr.eta;
    two_mult.eta;
}

etac ("Test --irgen -O") "-libpath $(testpath) --irgen -O" {
    arr_multdim_chain.eta;
        arrayEdge.eta;
        array_aliasing.eta;
        array_basicbitch_loop.eta;
        array_concatenation.eta;
        array_lengths.eta;
        arrlength_simple.eta;
        basic_array.eta;
        bigarr.eta;
        binopFunc.eta;
        binopTest.eta;
        bool_chain.eta;
        call_triple.eta;
        create_empty_array.eta;
        double_inc.eta;
        eq_binop.eta;
        fib.eta;
        gigaarray.eta;
        hello.eta;
        hi_mult.eta;
        longLoop.eta;
        narray2.eta;
        nested_arr.eta;
        print2darr_double_block.eta;
        print_char.eta;
        procdure.eta;
        read_arr_first_element.eta;
        rec.eta;
        test1.eta;
        test2.eta;
        test3.eta;
        test4.eta;
        test5.eta;
        testingargs.eta;
        tooDarr.eta;
        two_mult.eta;
}
etac ("Test -target linux") "-libpath $(testpath) -target linux" {
    arr_multdim_chain.eta;
        arrayEdge.eta;
        array_aliasing.eta;
        array_basicbitch_loop.eta;
        array_concatenation.eta;
        array_lengths.eta;
        arrlength_simple.eta;
        basic_array.eta;
        bigarr.eta;
        binopFunc.eta;
        binopTest.eta;
        bool_chain.eta;
        call_triple.eta;
        create_empty_array.eta;
        double_inc.eta;
        eq_binop.eta;
        fib.eta;
        gigaarray.eta;
        hello.eta;
        hi_mult.eta;
        longLoop.eta;
        narray2.eta;
        nested_arr.eta;
        print2darr_double_block.eta;
        print_char.eta;
        procdure.eta;
        read_arr_first_element.eta;
        rec.eta;
        test1.eta;
        test2.eta;
        test3.eta;
        test4.eta;
        test5.eta;
        testingargs.eta;
        tooDarr.eta;
        two_mult.eta;

}

etac ("Test -target linux -O") "-libpath $(testpath) -target linux -O" {
    arr_multdim_chain.eta;
        arrayEdge.eta;
        array_aliasing.eta;
        array_basicbitch_loop.eta;
        array_concatenation.eta;
        array_lengths.eta;
        arrlength_simple.eta;
        basic_array.eta;
        bigarr.eta;
        binopFunc.eta;
        binopTest.eta;
        bool_chain.eta;
        call_triple.eta;
        create_empty_array.eta;
        double_inc.eta;
        eq_binop.eta;
        fib.eta;
        gigaarray.eta;
        hello.eta;
        hi_mult.eta;
        longLoop.eta;
        narray2.eta;
        nested_arr.eta;
        print2darr_double_block.eta;
        print_char.eta;
        procdure.eta;
        read_arr_first_element.eta;
        rec.eta;
        test1.eta;
        test2.eta;
        test3.eta;
        test4.eta;
        test5.eta;
        testingargs.eta;
        tooDarr.eta;
        two_mult.eta;
}
