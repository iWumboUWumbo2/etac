
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package aar226_akc55_ayc62_ahl88;

import java_cup.runtime.*;
import aar226_akc55_ayc62_ahl88.newast.*;
import aar226_akc55_ayc62_ahl88.newast.definitions.*;
import aar226_akc55_ayc62_ahl88.newast.declarations.*;
import aar226_akc55_ayc62_ahl88.newast.expr.*;
import aar226_akc55_ayc62_ahl88.newast.stmt.*;
import aar226_akc55_ayc62_ahl88.newast.stmt.declstmt.*;
import aar226_akc55_ayc62_ahl88.newast.expr.arrayaccessexpr.*;
import aar226_akc55_ayc62_ahl88.newast.expr.arrayliteral.*;
import aar226_akc55_ayc62_ahl88.newast.expr.binop.*;
import aar226_akc55_ayc62_ahl88.newast.expr.binop.intbop.*;
import aar226_akc55_ayc62_ahl88.newast.expr.binop.boolbop.*;
import aar226_akc55_ayc62_ahl88.newast.expr.unop.*;
import aar226_akc55_ayc62_ahl88.newast.expr.unop.intuop.*;
import aar226_akc55_ayc62_ahl88.newast.expr.unop.booluop.*;
import aar226_akc55_ayc62_ahl88.newast.interfaceNodes.*;
import aar226_akc55_ayc62_ahl88.newast.expr.*;
import java.util.ArrayList;

/** CUP v0.11b 20150326 generated parser.
  */
public class EtiParser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public EtiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public EtiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public EtiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\035\003\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\004\005" +
    "\000\002\037\004\000\002\037\002\000\002\036\010\000" +
    "\002\036\006\000\002\005\004\000\002\005\002\000\002" +
    "\006\003\000\002\006\003\000\002\007\011\000\002\007" +
    "\007\000\002\010\005\000\002\010\003\000\002\010\002" +
    "\000\002\011\005\000\002\031\004\000\002\030\006\000" +
    "\002\030\005\000\002\015\003\000\002\015\005\000\002" +
    "\015\004\000\002\016\003\000\002\016\004\000\002\016" +
    "\003\000\002\016\004\000\002\016\003\000\002\012\005" +
    "\000\002\012\003\000\002\013\004\000\002\013\004\000" +
    "\002\014\005\000\002\014\006\000\002\014\006\000\002" +
    "\014\002\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\004\000\002\017\004\000\002\017\003\000\002\017\004" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\004\000\002\017\005\000\002" +
    "\017\006\000\002\017\006\000\002\017\005\000\002\017" +
    "\006\000\002\017\004\000\002\021\003\000\002\021\005" +
    "\000\002\022\003\000\002\022\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\007\000\002\022\005\000\002" +
    "\022\006\000\002\022\003\000\002\025\005\000\002\034" +
    "\004\000\002\027\005\000\002\027\007\000\002\027\007" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\007\000\002\027\007\000\002\027\011\000\002" +
    "\027\007\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\007\000\002\027\007" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\024\005\000\002\024\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\020" +
    "\005\000\002\020\006\000\002\020\007\000\002\020\007" +
    "\000\002\020\006\000\002\020\010\000\002\023\004\000" +
    "\002\023\005\000\002\023\002\000\002\026\004\000\002" +
    "\026\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\006\002\ufffa\004\ufffa\001\002\000\004\002" +
    "\040\001\002\000\006\002\000\004\007\001\002\000\006" +
    "\002\ufffb\004\ufffb\001\002\000\004\043\010\001\002\000" +
    "\010\004\011\044\uffef\050\uffef\001\002\000\004\047\036" +
    "\001\002\000\006\044\015\050\014\001\002\000\006\044" +
    "\ufff0\050\ufff0\001\002\000\004\004\011\001\002\000\010" +
    "\002\ufff8\004\ufff8\047\016\001\002\000\006\011\022\012" +
    "\017\001\002\000\014\002\uffdb\004\uffdb\041\uffdb\044\uffdb" +
    "\050\uffdb\001\002\000\010\002\uffe1\004\uffe1\050\uffe1\001" +
    "\002\000\010\002\ufff9\004\ufff9\050\032\001\002\000\014" +
    "\002\uffdb\004\uffdb\041\uffdb\044\uffdb\050\uffdb\001\002\000" +
    "\014\002\uffe0\004\uffe0\041\024\044\uffe0\050\uffe0\001\002" +
    "\000\010\004\027\007\026\042\025\001\002\000\014\002" +
    "\uffde\004\uffde\041\uffde\044\uffde\050\uffde\001\002\000\004" +
    "\042\031\001\002\000\004\042\030\001\002\000\014\002" +
    "\uffdc\004\uffdc\041\uffdc\044\uffdc\050\uffdc\001\002\000\014" +
    "\002\uffdd\004\uffdd\041\uffdd\044\uffdd\050\uffdd\001\002\000" +
    "\006\011\022\012\017\001\002\000\010\002\uffe2\004\uffe2" +
    "\050\uffe2\001\002\000\014\002\uffdf\004\uffdf\041\024\044" +
    "\uffdf\050\uffdf\001\002\000\006\044\ufff1\050\ufff1\001\002" +
    "\000\006\011\022\012\017\001\002\000\006\044\uffee\050" +
    "\uffee\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\006\035\003\037\004\001\001\000\002\001" +
    "\001\000\004\036\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\011\011\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\034" +
    "\001\001\000\002\001\001\000\006\012\020\013\017\001" +
    "\001\000\004\014\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\036\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EtiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$EtiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EtiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token){
        throw new Error(cur_token.left + ":" + cur_token.right + " error: Parsing error " + cur_token.value());
    }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$EtiParser$actions {
    private final EtiParser parser;

    /** Constructor */
    CUP$EtiParser$actions(EtiParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 116. */
    public final java_cup.runtime.Symbol CUP$EtiParser$do_action_part00000000(
            int                        CUP$EtiParser$act_num,
            java_cup.runtime.lr_parser CUP$EtiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$EtiParser$stack,
            int                        CUP$EtiParser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$EtiParser$result;

        /* select the action based on the action number */
        switch (CUP$EtiParser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= topLevelInter EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int start_valright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                EtiInterface start_val = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<EtiInterface> value();
                RESULT = start_val;
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$EtiParser$parser.done_parsing();
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // topLevelInter ::= interfaceStar 
            {
                EtiInterface RESULT = null;
                int isleft = CUP$EtiParser$stack.peek().left;
                int isright = CUP$EtiParser$stack.peek().right;
                ArrayList<Method_Interface> is = CUP$EtiParser$stack.peek().<ArrayList<Method_Interface>> value();
                
    RESULT = new EtiInterface(is,isleft,isright);
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("topLevelInter",27, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // importUseStar ::= importUseStar use_component 
            {
                ArrayList<Use> RESULT = null;
                int iusleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int iusright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                ArrayList<Use> ius = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<ArrayList<Use>> value();
                int uleft = CUP$EtiParser$stack.peek().left;
                int uright = CUP$EtiParser$stack.peek().right;
                Use u = CUP$EtiParser$stack.peek().<Use> value();
                 ius.add(u); RESULT = ius; 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("importUseStar",1, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // importUseStar ::= 
            {
                ArrayList<Use> RESULT = null;
                 RESULT = new ArrayList<Use>(); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("importUseStar",1, CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // use_component ::= USE IDENTIFIER 
            {
                Use RESULT = null;
                int ileft = CUP$EtiParser$stack.peek().left;
                int iright = CUP$EtiParser$stack.peek().right;
                String i = CUP$EtiParser$stack.peek().<String> value();
                 RESULT = new Use(i, ileft, iright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("use_component",2, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // use_component ::= USE IDENTIFIER SEMICOLON 
            {
                Use RESULT = null;
                int ileft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int iright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                String i = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<String> value();
                 RESULT = new Use(i, ileft, iright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("use_component",2, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // interfaceStar ::= interfaceStar method_interface 
            {
                ArrayList<Method_Interface> RESULT = null;
                int isleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int isright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                ArrayList<Method_Interface> is = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<ArrayList<Method_Interface>> value();
                int mileft = CUP$EtiParser$stack.peek().left;
                int miright = CUP$EtiParser$stack.peek().right;
                Method_Interface mi = CUP$EtiParser$stack.peek().<Method_Interface> value();
                 is.add(mi); RESULT = is;
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("interfaceStar",29, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // interfaceStar ::= 
            {
                ArrayList<Method_Interface> RESULT = null;
                RESULT = new ArrayList<Method_Interface>();
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("interfaceStar",29, CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // method_interface ::= IDENTIFIER OPEN_PAREN emptyBracketDecl_star CLOSE_PAREN COLON emptyBracketType_plus 
            {
                Method_Interface RESULT = null;
                int ileft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-5).left;
                int iright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-5).right;
                String i = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-5).<String> value();
                int dsleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).left;
                int dsright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).right;
                ArrayList<AnnotatedTypeDecl> ds = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).<ArrayList<AnnotatedTypeDecl>> value();
                int tsleft = CUP$EtiParser$stack.peek().left;
                int tsright = CUP$EtiParser$stack.peek().right;
                ArrayList<Type> ts = CUP$EtiParser$stack.peek().<ArrayList<Type>> value();
                
     RESULT = new Method_Interface(i,ds,ts,ileft,iright);
     
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("method_interface",28, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-5), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // method_interface ::= IDENTIFIER OPEN_PAREN emptyBracketDecl_star CLOSE_PAREN 
            {
                Method_Interface RESULT = null;
                int ileft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).left;
                int iright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).right;
                String i = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).<String> value();
                int dsleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int dsright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                ArrayList<AnnotatedTypeDecl> ds = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<ArrayList<AnnotatedTypeDecl>> value();
                
      RESULT = new Method_Interface(i,ds,new ArrayList<Type>(),ileft,iright);
      
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("method_interface",28, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // definitionStar ::= definitionStar definition 
            {
                ArrayList<Definition> RESULT = null;
                int dsleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int dsright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                ArrayList<Definition> ds = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<ArrayList<Definition>> value();
                int dleft = CUP$EtiParser$stack.peek().left;
                int dright = CUP$EtiParser$stack.peek().right;
                Definition d = CUP$EtiParser$stack.peek().<Definition> value();
                ds.add(d); RESULT = ds; 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("definitionStar",3, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // definitionStar ::= 
            {
                ArrayList<Definition> RESULT = null;
                 RESULT = new ArrayList<Definition>(); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("definitionStar",3, CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // definition ::= method 
            {
                Definition RESULT = null;
                int mleft = CUP$EtiParser$stack.peek().left;
                int mright = CUP$EtiParser$stack.peek().right;
                Method m = CUP$EtiParser$stack.peek().<Method> value();
                 RESULT = m; 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("definition",4, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // definition ::= globalDecl 
            {
                Definition RESULT = null;
                int gdleft = CUP$EtiParser$stack.peek().left;
                int gdright = CUP$EtiParser$stack.peek().right;
                Definition gd = CUP$EtiParser$stack.peek().<Definition> value();
                 RESULT = gd; 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("definition",4, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // method ::= IDENTIFIER OPEN_PAREN emptyBracketDecl_star CLOSE_PAREN COLON emptyBracketType_plus block 
            {
                Method RESULT = null;
                int ileft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-6).left;
                int iright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-6).right;
                String i = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-6).<String> value();
                int dsleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).left;
                int dsright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).right;
                ArrayList<AnnotatedTypeDecl> ds = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).<ArrayList<AnnotatedTypeDecl>> value();
                int tsleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int tsright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                ArrayList<Type> ts = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<ArrayList<Type>> value();
                int bleft = CUP$EtiParser$stack.peek().left;
                int bright = CUP$EtiParser$stack.peek().right;
                Block b = CUP$EtiParser$stack.peek().<Block> value();
                
    RESULT = new Method(i,ds,ts,b,ileft,iright);
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("method",5, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-6), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // method ::= IDENTIFIER OPEN_PAREN emptyBracketDecl_star CLOSE_PAREN block 
            {
                Method RESULT = null;
                int ileft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).left;
                int iright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).right;
                String i = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).<String> value();
                int dsleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int dsright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrayList<AnnotatedTypeDecl> ds = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrayList<AnnotatedTypeDecl>> value();
                int bleft = CUP$EtiParser$stack.peek().left;
                int bright = CUP$EtiParser$stack.peek().right;
                Block b = CUP$EtiParser$stack.peek().<Block> value();
                 // Block b
        RESULT = new Method(i,ds,new ArrayList<Type>(),b,ileft,iright); // NONE
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("method",5, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // emptyBracketDecl_star ::= emptyBracketDecl_star COMMA emptyBracketDecl 
            {
                ArrayList<AnnotatedTypeDecl> RESULT = null;
                int declstarleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int declstarright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrayList<AnnotatedTypeDecl> declstar = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrayList<AnnotatedTypeDecl>> value();
                int dleft = CUP$EtiParser$stack.peek().left;
                int dright = CUP$EtiParser$stack.peek().right;
                AnnotatedTypeDecl d = CUP$EtiParser$stack.peek().<AnnotatedTypeDecl> value();
                declstar.add(d); RESULT = declstar; 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl_star",6, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // emptyBracketDecl_star ::= emptyBracketDecl 
            {
                ArrayList<AnnotatedTypeDecl> RESULT = null;
                int dleft = CUP$EtiParser$stack.peek().left;
                int dright = CUP$EtiParser$stack.peek().right;
                AnnotatedTypeDecl d = CUP$EtiParser$stack.peek().<AnnotatedTypeDecl> value();
                ArrayList<AnnotatedTypeDecl> temp = new ArrayList<AnnotatedTypeDecl>();
      temp.add(d);
      RESULT = temp;
      
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl_star",6, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // emptyBracketDecl_star ::= 
            {
                ArrayList<AnnotatedTypeDecl> RESULT = null;
                 RESULT = new ArrayList<AnnotatedTypeDecl>();
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl_star",6, CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // emptyBracketDecl ::= IDENTIFIER COLON emptyBracketType 
            {
                AnnotatedTypeDecl RESULT = null;
                int ileft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int iright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                String i = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<String> value();
                int tleft = CUP$EtiParser$stack.peek().left;
                int tright = CUP$EtiParser$stack.peek().right;
                Type t = CUP$EtiParser$stack.peek().<Type> value();
                 RESULT = new AnnotatedTypeDecl(new Id(i,ileft,iright),t,ileft,iright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl",7, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // fullBracketType ::= IDENTIFIER fullBracketPlus 
            {
                ArrAccessDecl RESULT = null;
                int ileft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int iright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                String i = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<String> value();
                int eleft = CUP$EtiParser$stack.peek().left;
                int eright = CUP$EtiParser$stack.peek().right;
                ArrayList<Expr> e = CUP$EtiParser$stack.peek().<ArrayList<Expr>> value();
                
    Id a = new Id(i,ileft,iright);
    RESULT = new ArrAccessDecl(a,e, ileft,iright);
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("fullBracketType",23, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // fullBracketPlus ::= fullBracketPlus OPEN_BRACKET expr CLOSE_BRACKET 
            {
                ArrayList<Expr> RESULT = null;
                int tsleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).left;
                int tsright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).right;
                ArrayList<Expr> ts = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).<ArrayList<Expr>> value();
                int eleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int eright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Expr e = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Expr> value();
                 ts.add(e); RESULT = ts; 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("fullBracketPlus",22, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // fullBracketPlus ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                ArrayList<Expr> RESULT = null;
                int eleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int eright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Expr e = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Expr> value();
                 ArrayList<Expr> exprList = new ArrayList<Expr>();
                         exprList.add(e);
                         RESULT = exprList;
                         
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("fullBracketPlus",22, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // globalDecl ::= emptyBracketDecl 
            {
                Definition RESULT = null;
                int edleft = CUP$EtiParser$stack.peek().left;
                int edright = CUP$EtiParser$stack.peek().right;
                AnnotatedTypeDecl ed = CUP$EtiParser$stack.peek().<AnnotatedTypeDecl> value();
                RESULT = new Globdecl(ed, null, edleft, edright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("globalDecl",11, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // globalDecl ::= emptyBracketDecl GETS value 
            {
                Definition RESULT = null;
                int edleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int edright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                AnnotatedTypeDecl ed = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<AnnotatedTypeDecl> value();
                int gleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int gright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Object g = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Object> value();
                int vleft = CUP$EtiParser$stack.peek().left;
                int vright = CUP$EtiParser$stack.peek().right;
                Expr v = CUP$EtiParser$stack.peek().<Expr> value();
                
        if (!ed.type.dimensions.allEmpty) {
            throw new Error(gleft +":" + gright +" "  + "array with init len no Val");
        }
        if (ed.type.dimensions.getDim() != 0){
            throw new Error(gleft +":" + gright +" " + "global arr not init allowed");
        }
        RESULT  = new Globdecl(ed, v, edleft, edright);
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("globalDecl",11, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // globalDecl ::= globalDecl SEMICOLON 
            {
                Definition RESULT = null;
                int gdleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int gdright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Definition gd = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Definition> value();
                RESULT = gd;
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("globalDecl",11, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // value ::= INTEGER_LITERAL 
            {
                Expr RESULT = null;
                int ileft = CUP$EtiParser$stack.peek().left;
                int iright = CUP$EtiParser$stack.peek().right;
                Long i = CUP$EtiParser$stack.peek().<Long> value();
                 RESULT = new IntLiteral(i,ileft,iright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("value",12, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // value ::= MINUS MAX_NUM 
            {
                Expr RESULT = null;
                int mleft = CUP$EtiParser$stack.peek().left;
                int mright = CUP$EtiParser$stack.peek().right;
                Object m = CUP$EtiParser$stack.peek().<Object> value();
                RESULT = new IntLiteral(Long.MIN_VALUE,mleft,mright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("value",12, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // value ::= CHARACTER_LITERAL 
            {
                Expr RESULT = null;
                int cleft = CUP$EtiParser$stack.peek().left;
                int cright = CUP$EtiParser$stack.peek().right;
                String c = CUP$EtiParser$stack.peek().<String> value();
                 RESULT = new IntLiteral(c,cleft,cright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("value",12, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // value ::= MINUS INTEGER_LITERAL 
            {
                Expr RESULT = null;
                int ileft = CUP$EtiParser$stack.peek().left;
                int iright = CUP$EtiParser$stack.peek().right;
                Long i = CUP$EtiParser$stack.peek().<Long> value();
                 RESULT = new IntLiteral(-i,ileft,iright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("value",12, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // value ::= BOOL_LITERAL 
            {
                Expr RESULT = null;
                int bleft = CUP$EtiParser$stack.peek().left;
                int bright = CUP$EtiParser$stack.peek().right;
                Boolean b = CUP$EtiParser$stack.peek().<Boolean> value();
                 RESULT = new BoolLiteral(b,bleft,bright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("value",12, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // emptyBracketType_plus ::= emptyBracketType_plus COMMA emptyBracketType 
            {
                ArrayList<Type> RESULT = null;
                int tsleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int tsright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrayList<Type> ts = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrayList<Type>> value();
                int tleft = CUP$EtiParser$stack.peek().left;
                int tright = CUP$EtiParser$stack.peek().right;
                Type t = CUP$EtiParser$stack.peek().<Type> value();
                 ts.add(t); RESULT = ts; 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("emptyBracketType_plus",8, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // emptyBracketType_plus ::= emptyBracketType 
            {
                ArrayList<Type> RESULT = null;
                int tleft = CUP$EtiParser$stack.peek().left;
                int tright = CUP$EtiParser$stack.peek().right;
                Type t = CUP$EtiParser$stack.peek().<Type> value();
                 ArrayList<Type> typeList = new ArrayList<Type>();
                      typeList.add(t);
                      RESULT = typeList;
                      
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("emptyBracketType_plus",8, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // emptyBracketType ::= INT emptyDimension_star 
            {
                Type RESULT = null;
                int dleft = CUP$EtiParser$stack.peek().left;
                int dright = CUP$EtiParser$stack.peek().right;
                Dimension d = CUP$EtiParser$stack.peek().<Dimension> value();
                RESULT = new Type(true,d,dleft,dright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("emptyBracketType",9, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // emptyBracketType ::= BOOL emptyDimension_star 
            {
                Type RESULT = null;
                int dleft = CUP$EtiParser$stack.peek().left;
                int dright = CUP$EtiParser$stack.peek().right;
                Dimension d = CUP$EtiParser$stack.peek().<Dimension> value();
                RESULT = new Type(false,d,dleft,dright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("emptyBracketType",9, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // emptyDimension_star ::= emptyDimension_star OPEN_BRACKET CLOSE_BRACKET 
            {
                Dimension RESULT = null;
                int dsleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int dsright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Dimension ds = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Dimension> value();
                
    ds.increment();
    ds.foundEmpty = true;
    ds.indices.add(null);
    RESULT = ds;
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",10, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // emptyDimension_star ::= emptyDimension_star OPEN_BRACKET INTEGER_LITERAL CLOSE_BRACKET 
            {
                Dimension RESULT = null;
                int dsleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).left;
                int dsright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).right;
                Dimension ds = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).<Dimension> value();
                int ileft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int iright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Long i = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Long> value();
                
        if (ds.foundEmpty) throw new Error(ileft + ":" + iright  + " Filled index after empty");
        ds.allEmpty = false;
        IntLiteral iL = new IntLiteral(i,ileft,iright);
        ds.indices.add(iL);
        ds.increment(); // [][2]
        RESULT = ds;
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",10, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // emptyDimension_star ::= emptyDimension_star OPEN_BRACKET IDENTIFIER CLOSE_BRACKET 
            {
                Dimension RESULT = null;
                int dsleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).left;
                int dsright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).right;
                Dimension ds = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).<Dimension> value();
                int ileft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int iright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                String i = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<String> value();
                
        if (ds.foundEmpty) throw new Error(ileft + ":" + iright  + " Filled index after empty");
        ds.allEmpty = false;
        ds.indices.add(new Id(i,ileft,iright));
        ds.increment(); // [][2]
        RESULT = ds;
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",10, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // emptyDimension_star ::= 
            {
                Dimension RESULT = null;
                RESULT = new Dimension(-1,-1); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",10, CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int e1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Expr e1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Expr> value();
                RESULT = e1;
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // expr ::= expr TIMES expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int e1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Expr e1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Expr> value();
                int e2left = CUP$EtiParser$stack.peek().left;
                int e2right = CUP$EtiParser$stack.peek().right;
                Expr e2 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new TimesBinop(e1, e2, e1left, e1right); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // expr ::= expr HI_MULT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int e1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Expr e1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Expr> value();
                int e2left = CUP$EtiParser$stack.peek().left;
                int e2right = CUP$EtiParser$stack.peek().right;
                Expr e2 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new HighMultBinop(e1, e2, e1left, e1right); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // expr ::= expr DIVIDE expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int e1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Expr e1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Expr> value();
                int e2left = CUP$EtiParser$stack.peek().left;
                int e2right = CUP$EtiParser$stack.peek().right;
                Expr e2 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new DivideBinop(e1, e2, e1left, e1right); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // expr ::= expr MODULO expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int e1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Expr e1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Expr> value();
                int e2left = CUP$EtiParser$stack.peek().left;
                int e2right = CUP$EtiParser$stack.peek().right;
                Expr e2 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new ModuloBinop(e1, e2, e1left, e1right); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // expr ::= expr PLUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int e1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Expr e1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Expr> value();
                int e2left = CUP$EtiParser$stack.peek().left;
                int e2right = CUP$EtiParser$stack.peek().right;
                Expr e2 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new PlusBinop(e1, e2, e1left, e1right); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // expr ::= expr MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int e1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Expr e1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Expr> value();
                int e2left = CUP$EtiParser$stack.peek().left;
                int e2right = CUP$EtiParser$stack.peek().right;
                Expr e2 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new MinusBinop(e1, e2, e1left, e1right); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // expr ::= expr LT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int e1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Expr e1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Expr> value();
                int e2left = CUP$EtiParser$stack.peek().left;
                int e2right = CUP$EtiParser$stack.peek().right;
                Expr e2 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new LtBinop(e1, e2, e1left, e1right); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // expr ::= expr LEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int e1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Expr e1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Expr> value();
                int e2left = CUP$EtiParser$stack.peek().left;
                int e2right = CUP$EtiParser$stack.peek().right;
                Expr e2 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new LeqBinop(e1, e2, e1left, e1right); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // expr ::= expr GT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int e1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Expr e1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Expr> value();
                int e2left = CUP$EtiParser$stack.peek().left;
                int e2right = CUP$EtiParser$stack.peek().right;
                Expr e2 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new GtBinop(e1, e2, e1left, e1right); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // expr ::= expr GEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int e1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Expr e1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Expr> value();
                int e2left = CUP$EtiParser$stack.peek().left;
                int e2right = CUP$EtiParser$stack.peek().right;
                Expr e2 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new GeqBinop(e1, e2, e1left, e1right); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // expr ::= expr EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int e1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Expr e1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Expr> value();
                int e2left = CUP$EtiParser$stack.peek().left;
                int e2right = CUP$EtiParser$stack.peek().right;
                Expr e2 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new EqualsBinop(e1, e2, e1left, e1right); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // expr ::= expr NOT_EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int e1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Expr e1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Expr> value();
                int e2left = CUP$EtiParser$stack.peek().left;
                int e2right = CUP$EtiParser$stack.peek().right;
                Expr e2 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new NotEqualsBinop(e1, e2, e1left, e1right); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // expr ::= expr AND expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int e1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Expr e1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Expr> value();
                int e2left = CUP$EtiParser$stack.peek().left;
                int e2right = CUP$EtiParser$stack.peek().right;
                Expr e2 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new AndBinop(e1, e2, e1left, e1right); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // expr ::= expr OR expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int e1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Expr e1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Expr> value();
                int e2left = CUP$EtiParser$stack.peek().left;
                int e2right = CUP$EtiParser$stack.peek().right;
                Expr e2 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new OrBinop(e1, e2, e1left, e1right); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // expr ::= NOT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.peek().left;
                int e1right = CUP$EtiParser$stack.peek().right;
                Expr e1 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new NotUnop(e1, e1left, e1right); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // expr ::= MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtiParser$stack.peek().left;
                int e1right = CUP$EtiParser$stack.peek().right;
                Expr e1 = CUP$EtiParser$stack.peek().<Expr> value();
                 RESULT = new IntegerNegExpr (e1, e1left, e1right);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // expr ::= INTEGER_LITERAL 
            {
                Expr RESULT = null;
                int ileft = CUP$EtiParser$stack.peek().left;
                int iright = CUP$EtiParser$stack.peek().right;
                Long i = CUP$EtiParser$stack.peek().<Long> value();
                 RESULT = new IntLiteral(i,ileft,iright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // expr ::= MINUS MAX_NUM 
            {
                Expr RESULT = null;
                int mleft = CUP$EtiParser$stack.peek().left;
                int mright = CUP$EtiParser$stack.peek().right;
                Object m = CUP$EtiParser$stack.peek().<Object> value();
                 RESULT = new IntLiteral(Long.MIN_VALUE,mleft,mright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // expr ::= CHARACTER_LITERAL 
            {
                Expr RESULT = null;
                int cleft = CUP$EtiParser$stack.peek().left;
                int cright = CUP$EtiParser$stack.peek().right;
                String c = CUP$EtiParser$stack.peek().<String> value();
                 RESULT = new IntLiteral(c, cleft, cright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // expr ::= BOOL_LITERAL 
            {
                Expr RESULT = null;
                int bleft = CUP$EtiParser$stack.peek().left;
                int bright = CUP$EtiParser$stack.peek().right;
                Boolean b = CUP$EtiParser$stack.peek().<Boolean> value();
                 RESULT = new BoolLiteral(b, bleft, bright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // expr ::= STRING_LITERAL 
            {
                Expr RESULT = null;
                int sleft = CUP$EtiParser$stack.peek().left;
                int sright = CUP$EtiParser$stack.peek().right;
                String s = CUP$EtiParser$stack.peek().<String> value();
                 RESULT = new ArrayValueLiteral(s, sleft, sright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // expr ::= IDENTIFIER 
            {
                Expr RESULT = null;
                int idleft = CUP$EtiParser$stack.peek().left;
                int idright = CUP$EtiParser$stack.peek().right;
                String id = CUP$EtiParser$stack.peek().<String> value();
                 RESULT = new Id(id, idleft, idright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // expr ::= OPEN_BRACE CLOSE_BRACE 
            {
                Expr RESULT = null;
                int obleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int obright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Object ob = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Object> value();
                RESULT = new ArrayValueLiteral(new ArrayList<Expr>(), obleft, obright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // expr ::= OPEN_BRACE exprList CLOSE_BRACE 
            {
                Expr RESULT = null;
                int xleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int xright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                ArrayList<Expr> x = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<ArrayList<Expr>> value();
                RESULT = new ArrayValueLiteral(x, xleft, xright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // expr ::= OPEN_BRACE exprList COMMA CLOSE_BRACE 
            {
                Expr RESULT = null;
                int xleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int xright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrayList<Expr> x = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrayList<Expr>> value();
                RESULT = new ArrayValueLiteral(x, xleft, xright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // expr ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int eleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int eright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Expr e = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Expr> value();
                 RESULT = new Length(e, eleft, eright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // expr ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Expr RESULT = null;
                int idleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int idright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                String id = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<String> value();
                 RESULT = new FunctionCallExpr(new Id(id,idleft,idright),new ArrayList<Expr>(), idleft, idright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // expr ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Expr RESULT = null;
                int idleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).left;
                int idright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).right;
                String id = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).<String> value();
                int eleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int eright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                ArrayList<Expr> e = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<ArrayList<Expr>> value();
                 RESULT = new FunctionCallExpr(new Id(id,idleft,idright), e, idleft, idright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // expr ::= expr fullBracketPlus 
            {
                Expr RESULT = null;
                int eleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int eright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Expr e = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Expr> value();
                int ileft = CUP$EtiParser$stack.peek().left;
                int iright = CUP$EtiParser$stack.peek().right;
                ArrayList<Expr> i = CUP$EtiParser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new ArrayAccessExpr(e, i, eleft, eright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("expr",13, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // exprList ::= expr 
            {
                ArrayList<Expr> RESULT = null;
                int xleft = CUP$EtiParser$stack.peek().left;
                int xright = CUP$EtiParser$stack.peek().right;
                Expr x = CUP$EtiParser$stack.peek().<Expr> value();
                
            ArrayList<Expr> temp = new ArrayList<Expr>();
            temp.add(x);
            RESULT = temp;
        
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("exprList",15, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // exprList ::= exprList COMMA expr 
            {
                ArrayList<Expr> RESULT = null;
                int aveleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int averight = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrayList<Expr> ave = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrayList<Expr>> value();
                int xleft = CUP$EtiParser$stack.peek().left;
                int xright = CUP$EtiParser$stack.peek().right;
                Expr x = CUP$EtiParser$stack.peek().<Expr> value();
                 ave.add(x); RESULT = ave; 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("exprList",15, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // stmt ::= declaration_assign_stmt 
            {
                Stmt RESULT = null;
                int dasleft = CUP$EtiParser$stack.peek().left;
                int dasright = CUP$EtiParser$stack.peek().right;
                Stmt das = CUP$EtiParser$stack.peek().<Stmt> value();
                RESULT = das; 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("stmt",16, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // stmt ::= multi_declaration_assign_stmt 
            {
                Stmt RESULT = null;
                int mdasleft = CUP$EtiParser$stack.peek().left;
                int mdasright = CUP$EtiParser$stack.peek().right;
                Stmt mdas = CUP$EtiParser$stack.peek().<Stmt> value();
                RESULT = mdas;
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("stmt",16, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // stmt ::= WHILE expr stmt 
            {
                Stmt RESULT = null;
                int eleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int eright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Expr e = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Expr> value();
                int sleft = CUP$EtiParser$stack.peek().left;
                int sright = CUP$EtiParser$stack.peek().right;
                Stmt s = CUP$EtiParser$stack.peek().<Stmt> value();
                RESULT = new While(e,s,eleft,eright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("stmt",16, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // stmt ::= IF expr stmt 
            {
                Stmt RESULT = null;
                int eleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int eright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Expr e = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Expr> value();
                int sleft = CUP$EtiParser$stack.peek().left;
                int sright = CUP$EtiParser$stack.peek().right;
                Stmt s = CUP$EtiParser$stack.peek().<Stmt> value();
                RESULT = new IfOnly(e,s,eleft,eright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("stmt",16, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // stmt ::= IF expr stmt ELSE stmt 
            {
                Stmt RESULT = null;
                int eleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).left;
                int eright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).right;
                Expr e = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).<Expr> value();
                int s1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int s1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Stmt s1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Stmt> value();
                int s2left = CUP$EtiParser$stack.peek().left;
                int s2right = CUP$EtiParser$stack.peek().right;
                Stmt s2 = CUP$EtiParser$stack.peek().<Stmt> value();
                RESULT = new IfElse(e,s1,s2,eleft,eright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("stmt",16, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // stmt ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Stmt RESULT = null;
                int idleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int idright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                String id = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<String> value();
                 RESULT = new ProcedureCall(new Id(id,idleft,idright),new ArrayList<Expr>(),idleft,idright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("stmt",16, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // stmt ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Stmt RESULT = null;
                int idleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).left;
                int idright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).right;
                String id = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).<String> value();
                int eleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int eright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                ArrayList<Expr> e = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<ArrayList<Expr>> value();
                 RESULT = new ProcedureCall(new Id(id,idleft,idright), e, idleft,idright); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("stmt",16, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // stmt ::= block 
            {
                Stmt RESULT = null;
                int bleft = CUP$EtiParser$stack.peek().left;
                int bright = CUP$EtiParser$stack.peek().right;
                Block b = CUP$EtiParser$stack.peek().<Block> value();
                 RESULT = b; 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("stmt",16, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // multi_declaration_assign_stmt ::= type_list GETS exprList 
            {
                Stmt RESULT = null;
                int tlleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int tlright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrayList<Decl> tl = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrayList<Decl>> value();
                int elleft = CUP$EtiParser$stack.peek().left;
                int elright = CUP$EtiParser$stack.peek().right;
                ArrayList<Expr> el = CUP$EtiParser$stack.peek().<ArrayList<Expr>> value();
                RESULT = new MultiDeclAssignStmt(tl,el,tlleft,tlright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("multi_declaration_assign_stmt",19, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // fullBracketAss ::= IDENTIFIER fullBracketPlus 
            {
                ArrAccessDecl RESULT = null;
                int idleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int idright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                String id = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<String> value();
                int fbpleft = CUP$EtiParser$stack.peek().left;
                int fbpright = CUP$EtiParser$stack.peek().right;
                ArrayList<Expr> fbp = CUP$EtiParser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new ArrAccessDecl(new Id(id,idleft,idright), fbp,idleft,idright ); 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("fullBracketAss",26, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // type_list ::= UNDERSCORE COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int uleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int uright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Object u = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Object> value();
                int i2left = CUP$EtiParser$stack.peek().left;
                int i2right = CUP$EtiParser$stack.peek().right;
                String i2 = CUP$EtiParser$stack.peek().<String> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new UnderScore(uleft,uright));
        temp.add(new NoTypeDecl(new Id(i2,i2left,i2right),i2left,i2right));
        RESULT = temp;
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // type_list ::= IDENTIFIER COLON emptyBracketType COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).left;
                int i1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).right;
                String i1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).<String> value();
                int t1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int t1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Type t1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Type> value();
                int uleft = CUP$EtiParser$stack.peek().left;
                int uright = CUP$EtiParser$stack.peek().right;
                Object u = CUP$EtiParser$stack.peek().<Object> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new AnnotatedTypeDecl(new Id(i1,i1left,i1right),t1,i1left,i1right));
        temp.add(new UnderScore(uleft,uright));
        RESULT = temp;
            
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // type_list ::= UNDERSCORE COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int uleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).left;
                int uright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).right;
                Object u = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).<Object> value();
                int i2left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int i2right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                String i2 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<String> value();
                int t2left = CUP$EtiParser$stack.peek().left;
                int t2right = CUP$EtiParser$stack.peek().right;
                Type t2 = CUP$EtiParser$stack.peek().<Type> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new UnderScore(uleft,uright));
        temp.add(new AnnotatedTypeDecl(new Id(i2,i2left,i2right),t2,i2left,i2right));
        RESULT = temp;
                
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // type_list ::= IDENTIFIER COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int i1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                String i1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<String> value();
                int uleft = CUP$EtiParser$stack.peek().left;
                int uright = CUP$EtiParser$stack.peek().right;
                Object u = CUP$EtiParser$stack.peek().<Object> value();
                
            ArrayList<Decl> temp = new ArrayList<Decl>();
            temp.add(new NoTypeDecl(new Id(i1,i1left,i1right),i1left, i1right));
            temp.add(new UnderScore(uleft,uright));
            RESULT = temp;
            
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // type_list ::= UNDERSCORE COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int u1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int u1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Object u1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Object> value();
                int u2left = CUP$EtiParser$stack.peek().left;
                int u2right = CUP$EtiParser$stack.peek().right;
                Object u2 = CUP$EtiParser$stack.peek().<Object> value();
                
            ArrayList<Decl> temp = new ArrayList<Decl>();
            temp.add(new UnderScore(u1left,u1right));
            temp.add(new UnderScore(u2left,u2right));
            RESULT = temp;
            
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // type_list ::= IDENTIFIER COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int i1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                String i1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<String> value();
                int i2left = CUP$EtiParser$stack.peek().left;
                int i2right = CUP$EtiParser$stack.peek().right;
                String i2 = CUP$EtiParser$stack.peek().<String> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new NoTypeDecl(new Id(i1,i1left,i1right),i1left, i1right));
        temp.add(new NoTypeDecl(new Id(i2,i2left,i2right), i2left, i2right));
        RESULT = temp;
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // type_list ::= IDENTIFIER COLON emptyBracketType COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).left;
                int i1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).right;
                String i1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).<String> value();
                int t1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int t1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Type t1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Type> value();
                int i2left = CUP$EtiParser$stack.peek().left;
                int i2right = CUP$EtiParser$stack.peek().right;
                String i2 = CUP$EtiParser$stack.peek().<String> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new AnnotatedTypeDecl(new Id(i1,i1left,i1right),t1,i1left,i1right));
        temp.add(new NoTypeDecl(new Id(i2,i2left,i2right), i2left, i2right));
        RESULT = temp;
            
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // type_list ::= IDENTIFIER COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).left;
                int i1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).right;
                String i1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).<String> value();
                int i2left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int i2right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                String i2 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<String> value();
                int t2left = CUP$EtiParser$stack.peek().left;
                int t2right = CUP$EtiParser$stack.peek().right;
                Type t2 = CUP$EtiParser$stack.peek().<Type> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new NoTypeDecl(new Id(i1,i1left,i1right), i1left, i1right));
        temp.add(new AnnotatedTypeDecl(new Id(i2,i2left,i2right),t2, i2left, i2right));
        RESULT = temp;
                
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // type_list ::= IDENTIFIER COLON emptyBracketType COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-6).left;
                int i1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-6).right;
                String i1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-6).<String> value();
                int t1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).left;
                int t1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).right;
                Type t1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).<Type> value();
                int i2left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int i2right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                String i2 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<String> value();
                int t2left = CUP$EtiParser$stack.peek().left;
                int t2right = CUP$EtiParser$stack.peek().right;
                Type t2 = CUP$EtiParser$stack.peek().<Type> value();
                
            ArrayList<Decl> temp = new ArrayList<Decl>();
            temp.add(new AnnotatedTypeDecl(new Id(i1,i1left,i1right),t1, i1left, i1right));
            temp.add(new AnnotatedTypeDecl(new Id(i2,i2left,i2right),t2, i2left, i2right));
            RESULT = temp;
            
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-6), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // type_list ::= type_list COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int tlleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).left;
                int tlright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).right;
                ArrayList<Decl> tl = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).<ArrayList<Decl>> value();
                int ileft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int iright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                String i = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<String> value();
                int tleft = CUP$EtiParser$stack.peek().left;
                int tright = CUP$EtiParser$stack.peek().right;
                Type t = CUP$EtiParser$stack.peek().<Type> value();
                
        tl.add(new AnnotatedTypeDecl(new Id(i,ileft,iright), t, ileft, iright));
        RESULT = tl;
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // type_list ::= type_list COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int tlleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int tlright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrayList<Decl> tl = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrayList<Decl>> value();
                int ileft = CUP$EtiParser$stack.peek().left;
                int iright = CUP$EtiParser$stack.peek().right;
                String i = CUP$EtiParser$stack.peek().<String> value();
                
        tl.add(new NoTypeDecl(new Id(i,ileft,iright), ileft, iright));
        RESULT = tl;
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // type_list ::= type_list COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int tlleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int tlright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrayList<Decl> tl = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrayList<Decl>> value();
                int uleft = CUP$EtiParser$stack.peek().left;
                int uright = CUP$EtiParser$stack.peek().right;
                Object u = CUP$EtiParser$stack.peek().<Object> value();
                
            tl.add(new UnderScore(uleft,uright));
            RESULT = tl;
        
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // type_list ::= fullBracketAss COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int fbleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int fbright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrAccessDecl fb = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrAccessDecl> value();
                int uleft = CUP$EtiParser$stack.peek().left;
                int uright = CUP$EtiParser$stack.peek().right;
                Object u = CUP$EtiParser$stack.peek().<Object> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
                        temp.add(fb);
                        temp.add(new UnderScore(uleft,uright));
                        RESULT = temp; 
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // type_list ::= UNDERSCORE COMMA fullBracketAss 
            {
                ArrayList<Decl> RESULT = null;
                int uleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int uright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Object u = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Object> value();
                int fbleft = CUP$EtiParser$stack.peek().left;
                int fbright = CUP$EtiParser$stack.peek().right;
                ArrAccessDecl fb = CUP$EtiParser$stack.peek().<ArrAccessDecl> value();
                
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(new UnderScore(uleft,uright));
    temp.add(fb);
    RESULT = temp;
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // type_list ::= fullBracketAss COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int fbleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).left;
                int fbright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).right;
                ArrAccessDecl fb = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).<ArrAccessDecl> value();
                int i1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int i1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                String i1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<String> value();
                int t1left = CUP$EtiParser$stack.peek().left;
                int t1right = CUP$EtiParser$stack.peek().right;
                Type t1 = CUP$EtiParser$stack.peek().<Type> value();
                
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(fb);
    temp.add(new AnnotatedTypeDecl(new Id(i1,i1left,i1right),t1,i1left, i1right));
    RESULT = temp;
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // type_list ::= IDENTIFIER COLON emptyBracketType COMMA fullBracketAss 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).left;
                int i1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).right;
                String i1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).<String> value();
                int t1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int t1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Type t1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Type> value();
                int fbleft = CUP$EtiParser$stack.peek().left;
                int fbright = CUP$EtiParser$stack.peek().right;
                ArrAccessDecl fb = CUP$EtiParser$stack.peek().<ArrAccessDecl> value();
                
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(new AnnotatedTypeDecl(new Id(i1,i1left,i1right),t1, i1left, i1right));
    temp.add(fb);
    RESULT = temp;
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // type_list ::= fullBracketAss COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int fbleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int fbright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrAccessDecl fb = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrAccessDecl> value();
                int i1left = CUP$EtiParser$stack.peek().left;
                int i1right = CUP$EtiParser$stack.peek().right;
                String i1 = CUP$EtiParser$stack.peek().<String> value();
                
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(fb);
    temp.add(new NoTypeDecl(new Id(i1,i1left,i1right), i1left, i1right));
    RESULT = temp;
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // type_list ::= IDENTIFIER COMMA fullBracketAss 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int i1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                String i1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<String> value();
                int fbleft = CUP$EtiParser$stack.peek().left;
                int fbright = CUP$EtiParser$stack.peek().right;
                ArrAccessDecl fb = CUP$EtiParser$stack.peek().<ArrAccessDecl> value();
                
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(new NoTypeDecl(new Id(i1,i1left,i1right), i1left, i1right));
    temp.add(fb);
    RESULT = temp;
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // type_list ::= fullBracketAss COMMA fullBracketAss 
            {
                ArrayList<Decl> RESULT = null;
                int fb1left = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int fb1right = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrAccessDecl fb1 = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrAccessDecl> value();
                int fb2left = CUP$EtiParser$stack.peek().left;
                int fb2right = CUP$EtiParser$stack.peek().right;
                ArrAccessDecl fb2 = CUP$EtiParser$stack.peek().<ArrAccessDecl> value();
                
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(fb1);
    temp.add(fb2);
    RESULT = temp;
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // type_list ::= type_list COMMA fullBracketAss 
            {
                ArrayList<Decl> RESULT = null;
                int tlleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int tlright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrayList<Decl> tl = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrayList<Decl>> value();
                int fbleft = CUP$EtiParser$stack.peek().left;
                int fbright = CUP$EtiParser$stack.peek().right;
                ArrAccessDecl fb = CUP$EtiParser$stack.peek().<ArrAccessDecl> value();
                
    tl.add(fb);
    RESULT = tl;
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("type_list",21, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // declaration_assign_stmt ::= emptyBracketDecl GETS expr 
            {
                Stmt RESULT = null;
                int dleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int dright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                AnnotatedTypeDecl d = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<AnnotatedTypeDecl> value();
                int gleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int gright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Object g = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Object> value();
                int eleft = CUP$EtiParser$stack.peek().left;
                int eright = CUP$EtiParser$stack.peek().right;
                Expr e = CUP$EtiParser$stack.peek().<Expr> value();
                 // ANNOTATED
    if (!d.type.dimensions.allEmpty) {
        throw new Error(gleft + ":" + gright + " array with init len no Val");
    }
    RESULT = new DeclAssignStmt(d,e,gleft,gright);
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",18, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // declaration_assign_stmt ::= emptyBracketDecl 
            {
                Stmt RESULT = null;
                int dleft = CUP$EtiParser$stack.peek().left;
                int dright = CUP$EtiParser$stack.peek().right;
                AnnotatedTypeDecl d = CUP$EtiParser$stack.peek().<AnnotatedTypeDecl> value();
                RESULT = new DeclNoAssignStmt(d,dleft,dright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",18, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // declaration_assign_stmt ::= IDENTIFIER GETS expr 
            {
                Stmt RESULT = null;
                int idleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int idright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                String id = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<String> value();
                int gleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int gright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Object g = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Object> value();
                int eleft = CUP$EtiParser$stack.peek().left;
                int eright = CUP$EtiParser$stack.peek().right;
                Expr e = CUP$EtiParser$stack.peek().<Expr> value();
                
        NoTypeDecl tempDec = new NoTypeDecl(new Id(id,idleft,idright),idleft,idright);
        RESULT = new DeclAssignStmt(tempDec,e,gleft,gright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",18, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // declaration_assign_stmt ::= UNDERSCORE GETS expr 
            {
                Stmt RESULT = null;
                int uleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int uright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Object u = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Object> value();
                int gleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int gright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Object g = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Object> value();
                int eleft = CUP$EtiParser$stack.peek().left;
                int eright = CUP$EtiParser$stack.peek().right;
                Expr e = CUP$EtiParser$stack.peek().<Expr> value();
                
        UnderScore tempUnder = new UnderScore(uleft,uright);
        RESULT = new DeclAssignStmt(tempUnder,e,gleft,gright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",18, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // declaration_assign_stmt ::= fullBracketType GETS expr 
            {
                Stmt RESULT = null;
                int dleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int dright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrAccessDecl d = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrAccessDecl> value();
                int eleft = CUP$EtiParser$stack.peek().left;
                int eright = CUP$EtiParser$stack.peek().right;
                Expr e = CUP$EtiParser$stack.peek().<Expr> value();
                
    RESULT = new DeclAssignStmt(d,e,dleft,dright);
    
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",18, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // block ::= OPEN_BRACE statement_star CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int ssright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                ArrayList<Stmt> ss = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<ArrayList<Stmt>> value();
                RESULT = new Block(ss,ssleft,ssright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("block",14, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // block ::= OPEN_BRACE statement_star SEMICOLON CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int ssright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrayList<Stmt> ss = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrayList<Stmt>> value();
                RESULT = new Block(ss,ssleft,ssright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("block",14, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // block ::= OPEN_BRACE statement_star SEMICOLON return CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).left;
                int ssright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).right;
                ArrayList<Stmt> ss = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).<ArrayList<Stmt>> value();
                int rleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int rright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Return r = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Return> value();
                ss.add(r); RESULT = new Block(ss,ssleft,ssright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("block",14, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // block ::= OPEN_BRACE statement_star return SEMICOLON CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).left;
                int ssright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).right;
                ArrayList<Stmt> ss = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3).<ArrayList<Stmt>> value();
                int rleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int rright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Return r = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Return> value();
                ss.add(r); RESULT = new Block(ss,ssleft,ssright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("block",14, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // block ::= OPEN_BRACE statement_star return CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int ssright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrayList<Stmt> ss = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrayList<Stmt>> value();
                int rleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int rright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Return r = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Return> value();
                ss.add(r); RESULT = new Block(ss,ssleft,ssright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("block",14, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-3), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 111: // block ::= OPEN_BRACE statement_star SEMICOLON return SEMICOLON CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).left;
                int ssright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).right;
                ArrayList<Stmt> ss = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-4).<ArrayList<Stmt>> value();
                int rleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int rright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                Return r = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<Return> value();
                ss.add(r); RESULT = new Block(ss,ssleft,ssright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("block",14, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-5), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 112: // statement_star ::= statement_star stmt 
            {
                ArrayList<Stmt> RESULT = null;
                int ssleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int ssright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                ArrayList<Stmt> ss = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<ArrayList<Stmt>> value();
                int sleft = CUP$EtiParser$stack.peek().left;
                int sright = CUP$EtiParser$stack.peek().right;
                Stmt s = CUP$EtiParser$stack.peek().<Stmt> value();
                 ss.add(s); RESULT = ss;
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("statement_star",17, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 113: // statement_star ::= statement_star SEMICOLON stmt 
            {
                ArrayList<Stmt> RESULT = null;
                int ssleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).left;
                int ssright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).right;
                ArrayList<Stmt> ss = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2).<ArrayList<Stmt>> value();
                int sleft = CUP$EtiParser$stack.peek().left;
                int sright = CUP$EtiParser$stack.peek().right;
                Stmt s = CUP$EtiParser$stack.peek().<Stmt> value();
                 ss.add(s); RESULT = ss;
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("statement_star",17, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-2), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 114: // statement_star ::= 
            {
                ArrayList<Stmt> RESULT = null;
                RESULT = new ArrayList<Stmt>();
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("statement_star",17, CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 115: // return ::= RETURN exprList 
            {
                Return RESULT = null;
                int rleft = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).left;
                int rright = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).right;
                Object r = CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1).<Object> value();
                int elleft = CUP$EtiParser$stack.peek().left;
                int elright = CUP$EtiParser$stack.peek().right;
                ArrayList<Expr> el = CUP$EtiParser$stack.peek().<ArrayList<Expr>> value();
                RESULT = new Return(el,rleft,rright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("return",20, CUP$EtiParser$stack.elementAt(CUP$EtiParser$top-1), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 116: // return ::= RETURN 
            {
                Return RESULT = null;
                int rleft = CUP$EtiParser$stack.peek().left;
                int rright = CUP$EtiParser$stack.peek().right;
                Object r = CUP$EtiParser$stack.peek().<Object> value();
                RESULT = new Return(new ArrayList<Expr>(),rleft,rright);
                CUP$EtiParser$result = parser.getSymbolFactory().newSymbol("return",20, CUP$EtiParser$stack.peek(), CUP$EtiParser$stack.peek(), RESULT);
            }
            return CUP$EtiParser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$EtiParser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$EtiParser$do_action(
            int                        CUP$EtiParser$act_num,
            java_cup.runtime.lr_parser CUP$EtiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$EtiParser$stack,
            int                        CUP$EtiParser$top)
            throws java.lang.Exception {
            return CUP$EtiParser$do_action_part00000000(
                           CUP$EtiParser$act_num,
                           CUP$EtiParser$parser,
                           CUP$EtiParser$stack,
                           CUP$EtiParser$top);
    }
}

}
