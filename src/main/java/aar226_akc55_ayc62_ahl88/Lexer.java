/* The following code was generated by JFlex 1.6.1 */


package aar226_akc55_ayc62_ahl88;


import aar226_akc55_ayc62_ahl88.Errors.LexicalError;import java_cup.runtime.*;
import org.apache.commons.text.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/student/eth/../shared/src/main/java/aar226_akc55_ayc62_ahl88/parseLex.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CHARACTER = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\70\1\71\1\1\22\0\1\3\1\43\1\65"+
    "\2\0\1\46\1\52\1\7\1\57\1\60\1\44\1\47\1\56\1\42"+
    "\1\0\1\22\1\10\1\5\1\30\1\31\1\36\1\35\1\33\1\32"+
    "\1\34\1\27\1\54\1\55\1\50\1\51\1\45\2\0\6\11\24\4"+
    "\1\61\1\66\1\62\1\0\1\6\1\0\1\17\1\25\2\11\1\15"+
    "\1\16\1\41\1\40\1\23\2\4\1\20\1\4\1\24\1\26\2\4"+
    "\1\13\1\21\1\12\1\14\1\4\1\37\1\67\2\4\1\63\1\53"+
    "\1\64\7\0\1\70\u1fa2\0\1\70\1\70\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\4"+
    "\6\3\1\7\2\3\1\4\1\3\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\4\34\1\35\2\36\1\37\1\40\1\35\6\3"+
    "\1\41\1\42\2\3\1\4\1\3\1\43\1\0\1\44"+
    "\1\45\1\46\1\47\1\50\7\0\1\51\1\52\1\53"+
    "\1\54\1\55\1\51\2\3\1\56\3\3\2\41\1\57"+
    "\1\3\1\4\1\3\1\60\1\61\1\62\1\63\1\64"+
    "\2\0\1\65\1\3\1\66\1\3\1\67\1\4\1\3"+
    "\2\0\2\3\1\4\1\70\3\0\1\71\1\72\1\73"+
    "\1\4\1\0\1\74\1\0\1\4\2\0\1\4\2\0"+
    "\1\4\2\0\11\4\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\256\0\u0122\0\u015c"+
    "\0\256\0\256\0\256\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e"+
    "\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\256\0\u0414"+
    "\0\u044e\0\u0488\0\256\0\256\0\u04c2\0\u04fc\0\256\0\256"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\256\0\u0536\0\256\0\u0570\0\u05aa\0\256\0\u05e4"+
    "\0\256\0\256\0\256\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"+
    "\0\u0740\0\u077a\0\u07b4\0\u0122\0\u07ee\0\u0828\0\u0862\0\u089c"+
    "\0\256\0\u08d6\0\256\0\256\0\256\0\256\0\256\0\u0910"+
    "\0\u094a\0\u0984\0\u09be\0\u0570\0\u09f8\0\u0a32\0\256\0\256"+
    "\0\256\0\256\0\256\0\u0a6c\0\u0aa6\0\u0ae0\0\u0122\0\u0b1a"+
    "\0\u0b54\0\u0b8e\0\u0bc8\0\256\0\u0122\0\u0c02\0\u0c3c\0\u0c76"+
    "\0\256\0\256\0\256\0\256\0\256\0\u0cb0\0\u0cea\0\u0122"+
    "\0\u0d24\0\u0122\0\u0d5e\0\u0122\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46"+
    "\0\u0e80\0\u0eba\0\u0ef4\0\u0122\0\u0f2e\0\u0f68\0\u0fa2\0\256"+
    "\0\u0122\0\u0122\0\u0fdc\0\u1016\0\256\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464"+
    "\0\u015c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\7\1\14\1\15\1\16\1\17\1\20\1\7\1\21"+
    "\1\7\1\22\1\23\1\7\1\24\1\7\1\25\7\10"+
    "\1\26\2\7\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\4\1\7"+
    "\1\4\1\6\1\53\2\54\4\53\1\54\55\53\1\55"+
    "\1\56\3\53\1\57\1\60\1\61\4\57\1\62\55\57"+
    "\1\63\1\64\3\57\74\0\1\6\73\0\16\7\1\0"+
    "\17\7\25\0\1\7\7\0\1\10\2\0\1\10\16\0"+
    "\10\10\37\0\7\7\1\65\6\7\1\0\17\7\25\0"+
    "\1\7\6\0\11\7\1\66\4\7\1\0\17\7\25\0"+
    "\1\7\6\0\15\7\1\67\1\0\17\7\25\0\1\7"+
    "\6\0\14\7\1\70\1\7\1\0\17\7\25\0\1\7"+
    "\6\0\13\7\1\71\2\7\1\0\17\7\25\0\1\7"+
    "\6\0\11\7\1\72\4\7\1\0\17\7\25\0\1\7"+
    "\24\0\1\73\53\0\12\7\1\74\3\7\1\0\1\7"+
    "\1\75\15\7\25\0\1\7\6\0\16\7\1\0\3\7"+
    "\1\76\13\7\25\0\1\7\7\0\1\10\2\0\1\10"+
    "\16\0\1\10\1\77\6\10\37\0\16\7\1\0\15\7"+
    "\1\100\1\7\25\0\1\7\53\0\1\101\65\0\1\102"+
    "\75\0\1\103\71\0\1\104\71\0\1\105\27\0\1\106"+
    "\71\0\1\107\62\0\1\110\2\0\4\110\1\111\2\110"+
    "\1\112\11\110\1\113\40\110\1\114\1\115\1\116\4\0"+
    "\1\61\67\0\1\117\2\0\4\117\1\62\2\117\1\120"+
    "\11\117\1\121\40\117\1\122\1\123\1\124\6\0\10\7"+
    "\1\125\5\7\1\0\17\7\25\0\1\7\6\0\6\7"+
    "\1\126\7\7\1\0\17\7\25\0\1\7\6\0\11\7"+
    "\1\127\4\7\1\0\17\7\25\0\1\7\6\0\15\7"+
    "\1\130\1\0\17\7\25\0\1\7\6\0\14\7\1\131"+
    "\1\7\1\0\17\7\25\0\1\7\6\0\16\7\1\0"+
    "\1\7\1\132\15\7\25\0\1\7\2\0\1\73\1\133"+
    "\1\134\67\73\4\0\6\7\1\135\7\7\1\0\17\7"+
    "\25\0\1\7\6\0\16\7\1\0\3\7\1\136\13\7"+
    "\25\0\1\7\7\0\1\10\2\0\1\10\16\0\1\10"+
    "\1\137\6\10\37\0\16\7\1\0\1\140\16\7\25\0"+
    "\1\7\47\0\1\141\33\0\1\117\71\0\1\142\71\0"+
    "\1\143\71\0\1\144\71\0\1\145\71\0\1\117\53\0"+
    "\1\146\71\0\1\147\12\0\11\7\1\150\4\7\1\0"+
    "\17\7\25\0\1\7\6\0\10\7\1\151\5\7\1\0"+
    "\17\7\25\0\1\7\6\0\11\7\1\152\4\7\1\0"+
    "\17\7\25\0\1\7\6\0\15\7\1\125\1\0\17\7"+
    "\25\0\1\7\6\0\16\7\1\0\16\7\1\153\25\0"+
    "\1\7\4\0\1\134\73\0\14\7\1\154\1\7\1\0"+
    "\17\7\25\0\1\7\7\0\1\10\2\0\1\10\16\0"+
    "\2\10\1\155\5\10\37\0\14\7\1\156\1\7\1\0"+
    "\17\7\25\0\1\7\7\0\1\157\2\0\2\157\3\0"+
    "\3\157\5\0\1\157\1\0\10\157\40\0\1\160\2\0"+
    "\2\160\3\0\3\160\5\0\1\160\1\0\10\160\37\0"+
    "\7\7\1\161\6\7\1\0\17\7\25\0\1\7\6\0"+
    "\6\7\1\162\7\7\1\0\17\7\25\0\1\7\7\0"+
    "\1\10\2\0\1\10\16\0\2\10\1\163\5\10\37\0"+
    "\11\7\1\164\4\7\1\0\17\7\25\0\1\7\7\0"+
    "\1\165\2\0\2\165\3\0\3\165\5\0\1\165\1\0"+
    "\10\165\25\0\1\166\12\0\1\167\2\0\2\167\3\0"+
    "\3\167\5\0\1\167\1\0\10\167\25\0\1\170\11\0"+
    "\16\7\1\0\1\7\1\171\15\7\25\0\1\7\6\0"+
    "\16\7\1\0\15\7\1\172\1\7\25\0\1\7\7\0"+
    "\1\10\2\0\1\10\16\0\3\10\1\173\4\10\40\0"+
    "\1\174\2\0\2\174\3\0\3\174\5\0\1\174\1\0"+
    "\10\174\25\0\1\166\14\0\1\175\67\0\1\176\2\0"+
    "\2\176\3\0\3\176\5\0\1\176\1\0\10\176\25\0"+
    "\1\170\12\0\1\10\2\0\1\10\16\0\1\10\1\177"+
    "\6\10\40\0\1\200\2\0\2\200\3\0\3\200\5\0"+
    "\1\200\1\0\10\200\25\0\1\166\12\0\1\201\2\0"+
    "\2\201\3\0\3\201\5\0\1\201\1\0\10\201\25\0"+
    "\1\170\12\0\1\10\2\0\1\202\16\0\10\10\40\0"+
    "\1\203\2\0\2\203\3\0\3\203\5\0\1\203\1\0"+
    "\10\203\25\0\1\166\12\0\1\204\2\0\2\204\3\0"+
    "\3\204\5\0\1\204\1\0\10\204\25\0\1\170\12\0"+
    "\1\10\2\0\1\10\16\0\2\10\1\205\5\10\40\0"+
    "\1\206\2\0\2\206\3\0\3\206\5\0\1\206\1\0"+
    "\10\206\25\0\1\166\12\0\1\207\2\0\2\207\3\0"+
    "\3\207\5\0\1\207\1\0\10\207\25\0\1\170\12\0"+
    "\1\10\2\0\1\10\16\0\4\10\1\210\3\10\117\0"+
    "\1\166\71\0\1\170\12\0\1\10\2\0\1\10\16\0"+
    "\5\10\1\211\2\10\40\0\1\10\2\0\1\10\16\0"+
    "\6\10\1\212\1\10\40\0\1\10\2\0\1\10\16\0"+
    "\7\10\1\213\40\0\1\10\2\0\1\10\16\0\3\10"+
    "\1\214\4\10\40\0\1\10\2\0\1\10\16\0\3\10"+
    "\1\215\4\10\40\0\1\10\2\0\1\10\16\0\6\10"+
    "\1\216\1\10\40\0\1\10\2\0\1\10\16\0\5\10"+
    "\1\217\2\10\40\0\1\10\2\0\1\220\16\0\10\10"+
    "\40\0\1\10\2\0\1\10\16\0\5\10\1\221\2\10"+
    "\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5278];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\3\11\13\1\1\11"+
    "\3\1\2\11\2\1\14\11\1\1\1\11\2\1\1\11"+
    "\1\1\3\11\15\1\1\11\1\0\5\11\7\0\5\11"+
    "\10\1\1\11\4\1\5\11\2\0\7\1\2\0\4\1"+
    "\3\0\1\11\3\1\1\0\1\11\1\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuilder sb = new StringBuilder();
    int globalLineNum = 0;
    int globalColNum = 0;
    boolean inString = false;

    private Symbol symbol(int type) {
        return new Symbol(type, lineNumber(), column(),yytext());
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, lineNumber(), column(), value);
    }
    private Symbol symbol(int type, int line, int col, Object value) {
        return new Symbol(type, line, col, value);
    }
    // stack overflow example
    private static final char[] HEX_ARRAY = "0123456789ABCDEF".toCharArray();
    public static String bytesToHex(byte[] bytes) {
        char[] hexChars = new char[bytes.length * 2];
        for (int j = 0; j < bytes.length; j++) {
            int v = bytes[j] & 0xFF;
            hexChars[j * 2] = HEX_ARRAY[v >>> 4];
            hexChars[j * 2 + 1] = HEX_ARRAY[v & 0x0F];
        }
        return new String(hexChars);
    }

    public static boolean isEscape( int ch, boolean isChar){
        if (ch == 34){
            if (isChar){
                return false;
            }
            return true;
        }
        if (ch == 92 || ch == 10 || ch == 39 ||
        ch == 9 || ch == 8 || ch == 82 || ch == 12){
            return true;
        }
        return false;
    }

    public int lineNumber() { return yyline + 1; }
    public int column() { return yycolumn + 1; }

    public Symbol outputChar(int ch){
        if (ch > 0x10FFFF || ch < 0x0){
            throw new LexicalError(lineNumber()
                  ,column(),"Invalid Unicode Character ");
        } else if (isEscape(ch,true)){
            return symbol(sym.CHARACTER_LITERAL,globalLineNum,globalColNum,
            StringEscapeUtils.escapeJava(new String(Character.toChars(ch))));
        }else if (ch >= 0x20 && ch <= 0x7E){
            return symbol(sym.CHARACTER_LITERAL, globalLineNum,globalColNum, new String(Character.toChars(ch)));
        }else{
            return symbol(sym.CHARACTER_LITERAL,globalLineNum,globalColNum,"\\x{"+Integer.toHexString(ch)+ "}");
        }
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                if (inString){
            throw new LexicalError(globalLineNum,globalColNum,"Unterminated string");
            }
            return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new LexicalError(lineNumber(),column() ,
      "Illegal character <"+yytext()+">");
            }
          case 62: break;
          case 2: 
            { /* ignoring whitespace */
            }
          case 63: break;
          case 3: 
            { globalLineNum = lineNumber();
                    globalColNum = column();
                    return symbol(sym.IDENTIFIER,globalLineNum, globalColNum,yytext());
            }
          case 64: break;
          case 4: 
            { try{
              return symbol(sym.INTEGER_LITERAL, Long.parseLong("-" + yytext()));
          }catch(Exception e){
              throw new LexicalError(lineNumber()
              ,column() ,"invalid Integer");
          }
            }
          case 65: break;
          case 5: 
            { return symbol(sym.UNDERSCORE);
            }
          case 66: break;
          case 6: 
            { globalLineNum = lineNumber();
                globalColNum = column();
                yybegin(CHARACTER);
            }
          case 67: break;
          case 7: 
            { return symbol(sym.DIVIDE);
            }
          case 68: break;
          case 8: 
            { return symbol(sym.MINUS);
            }
          case 69: break;
          case 9: 
            { return symbol(sym.NOT);
            }
          case 70: break;
          case 10: 
            { return symbol(sym.TIMES);
            }
          case 71: break;
          case 11: 
            { return symbol(sym.GT);
            }
          case 72: break;
          case 12: 
            { return symbol(sym.MODULO);
            }
          case 73: break;
          case 13: 
            { return symbol(sym.PLUS);
            }
          case 74: break;
          case 14: 
            { return symbol(sym.LT);
            }
          case 75: break;
          case 15: 
            { return symbol(sym.GETS);
            }
          case 76: break;
          case 16: 
            { return symbol(sym.AND);
            }
          case 77: break;
          case 17: 
            { return symbol(sym.OR);
            }
          case 78: break;
          case 18: 
            { return symbol(sym.COLON);
            }
          case 79: break;
          case 19: 
            { return symbol(sym.SEMICOLON);
            }
          case 80: break;
          case 20: 
            { return symbol(sym.COMMA);
            }
          case 81: break;
          case 21: 
            { return symbol(sym.OPEN_PAREN);
            }
          case 82: break;
          case 22: 
            { return symbol(sym.CLOSE_PAREN);
            }
          case 83: break;
          case 23: 
            { return symbol(sym.OPEN_BRACKET);
            }
          case 84: break;
          case 24: 
            { return symbol(sym.CLOSE_BRACKET);
            }
          case 85: break;
          case 25: 
            { return symbol(sym.OPEN_BRACE);
            }
          case 86: break;
          case 26: 
            { return symbol(sym.CLOSE_BRACE);
            }
          case 87: break;
          case 27: 
            { globalLineNum = lineNumber();
                globalColNum = column();
                inString = true;
                sb.setLength(0);
                yybegin(STRING);
            }
          case 88: break;
          case 28: 
            { yybegin(YYINITIAL);
          throw new LexicalError(globalLineNum,globalColNum,"Invalid character constant " + yytext());
            }
          case 89: break;
          case 29: 
            { byte[] bytearr = yytext().getBytes("UTF-32");
        int ch = Integer.parseInt(String.valueOf(bytesToHex(bytearr)),16);
        if (ch > 0x10FFFF || ch < 0x0){
            throw new LexicalError(lineNumber(),column(),"Invalid Unicode Character ");
        }else if (isEscape(ch,false)){
            sb.append("\\x{"+Integer.toHexString(ch)+ "}");
        }else if (ch >= 0x20 && ch <= 0x7E){
           sb.append(new String(Character.toChars(ch)));
        }else{
           sb.append("\\x{"+Integer.toHexString(ch)+ "}");
        }
            }
          case 90: break;
          case 30: 
            { yybegin(YYINITIAL);
          throw new LexicalError(globalLineNum ,globalColNum ,"Unterminated string");
            }
          case 91: break;
          case 31: 
            { sb.append("\\" + StringEscapeUtils.escapeJava("'"));
            }
          case 92: break;
          case 32: 
            { yybegin(YYINITIAL);
          String s = sb.toString();
          inString = false;
          return symbol(sym.STRING_LITERAL,globalLineNum, globalColNum, s);
            }
          case 93: break;
          case 33: 
            { /* ignoring comment */
            }
          case 94: break;
          case 34: 
            { return symbol(sym.IF);
            }
          case 95: break;
          case 35: 
            { return symbol(sym.NOT_EQUAL);
            }
          case 96: break;
          case 36: 
            { return symbol(sym.GEQ);
            }
          case 97: break;
          case 37: 
            { return symbol(sym.LEQ);
            }
          case 98: break;
          case 38: 
            { return symbol(sym.EQUAL);
            }
          case 99: break;
          case 39: 
            { yybegin(YYINITIAL);
        byte[] bytearr = yytext().substring(0,yytext().length()-1).getBytes("UTF-32");
        int ch = Integer.parseInt(String.valueOf(bytesToHex(bytearr)),16);
        return outputChar(ch);
            }
          case 100: break;
          case 40: 
            { yybegin(YYINITIAL);
          return symbol(sym.CHARACTER_LITERAL, StringEscapeUtils.escapeJava("\""));
            }
          case 101: break;
          case 41: 
            { yybegin(YYINITIAL);
                        throw new LexicalError(globalLineNum,globalColNum,"invalid escape character " + yytext());
            }
          case 102: break;
          case 42: 
            { sb.append(StringEscapeUtils.escapeJava("\t"));
            }
          case 103: break;
          case 43: 
            { sb.append(StringEscapeUtils.escapeJava("\n"));
            }
          case 104: break;
          case 44: 
            { sb.append("\"");
            }
          case 105: break;
          case 45: 
            { sb.append(StringEscapeUtils.escapeJava("\\"));
            }
          case 106: break;
          case 46: 
            { return symbol(sym.USE);
            }
          case 107: break;
          case 47: 
            { return symbol(sym.INT);
            }
          case 108: break;
          case 48: 
            { return symbol(sym.HI_MULT);
            }
          case 109: break;
          case 49: 
            { yybegin(YYINITIAL);
             return symbol(sym.CHARACTER_LITERAL, StringEscapeUtils.escapeJava("'"));
            }
          case 110: break;
          case 50: 
            { yybegin(YYINITIAL);
              return symbol(sym.CHARACTER_LITERAL, StringEscapeUtils.escapeJava("\t"));
            }
          case 111: break;
          case 51: 
            { yybegin(YYINITIAL);
          return symbol(sym.CHARACTER_LITERAL, StringEscapeUtils.escapeJava("\n"));
            }
          case 112: break;
          case 52: 
            { yybegin(YYINITIAL);
              return symbol(sym.CHARACTER_LITERAL, StringEscapeUtils.escapeJava("\\"));
            }
          case 113: break;
          case 53: 
            { return symbol(sym.BOOL_LITERAL, Boolean.parseBoolean(yytext()));
            }
          case 114: break;
          case 54: 
            { return symbol(sym.ELSE);
            }
          case 115: break;
          case 55: 
            { return symbol(sym.BOOL);
            }
          case 116: break;
          case 56: 
            { return symbol(sym.WHILE);
            }
          case 117: break;
          case 57: 
            { int ch = Integer.parseInt(yytext().substring(3, yytext().length() - 1), 16);
                                 if (ch > 0x10FFFF || ch < 0x0){
                                     throw new LexicalError(lineNumber(),column() ,"Invalid Unicode Character ");
                                 }else if (isEscape(ch,false)){
                                    sb.append(StringEscapeUtils.escapeJava(new String(Character.toChars(ch))));
                                 }else if (ch >= 0x20 && ch <= 0x7E){
                                    sb.append(Character.toChars(ch));
                                 }else{
                                    sb.append("\\x{"+Integer.toHexString(ch)+ "}");
                                 }
            }
          case 118: break;
          case 58: 
            { return symbol(sym.RETURN);
            }
          case 119: break;
          case 59: 
            { return symbol(sym.LENGTH);
            }
          case 120: break;
          case 60: 
            { yybegin(YYINITIAL);
                int ch = Integer.parseInt(yytext().substring(3, yytext().length() - 2), 16);
                return outputChar(ch);
            }
          case 121: break;
          case 61: 
            { return symbol(sym.MAX_NUM);
            }
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
