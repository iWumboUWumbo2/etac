// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: src/main/java/aar226_akc55_ayc62_ahl88/parseLex.flex


package aar226_akc55_ayc62_ahl88;


import aar226_akc55_ayc62_ahl88.Errors.LexicalError;import java_cup.runtime.*;
import org.apache.commons.text.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int CHARACTER = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\2\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\0\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\2\0\6\41\24\42"+
    "\1\43\1\44\1\45\1\0\1\46\1\0\1\47\1\50"+
    "\2\41\1\51\1\52\1\53\1\54\1\55\2\42\1\56"+
    "\1\42\1\57\1\60\2\42\1\61\1\62\1\63\1\64"+
    "\1\42\1\65\1\66\2\42\1\67\1\70\1\71\7\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\3\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\11\25\1\31\1\32\1\33\4\34\1\35\2\36"+
    "\1\37\1\40\1\35\1\41\1\0\1\42\1\17\1\43"+
    "\1\44\1\45\3\25\1\46\6\25\1\47\1\50\7\0"+
    "\1\51\1\52\1\53\1\54\1\55\1\51\1\56\2\42"+
    "\1\17\3\25\1\57\3\25\1\60\1\25\1\61\1\62"+
    "\1\63\1\64\2\0\1\17\1\65\1\66\2\25\1\67"+
    "\1\25\2\0\1\17\2\25\1\70\3\0\1\71\1\17"+
    "\1\72\1\73\1\0\1\74\1\0\1\17\2\0\1\17"+
    "\2\0\1\17\2\0\11\17\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\256\0\350\0\u0122\0\256"+
    "\0\256\0\256\0\256\0\256\0\256\0\u015c\0\256\0\256"+
    "\0\256\0\u0196\0\256\0\u01d0\0\u020a\0\256\0\256\0\u0244"+
    "\0\u027e\0\u02b8\0\u02f2\0\256\0\256\0\256\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\256"+
    "\0\256\0\256\0\u0536\0\256\0\u0570\0\u05aa\0\256\0\256"+
    "\0\u05e4\0\256\0\256\0\u061e\0\256\0\u0658\0\u0692\0\u06cc"+
    "\0\256\0\256\0\256\0\u0706\0\u0740\0\u077a\0\u02f2\0\u07b4"+
    "\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\256\0\256\0\u0910"+
    "\0\u0570\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\256\0\256"+
    "\0\256\0\256\0\256\0\u0a6c\0\256\0\256\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u02f2\0\u0bc8\0\u0c02\0\u0c3c\0\u02f2"+
    "\0\u0c76\0\256\0\256\0\256\0\256\0\u0cb0\0\u0cea\0\u0d24"+
    "\0\u02f2\0\u02f2\0\u0d5e\0\u0d98\0\u02f2\0\u0dd2\0\u0e0c\0\u0e46"+
    "\0\u0e80\0\u0eba\0\u0ef4\0\u02f2\0\u0f2e\0\u0f68\0\u0fa2\0\256"+
    "\0\u0fdc\0\u02f2\0\u02f2\0\u1016\0\256\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464"+
    "\0\u01d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\10\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\2\33\1\34\1\4\1\35\1\36\1\33\1\37"+
    "\1\40\1\41\2\33\1\42\1\43\2\33\1\44\1\33"+
    "\1\45\1\46\1\47\1\33\1\50\1\51\1\52\2\53"+
    "\1\54\2\53\1\54\1\53\1\55\2\53\1\54\31\53"+
    "\1\56\25\53\2\57\1\60\2\57\1\61\1\57\1\62"+
    "\2\57\1\63\31\57\1\64\25\57\74\0\1\5\126\0"+
    "\1\65\72\0\1\66\52\0\1\67\72\0\12\24\60\0"+
    "\2\24\1\70\7\24\75\0\1\71\71\0\1\72\71\0"+
    "\1\73\44\0\1\33\7\0\12\33\5\0\2\33\3\0"+
    "\21\33\15\0\1\33\7\0\12\33\5\0\2\33\3\0"+
    "\12\33\1\74\6\33\15\0\1\33\7\0\12\33\5\0"+
    "\2\33\3\0\10\33\1\75\10\33\15\0\1\33\7\0"+
    "\12\33\5\0\2\33\3\0\1\33\1\76\17\33\15\0"+
    "\1\33\7\0\12\33\5\0\2\33\3\0\4\33\1\77"+
    "\4\33\1\100\7\33\15\0\1\33\7\0\12\33\5\0"+
    "\2\33\3\0\3\33\1\101\15\33\15\0\1\33\7\0"+
    "\12\33\5\0\2\33\3\0\3\33\1\102\15\33\15\0"+
    "\1\33\7\0\12\33\5\0\2\33\3\0\13\33\1\103"+
    "\5\33\15\0\1\33\7\0\12\33\5\0\2\33\3\0"+
    "\14\33\1\104\4\33\15\0\1\33\7\0\12\33\5\0"+
    "\2\33\3\0\6\33\1\105\12\33\15\0\1\106\71\0"+
    "\1\107\57\0\2\110\4\0\1\110\1\111\2\110\1\112"+
    "\31\110\1\113\12\110\1\114\3\110\1\115\2\110\1\116"+
    "\3\110\2\0\1\60\67\0\2\117\4\0\1\117\1\120"+
    "\2\117\1\63\31\117\1\121\12\117\1\122\3\117\1\123"+
    "\2\117\1\124\3\117\40\0\1\125\31\0\2\67\1\126"+
    "\2\67\1\127\64\67\22\0\2\24\1\130\7\24\50\0"+
    "\1\33\7\0\12\33\5\0\2\33\3\0\12\33\1\131"+
    "\6\33\15\0\1\33\7\0\12\33\5\0\2\33\3\0"+
    "\14\33\1\132\4\33\15\0\1\33\7\0\12\33\5\0"+
    "\2\33\3\0\10\33\1\133\10\33\15\0\1\33\7\0"+
    "\12\33\5\0\2\33\3\0\15\33\1\134\3\33\15\0"+
    "\1\33\7\0\12\33\5\0\2\33\3\0\11\33\1\135"+
    "\7\33\15\0\1\33\7\0\12\33\5\0\2\33\3\0"+
    "\15\33\1\136\3\33\15\0\1\33\7\0\12\33\5\0"+
    "\2\33\3\0\16\33\1\137\2\33\15\0\1\33\7\0"+
    "\12\33\5\0\2\33\3\0\3\33\1\140\15\33\15\0"+
    "\1\33\7\0\12\33\5\0\2\33\3\0\7\33\1\141"+
    "\11\33\15\0\1\117\71\0\1\142\71\0\1\143\71\0"+
    "\1\144\71\0\1\145\71\0\1\117\54\0\1\146\71\0"+
    "\1\147\4\0\1\126\111\0\3\24\1\150\6\24\50\0"+
    "\1\33\7\0\12\33\5\0\2\33\3\0\10\33\1\151"+
    "\10\33\15\0\1\33\7\0\12\33\5\0\2\33\3\0"+
    "\3\33\1\152\15\33\15\0\1\33\7\0\12\33\5\0"+
    "\2\33\3\0\14\33\1\137\4\33\15\0\1\33\7\0"+
    "\12\33\5\0\2\33\3\0\5\33\1\153\13\33\15\0"+
    "\1\33\7\0\12\33\5\0\2\33\3\0\16\33\1\154"+
    "\2\33\15\0\1\33\7\0\12\33\5\0\2\33\3\0"+
    "\3\33\1\155\15\33\15\0\1\33\7\0\12\33\5\0"+
    "\2\33\3\0\10\33\1\156\10\33\25\0\12\157\5\0"+
    "\1\157\5\0\4\157\41\0\12\160\5\0\1\160\5\0"+
    "\4\160\41\0\3\24\1\161\6\24\50\0\1\33\7\0"+
    "\12\33\5\0\2\33\3\0\15\33\1\162\3\33\15\0"+
    "\1\33\7\0\12\33\5\0\2\33\3\0\13\33\1\163"+
    "\5\33\15\0\1\33\7\0\12\33\5\0\2\33\3\0"+
    "\3\33\1\164\15\33\25\0\12\165\5\0\1\165\5\0"+
    "\4\165\16\0\1\166\22\0\12\167\5\0\1\167\5\0"+
    "\4\167\16\0\1\170\22\0\7\24\1\171\2\24\50\0"+
    "\1\33\7\0\12\33\5\0\2\33\3\0\6\33\1\172"+
    "\12\33\15\0\1\33\7\0\12\33\5\0\2\33\3\0"+
    "\11\33\1\173\7\33\25\0\12\174\5\0\1\174\5\0"+
    "\4\174\16\0\1\166\12\0\1\175\101\0\12\176\5\0"+
    "\1\176\5\0\4\176\16\0\1\170\22\0\2\24\1\177"+
    "\7\24\60\0\12\200\5\0\1\200\5\0\4\200\16\0"+
    "\1\166\22\0\12\201\5\0\1\201\5\0\4\201\16\0"+
    "\1\170\22\0\1\202\11\24\60\0\12\203\5\0\1\203"+
    "\5\0\4\203\16\0\1\166\22\0\12\204\5\0\1\204"+
    "\5\0\4\204\16\0\1\170\22\0\3\24\1\205\6\24"+
    "\60\0\12\206\5\0\1\206\5\0\4\206\16\0\1\166"+
    "\22\0\12\207\5\0\1\207\5\0\4\207\16\0\1\170"+
    "\22\0\6\24\1\210\3\24\127\0\1\166\71\0\1\170"+
    "\22\0\10\24\1\211\1\24\60\0\5\24\1\212\4\24"+
    "\60\0\4\24\1\213\5\24\60\0\7\24\1\214\2\24"+
    "\60\0\7\24\1\215\2\24\60\0\5\24\1\216\4\24"+
    "\60\0\10\24\1\217\1\24\60\0\1\220\11\24\60\0"+
    "\10\24\1\221\1\24\36\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5278];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\6\11\1\1\3\11\1\1\1\11"+
    "\2\1\2\11\4\1\3\11\11\1\3\11\1\1\1\11"+
    "\2\1\2\11\1\1\2\11\1\1\1\11\1\0\2\1"+
    "\3\11\12\1\2\11\7\0\5\11\1\1\2\11\13\1"+
    "\4\11\2\0\7\1\2\0\4\1\3\0\1\11\3\1"+
    "\1\0\1\11\1\0\1\1\2\0\1\1\2\0\1\1"+
    "\2\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder sb = new StringBuilder();
    int globalLineNum = 0;
    int globalColNum = 0;
    boolean inString = false;

    private Symbol symbol(int type) {
        return new Symbol(type, lineNumber(), column(),yytext());
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, lineNumber(), column(), value);
    }
    private Symbol symbol(int type, int line, int col, Object value) {
        return new Symbol(type, line, col, value);
    }
    // stack overflow example
    private static final char[] HEX_ARRAY = "0123456789ABCDEF".toCharArray();
    public static String bytesToHex(byte[] bytes) {
        char[] hexChars = new char[bytes.length * 2];
        for (int j = 0; j < bytes.length; j++) {
            int v = bytes[j] & 0xFF;
            hexChars[j * 2] = HEX_ARRAY[v >>> 4];
            hexChars[j * 2 + 1] = HEX_ARRAY[v & 0x0F];
        }
        return new String(hexChars);
    }

    public static boolean isEscape( int ch, boolean isChar){
        if (ch == 34){
            if (isChar){
                return false;
            }
            return true;
        }
        if (ch == 92 || ch == 10 || ch == 39 ||
        ch == 9 || ch == 8 || ch == 12){
            return true;
        }
        return false;
    }

    public int lineNumber() { return yyline + 1; }
    public int column() { return yycolumn + 1; }

    public Symbol outputChar(int ch){
        if (ch > 0x10FFFF || ch < 0x0){
            throw new LexicalError(lineNumber()
                  ,column(),"Invalid Unicode Character ");
        } else if (isEscape(ch,true)){
            return symbol(sym.CHARACTER_LITERAL,globalLineNum,globalColNum,
            StringEscapeUtils.escapeJava(new String(Character.toChars(ch))));
        }else if (ch >= 0x20 && ch <= 0x7E){
            return symbol(sym.CHARACTER_LITERAL, globalLineNum,globalColNum, new String(Character.toChars(ch)));
        }else{
            return symbol(sym.CHARACTER_LITERAL,globalLineNum,globalColNum,"\\x{"+Integer.toHexString(ch)+ "}");
        }
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                if (inString){
            throw new LexicalError(globalLineNum,globalColNum,"Unterminated string");
            }
            return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new LexicalError(lineNumber(),column() ,
      "Illegal character <"+yytext()+">");
            }
          // fall through
          case 62: break;
          case 2:
            { /* ignoring whitespace */
            }
          // fall through
          case 63: break;
          case 3:
            { return symbol(sym.NOT);
            }
          // fall through
          case 64: break;
          case 4:
            { globalLineNum = lineNumber();
                globalColNum = column();
                inString = true;
                sb.setLength(0);
                yybegin(STRING);
            }
          // fall through
          case 65: break;
          case 5:
            { return symbol(sym.MODULO);
            }
          // fall through
          case 66: break;
          case 6:
            { return symbol(sym.AND);
            }
          // fall through
          case 67: break;
          case 7:
            { globalLineNum = lineNumber();
                globalColNum = column();
                yybegin(CHARACTER);
            }
          // fall through
          case 68: break;
          case 8:
            { return symbol(sym.OPEN_PAREN);
            }
          // fall through
          case 69: break;
          case 9:
            { return symbol(sym.CLOSE_PAREN);
            }
          // fall through
          case 70: break;
          case 10:
            { return symbol(sym.TIMES);
            }
          // fall through
          case 71: break;
          case 11:
            { return symbol(sym.PLUS);
            }
          // fall through
          case 72: break;
          case 12:
            { return symbol(sym.COMMA);
            }
          // fall through
          case 73: break;
          case 13:
            { return symbol(sym.MINUS);
            }
          // fall through
          case 74: break;
          case 14:
            { return symbol(sym.DIVIDE);
            }
          // fall through
          case 75: break;
          case 15:
            { try{
              return symbol(sym.INTEGER_LITERAL, Long.parseLong("-" + yytext()));
          }catch(Exception e){
              throw new LexicalError(lineNumber()
              ,column() ,"invalid Integer");
          }
            }
          // fall through
          case 76: break;
          case 16:
            { return symbol(sym.COLON);
            }
          // fall through
          case 77: break;
          case 17:
            { return symbol(sym.SEMICOLON);
            }
          // fall through
          case 78: break;
          case 18:
            { return symbol(sym.LT);
            }
          // fall through
          case 79: break;
          case 19:
            { return symbol(sym.GETS);
            }
          // fall through
          case 80: break;
          case 20:
            { return symbol(sym.GT);
            }
          // fall through
          case 81: break;
          case 21:
            { globalLineNum = lineNumber();
                    globalColNum = column();
                    return symbol(sym.IDENTIFIER,globalLineNum, globalColNum,yytext());
            }
          // fall through
          case 82: break;
          case 22:
            { return symbol(sym.OPEN_BRACKET);
            }
          // fall through
          case 83: break;
          case 23:
            { return symbol(sym.CLOSE_BRACKET);
            }
          // fall through
          case 84: break;
          case 24:
            { return symbol(sym.UNDERSCORE);
            }
          // fall through
          case 85: break;
          case 25:
            { return symbol(sym.OPEN_BRACE);
            }
          // fall through
          case 86: break;
          case 26:
            { return symbol(sym.OR);
            }
          // fall through
          case 87: break;
          case 27:
            { return symbol(sym.CLOSE_BRACE);
            }
          // fall through
          case 88: break;
          case 28:
            { yybegin(YYINITIAL);
          throw new LexicalError(globalLineNum,globalColNum,"Invalid character constant " + yytext());
            }
          // fall through
          case 89: break;
          case 29:
            { byte[] bytearr = yytext().getBytes("UTF-32");
        int ch = Integer.parseInt(String.valueOf(bytesToHex(bytearr)),16);
        if (ch > 0x10FFFF || ch < 0x0){
            throw new LexicalError(lineNumber(),column(),"Invalid Unicode Character ");
        }else if (isEscape(ch,false)){
            sb.append("\\x{"+Integer.toHexString(ch)+ "}");
        }else if (ch >= 0x20 && ch <= 0x7E){
           sb.append(new String(Character.toChars(ch)));
        }else{
           sb.append("\\x{"+Integer.toHexString(ch)+ "}");
        }
            }
          // fall through
          case 90: break;
          case 30:
            { yybegin(YYINITIAL);
          throw new LexicalError(globalLineNum ,globalColNum ,"Unterminated string");
            }
          // fall through
          case 91: break;
          case 31:
            { yybegin(YYINITIAL);
          String s = sb.toString();
          inString = false;
          return symbol(sym.STRING_LITERAL,globalLineNum, globalColNum, s);
            }
          // fall through
          case 92: break;
          case 32:
            { sb.append("\\" + StringEscapeUtils.escapeJava("'"));
            }
          // fall through
          case 93: break;
          case 33:
            { return symbol(sym.NOT_EQUAL);
            }
          // fall through
          case 94: break;
          case 34:
            { /* ignoring comment */
            }
          // fall through
          case 95: break;
          case 35:
            { return symbol(sym.LEQ);
            }
          // fall through
          case 96: break;
          case 36:
            { return symbol(sym.EQUAL);
            }
          // fall through
          case 97: break;
          case 37:
            { return symbol(sym.GEQ);
            }
          // fall through
          case 98: break;
          case 38:
            { return symbol(sym.IF);
            }
          // fall through
          case 99: break;
          case 39:
            { yybegin(YYINITIAL);
        byte[] bytearr = yytext().substring(0,yytext().length()-1).getBytes("UTF-32");
        int ch = Integer.parseInt(String.valueOf(bytesToHex(bytearr)),16);
        return outputChar(ch);
            }
          // fall through
          case 100: break;
          case 40:
            { yybegin(YYINITIAL);
          return symbol(sym.CHARACTER_LITERAL, StringEscapeUtils.escapeJava("\""));
            }
          // fall through
          case 101: break;
          case 41:
            { yybegin(YYINITIAL);
                        throw new LexicalError(globalLineNum,globalColNum,"invalid escape character " + yytext());
            }
          // fall through
          case 102: break;
          case 42:
            { sb.append("\"");
            }
          // fall through
          case 103: break;
          case 43:
            { sb.append(StringEscapeUtils.escapeJava("\\"));
            }
          // fall through
          case 104: break;
          case 44:
            { sb.append(StringEscapeUtils.escapeJava("\n"));
            }
          // fall through
          case 105: break;
          case 45:
            { sb.append(StringEscapeUtils.escapeJava("\t"));
            }
          // fall through
          case 106: break;
          case 46:
            { return symbol(sym.HI_MULT);
            }
          // fall through
          case 107: break;
          case 47:
            { return symbol(sym.INT);
            }
          // fall through
          case 108: break;
          case 48:
            { return symbol(sym.USE);
            }
          // fall through
          case 109: break;
          case 49:
            { yybegin(YYINITIAL);
             return symbol(sym.CHARACTER_LITERAL, StringEscapeUtils.escapeJava("'"));
            }
          // fall through
          case 110: break;
          case 50:
            { yybegin(YYINITIAL);
              return symbol(sym.CHARACTER_LITERAL, StringEscapeUtils.escapeJava("\\"));
            }
          // fall through
          case 111: break;
          case 51:
            { yybegin(YYINITIAL);
          return symbol(sym.CHARACTER_LITERAL, StringEscapeUtils.escapeJava("\n"));
            }
          // fall through
          case 112: break;
          case 52:
            { yybegin(YYINITIAL);
              return symbol(sym.CHARACTER_LITERAL, StringEscapeUtils.escapeJava("\t"));
            }
          // fall through
          case 113: break;
          case 53:
            { return symbol(sym.BOOL);
            }
          // fall through
          case 114: break;
          case 54:
            { return symbol(sym.ELSE);
            }
          // fall through
          case 115: break;
          case 55:
            { return symbol(sym.BOOL_LITERAL, Boolean.parseBoolean(yytext()));
            }
          // fall through
          case 116: break;
          case 56:
            { return symbol(sym.WHILE);
            }
          // fall through
          case 117: break;
          case 57:
            { int ch = Integer.parseInt(yytext().substring(3, yytext().length() - 1), 16);
                                 if (ch > 0x10FFFF || ch < 0x0){
                                     throw new LexicalError(lineNumber(),column() ,"Invalid Unicode Character ");
                                 }else if (isEscape(ch,false)){
                                    sb.append(StringEscapeUtils.escapeJava(new String(Character.toChars(ch))));
                                 }else if (ch >= 0x20 && ch <= 0x7E){
                                    sb.append(Character.toChars(ch));
                                 }else{
                                    sb.append("\\x{"+Integer.toHexString(ch)+ "}");
                                 }
            }
          // fall through
          case 118: break;
          case 58:
            { return symbol(sym.LENGTH);
            }
          // fall through
          case 119: break;
          case 59:
            { return symbol(sym.RETURN);
            }
          // fall through
          case 120: break;
          case 60:
            { yybegin(YYINITIAL);
                int ch = Integer.parseInt(yytext().substring(3, yytext().length() - 2), 16);
                return outputChar(ch);
            }
          // fall through
          case 121: break;
          case 61:
            { return symbol(sym.MAX_NUM);
            }
          // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
