
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package aar226_akc55_ayc62_ahl88;

import java_cup.runtime.*;
import aar226_akc55_ayc62_ahl88.newast.*;
import aar226_akc55_ayc62_ahl88.newast.definitions.*;
import aar226_akc55_ayc62_ahl88.newast.declarations.*;
import aar226_akc55_ayc62_ahl88.newast.expr.*;
import aar226_akc55_ayc62_ahl88.newast.stmt.*;
import aar226_akc55_ayc62_ahl88.newast.stmt.declstmt.*;
import aar226_akc55_ayc62_ahl88.newast.expr.arrayaccessexpr.*;
import aar226_akc55_ayc62_ahl88.newast.expr.arrayliteral.*;
import aar226_akc55_ayc62_ahl88.newast.expr.binop.*;
import aar226_akc55_ayc62_ahl88.newast.expr.binop.intbop.*;
import aar226_akc55_ayc62_ahl88.newast.expr.binop.boolbop.*;
import aar226_akc55_ayc62_ahl88.newast.expr.unop.*;
import aar226_akc55_ayc62_ahl88.newast.expr.unop.intuop.*;
import aar226_akc55_ayc62_ahl88.newast.expr.unop.booluop.*;
import aar226_akc55_ayc62_ahl88.Errors.SyntaxError;
import aar226_akc55_ayc62_ahl88.newast.expr.*;
import java.util.ArrayList;

/** CUP v0.11b 20150326 generated parser.
  */
public class EtaParser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public EtaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public EtaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public EtaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\004\005" +
    "\000\002\005\004\000\002\005\002\000\002\006\003\000" +
    "\002\006\003\000\002\007\011\000\002\007\007\000\002" +
    "\010\003\000\002\010\002\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\033\004\000\002\033\006" +
    "\000\002\033\007\000\002\032\006\000\002\032\005\000" +
    "\002\016\003\000\002\017\003\000\002\017\005\000\002" +
    "\017\004\000\002\017\005\000\002\036\005\000\002\036" +
    "\005\000\002\020\003\000\002\020\004\000\002\020\003" +
    "\000\002\020\004\000\002\020\003\000\002\034\003\000" +
    "\002\034\005\000\002\013\005\000\002\013\003\000\002" +
    "\014\004\000\002\014\004\000\002\015\005\000\002\015" +
    "\006\000\002\015\006\000\002\015\002\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\004\000\002\021\004\000" +
    "\002\021\003\000\002\021\004\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\004\000\002\021\005\000\002\021\006\000\002\021\006" +
    "\000\002\021\005\000\002\021\006\000\002\021\004\000" +
    "\002\023\003\000\002\023\005\000\002\024\003\000\002" +
    "\024\003\000\002\024\005\000\002\024\005\000\002\024" +
    "\007\000\002\024\005\000\002\024\006\000\002\024\003" +
    "\000\002\027\005\000\002\035\004\000\002\035\006\000" +
    "\002\035\007\000\002\031\005\000\002\031\007\000\002" +
    "\031\007\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\007\000\002\031\007\000\002\031\011" +
    "\000\002\031\007\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\007\000\002" +
    "\031\007\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\026\005\000\002\026\003" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\022\005\000\002\022\006\000\002\022\007\000\002" +
    "\022\007\000\002\022\006\000\002\022\010\000\002\025" +
    "\004\000\002\025\005\000\002\025\002\000\002\030\004" +
    "\000\002\030\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\010\002\ufffe\004\ufffe\017\ufffe\001\002\000" +
    "\010\002\ufffa\004\ufffa\017\007\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\004\331\001" +
    "\002\000\006\002\000\004\016\001\002\000\010\002\uffff" +
    "\004\uffff\017\uffff\001\002\000\006\002\ufff9\004\ufff9\001" +
    "\002\000\006\040\323\050\322\001\002\000\006\002\ufff8" +
    "\004\ufff8\001\002\000\006\002\ufffb\004\ufffb\001\002\000" +
    "\006\043\051\047\034\001\002\000\010\002\uffeb\004\uffeb" +
    "\051\050\001\002\000\014\002\uffea\004\uffea\040\022\050" +
    "\021\051\uffea\001\002\000\004\004\032\001\002\000\012" +
    "\006\023\007\024\010\027\022\026\001\002\000\012\002" +
    "\uffe2\004\uffe2\050\uffe2\051\uffe2\001\002\000\012\002\uffe4" +
    "\004\uffe4\050\uffe4\051\uffe4\001\002\000\010\002\uffe9\004" +
    "\uffe9\051\uffe9\001\002\000\006\007\031\054\030\001\002" +
    "\000\012\002\uffe0\004\uffe0\050\uffe0\051\uffe0\001\002\000" +
    "\012\002\uffe3\004\uffe3\050\uffe3\051\uffe3\001\002\000\012" +
    "\002\uffe1\004\uffe1\050\uffe1\051\uffe1\001\002\000\004\047" +
    "\034\001\002\000\006\040\uffe6\050\uffe6\001\002\000\006" +
    "\011\037\012\035\001\002\000\036\002\uffd6\004\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\040\uffd6\041\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\050\uffd6\051\uffd6\052\uffd6\001\002\000" +
    "\016\002\ufff1\004\ufff1\040\ufff1\044\ufff1\050\ufff1\051\ufff1" +
    "\001\002\000\036\002\uffd6\004\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\040\uffd6\041\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\050\uffd6\051\uffd6\052\uffd6\001\002\000\036\002\uffdb\004" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\040\uffdb\041\041" +
    "\044\uffdb\045\uffdb\046\uffdb\050\uffdb\051\uffdb\052\uffdb\001" +
    "\002\000\010\004\044\007\043\042\042\001\002\000\036" +
    "\002\uffd9\004\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\040" +
    "\uffd9\041\uffd9\044\uffd9\045\uffd9\046\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\001\002\000\004\042\046\001\002\000\004\042" +
    "\045\001\002\000\036\002\uffd7\004\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\040\uffd7\041\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\001\002\000\036\002\uffd8" +
    "\004\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\040\uffd8\041" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\001\002\000\036\002\uffda\004\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\040\uffda\041\041\044\uffda\045\uffda\046\uffda" +
    "\050\uffda\051\uffda\052\uffda\001\002\000\010\002\uffe8\004" +
    "\uffe8\051\uffe8\001\002\000\006\004\032\044\ufff4\001\002" +
    "\000\006\044\ufff5\050\320\001\002\000\004\044\055\001" +
    "\002\000\006\044\ufff2\050\ufff2\001\002\000\006\045\056" +
    "\047\060\001\002\000\022\004\uff88\013\uff88\015\uff88\016" +
    "\uff88\045\uff88\046\uff88\051\uff88\052\uff88\001\002\000\006" +
    "\002\ufff6\004\ufff6\001\002\000\006\011\037\012\035\001" +
    "\002\000\006\045\uffdc\050\uffdc\001\002\000\006\045\056" +
    "\050\063\001\002\000\006\011\037\012\035\001\002\000" +
    "\006\002\ufff7\004\ufff7\001\002\000\006\045\uffdd\050\uffdd" +
    "\001\002\000\022\004\100\013\101\015\077\016\072\045" +
    "\056\046\074\051\075\052\070\001\002\000\024\004\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\045\uffb5\046\uffb5\051" +
    "\uffb5\052\uffb5\001\002\000\006\040\311\050\310\001\002" +
    "\000\004\050\302\001\002\000\032\004\120\005\117\006" +
    "\112\007\116\010\121\020\114\022\122\027\110\043\111" +
    "\045\113\046\uff86\051\uff86\001\002\000\006\040\272\050" +
    "\271\001\002\000\026\002\uff90\004\uff90\013\uff90\014\uff90" +
    "\015\uff90\016\uff90\045\uff90\046\uff90\051\uff90\052\uff90\001" +
    "\002\000\020\004\100\013\101\015\077\016\072\045\056" +
    "\046\263\052\070\001\002\000\024\004\uffae\013\uffae\014" +
    "\uffae\015\uffae\016\uffae\045\uffae\046\uffae\051\uffae\052\uffae" +
    "\001\002\000\026\004\120\005\117\006\112\007\116\010" +
    "\121\020\114\022\122\027\110\043\111\045\113\001\002" +
    "\000\014\040\227\041\132\043\224\047\226\050\223\001" +
    "\002\000\026\004\120\005\117\006\112\007\116\010\121" +
    "\020\114\022\122\027\110\043\111\045\113\001\002\000" +
    "\024\004\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\045\uffb4" +
    "\046\uffb4\051\uffb4\052\uffb4\001\002\000\022\004\uff8a\013" +
    "\uff8a\015\uff8a\016\uff8a\045\uff8a\046\uff8a\051\uff8a\052\uff8a" +
    "\001\002\000\006\046\214\051\215\001\002\000\026\004" +
    "\uff94\013\uff94\014\uff94\015\uff94\016\uff94\040\212\045\uff94" +
    "\046\uff94\051\uff94\052\uff94\001\002\000\004\040\107\001" +
    "\002\000\026\004\120\005\117\006\112\007\116\010\121" +
    "\020\114\022\122\027\110\043\111\045\113\001\002\000" +
    "\026\004\120\005\117\006\112\007\116\010\121\020\114" +
    "\022\122\027\110\043\111\045\113\001\002\000\026\004" +
    "\120\005\117\006\112\007\116\010\121\020\114\022\122" +
    "\027\110\043\111\045\113\001\002\000\070\004\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\041\uffc2\042\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\050\uffc2\051\uffc2\052\uffc2\001" +
    "\002\000\030\004\120\005\117\006\112\007\116\010\121" +
    "\020\114\022\122\027\110\043\111\045\113\046\202\001" +
    "\002\000\004\043\177\001\002\000\062\004\uff91\013\uff91" +
    "\014\uff91\015\uff91\016\uff91\021\143\022\134\023\126\024" +
    "\144\025\135\026\131\030\130\031\142\032\133\033\136" +
    "\034\137\035\125\036\127\037\141\041\132\045\uff91\046" +
    "\uff91\051\uff91\052\uff91\001\002\000\070\004\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\041\uffc4\042\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\050\uffc4\051\uffc4\052\uffc4\001\002" +
    "\000\070\004\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\041\uffc0\042\uffc0\044\uffc0\045\uffc0\046\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\001\002\000\072\004\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\041\uffbf\042\uffbf\043\170" +
    "\044\uffbf\045\uffbf\046\uffbf\050\uffbf\051\uffbf\052\uffbf\001" +
    "\002\000\070\004\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\041\uffc1\042\uffc1\044\uffc1\045\uffc1\046\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\001\002\000\030\004\120\005\117" +
    "\006\112\007\116\010\121\020\114\022\122\027\110\043" +
    "\111\045\113\054\123\001\002\000\070\004\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\016\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\041\uffc3\042\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3\052\uffc3\001\002" +
    "\000\070\004\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\041\132\042\uffc5\044\uffc5\045\uffc5\046\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\001\002\000\026\004\120\005\117\006" +
    "\112\007\116\010\121\020\114\022\122\027\110\043\111" +
    "\045\113\001\002\000\026\004\120\005\117\006\112\007" +
    "\116\010\121\020\114\022\122\027\110\043\111\045\113" +
    "\001\002\000\026\004\120\005\117\006\112\007\116\010" +
    "\121\020\114\022\122\027\110\043\111\045\113\001\002" +
    "\000\026\004\120\005\117\006\112\007\116\010\121\020" +
    "\114\022\122\027\110\043\111\045\113\001\002\000\026" +
    "\004\120\005\117\006\112\007\116\010\121\020\114\022" +
    "\122\027\110\043\111\045\113\001\002\000\026\004\120" +
    "\005\117\006\112\007\116\010\121\020\114\022\122\027" +
    "\110\043\111\045\113\001\002\000\026\004\120\005\117" +
    "\006\112\007\116\010\121\020\114\022\122\027\110\043" +
    "\111\045\113\001\002\000\026\004\120\005\117\006\112" +
    "\007\116\010\121\020\114\022\122\027\110\043\111\045" +
    "\113\001\002\000\026\004\120\005\117\006\112\007\116" +
    "\010\121\020\114\022\122\027\110\043\111\045\113\001" +
    "\002\000\026\004\120\005\117\006\112\007\116\010\121" +
    "\020\114\022\122\027\110\043\111\045\113\001\002\000" +
    "\026\004\120\005\117\006\112\007\116\010\121\020\114" +
    "\022\122\027\110\043\111\045\113\001\002\000\070\004" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\041\151" +
    "\042\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\001\002\000\026\004\120\005\117\006\112\007\116" +
    "\010\121\020\114\022\122\027\110\043\111\045\113\001" +
    "\002\000\026\004\120\005\117\006\112\007\116\010\121" +
    "\020\114\022\122\027\110\043\111\045\113\001\002\000" +
    "\026\004\120\005\117\006\112\007\116\010\121\020\114" +
    "\022\122\027\110\043\111\045\113\001\002\000\026\004" +
    "\120\005\117\006\112\007\116\010\121\020\114\022\122" +
    "\027\110\043\111\045\113\001\002\000\070\004\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\041\132\042\uffd3" +
    "\044\uffd3\045\uffd3\046\uffd3\050\uffd3\051\uffd3\052\uffd3\001" +
    "\002\000\070\004\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\021\uffd0\022\uffd0\023\126\024\144\025\135\026\131\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\041\132\042\uffd0\044\uffd0\045\uffd0\046\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\001\002\000\070\004\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\021\143\022\134\023\126\024" +
    "\144\025\135\026\131\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\041\132\042\uffcd\044" +
    "\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd\052\uffcd\001\002" +
    "\000\070\004\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\021" +
    "\143\022\134\023\126\024\144\025\135\026\131\030\130" +
    "\031\142\032\133\033\136\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\041\132\042\uffc9\044\uffc9\045\uffc9\046\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\001\002\000\026\004\120\005\117\006" +
    "\112\007\116\010\121\020\114\022\122\027\110\043\111" +
    "\045\113\001\002\000\042\021\143\022\134\023\126\024" +
    "\144\025\135\026\131\030\130\031\142\032\133\033\136" +
    "\034\137\035\125\036\127\037\141\041\132\042\153\001" +
    "\002\000\072\004\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\030" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\042\uffed\044\uffed\045\uffed\046" +
    "\uffed\050\uffed\051\uffed\052\uffed\001\002\000\070\004\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\021\143\022\134\023" +
    "\126\024\144\025\135\026\131\030\130\031\142\032\133" +
    "\033\136\034\uffc8\035\uffc8\036\127\037\141\041\132\042" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\001\002\000\070\004\uffcb\013\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\021\143\022\134\023\126\024\144\025\135\026\131" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\041\132\042\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\001\002\000\070\004\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\041\132\042\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\050\uffd2\051\uffd2\052\uffd2\001" +
    "\002\000\070\004\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\021\uffcf\022\uffcf\023\126\024\144\025\135\026\131\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\041\132\042\uffcf\044\uffcf\045\uffcf\046\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\001\002\000\070\004\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\021\143\022\134\023\126\024" +
    "\144\025\135\026\131\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\041\132\042\uffcc\044" +
    "\uffcc\045\uffcc\046\uffcc\050\uffcc\051\uffcc\052\uffcc\001\002" +
    "\000\042\021\143\022\134\023\126\024\144\025\135\026" +
    "\131\030\130\031\142\032\133\033\136\034\137\035\125" +
    "\036\127\037\141\041\132\042\162\001\002\000\072\004" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\030\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\042\uffec\044\uffec\045\uffec\046\uffec\050\uffec\051" +
    "\uffec\052\uffec\001\002\000\070\004\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\041\132\042\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\050\uffd1\051\uffd1\052\uffd1\001\002\000\070" +
    "\004\uffce\013\uffce\014\uffce\015\uffce\016\uffce\021\143\022" +
    "\134\023\126\024\144\025\135\026\131\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\041" +
    "\132\042\uffce\044\uffce\045\uffce\046\uffce\050\uffce\051\uffce" +
    "\052\uffce\001\002\000\070\004\uffca\013\uffca\014\uffca\015" +
    "\uffca\016\uffca\021\143\022\134\023\126\024\144\025\135" +
    "\026\131\030\130\031\142\032\133\033\136\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\041\132\042\uffca\044\uffca\045\uffca" +
    "\046\uffca\050\uffca\051\uffca\052\uffca\001\002\000\070\004" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\041\132" +
    "\042\uffd4\044\uffd4\045\uffd4\046\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\001\002\000\070\004\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\021\143\022\134\023\126\024\144\025\135\026" +
    "\131\030\130\031\142\032\133\033\136\034\137\035\uffc7" +
    "\036\127\037\141\041\132\042\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\001\002\000\030\004\120" +
    "\005\117\006\112\007\116\010\121\020\114\022\122\027" +
    "\110\043\111\044\173\045\113\001\002\000\006\044\175" +
    "\050\174\001\002\000\066\004\uffb7\013\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\021\143\022\134\023\126\024\144\025\135" +
    "\026\131\030\130\031\142\032\133\033\136\034\137\035" +
    "\125\036\127\037\141\041\132\044\uffb7\045\uffb7\046\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\001\002\000\070\004\uffba\013" +
    "\uffba\014\uffba\015\uffba\016\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\026\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\041\uffba\042\uffba" +
    "\044\uffba\045\uffba\046\uffba\050\uffba\051\uffba\052\uffba\001" +
    "\002\000\026\004\120\005\117\006\112\007\116\010\121" +
    "\020\114\022\122\027\110\043\111\045\113\001\002\000" +
    "\070\004\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\041\uffb9\042\uffb9\044\uffb9\045\uffb9\046\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\001\002\000\066\004\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\021\143\022\134\023\126\024\144\025" +
    "\135\026\131\030\130\031\142\032\133\033\136\034\137" +
    "\035\125\036\127\037\141\041\132\044\uffb6\045\uffb6\046" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\001\002\000\026\004\120" +
    "\005\117\006\112\007\116\010\121\020\114\022\122\027" +
    "\110\043\111\045\113\001\002\000\042\021\143\022\134" +
    "\023\126\024\144\025\135\026\131\030\130\031\142\032" +
    "\133\033\136\034\137\035\125\036\127\037\141\041\132" +
    "\044\201\001\002\000\070\004\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\037\uffbb\041\uffbb\042\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\050\uffbb\051\uffbb\052\uffbb\001\002\000\070\004" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\041\uffbe" +
    "\042\uffbe\044\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\001\002\000\006\046\205\050\204\001\002\000\030" +
    "\004\120\005\117\006\112\007\116\010\121\020\114\022" +
    "\122\027\110\043\111\045\113\046\206\001\002\000\070" +
    "\004\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\041" +
    "\uffbd\042\uffbd\044\uffbd\045\uffbd\046\uffbd\050\uffbd\051\uffbd" +
    "\052\uffbd\001\002\000\070\004\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\041\uffbc\042\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\050\uffbc\051\uffbc\052\uffbc\001\002\000\042\021" +
    "\143\022\134\023\126\024\144\025\135\026\131\030\130" +
    "\031\142\032\133\033\136\034\137\035\125\036\127\037" +
    "\141\041\132\044\210\001\002\000\070\004\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\041\uffd5\042\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\050\uffd5\051\uffd5\052\uffd5\001\002" +
    "\000\070\004\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\041\132\042\uffc6\044\uffc6\045\uffc6\046\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\001\002\000\026\004\120\005\117\006" +
    "\112\007\116\010\121\020\114\022\122\027\110\043\111" +
    "\045\113\001\002\000\062\004\uff95\013\uff95\014\uff95\015" +
    "\uff95\016\uff95\021\143\022\134\023\126\024\144\025\135" +
    "\026\131\030\130\031\142\032\133\033\136\034\137\035" +
    "\125\036\127\037\141\041\132\045\uff95\046\uff95\051\uff95" +
    "\052\uff95\001\002\000\026\002\uff8c\004\uff8c\013\uff8c\014" +
    "\uff8c\015\uff8c\016\uff8c\045\uff8c\046\uff8c\051\uff8c\052\uff8c" +
    "\001\002\000\004\046\216\001\002\000\026\002\uff8d\004" +
    "\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\045\uff8d\046\uff8d" +
    "\051\uff8d\052\uff8d\001\002\000\052\004\100\013\101\015" +
    "\077\021\143\022\134\023\126\024\144\025\135\026\131" +
    "\030\130\031\142\032\133\033\136\034\137\035\125\036" +
    "\127\037\141\041\132\045\056\052\070\001\002\000\024" +
    "\004\uffb2\013\uffb2\014\221\015\uffb2\016\uffb2\045\uffb2\046" +
    "\uffb2\051\uffb2\052\uffb2\001\002\000\014\004\100\013\101" +
    "\015\077\045\056\052\070\001\002\000\024\004\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\045\uffb1\046\uffb1\051\uffb1" +
    "\052\uffb1\001\002\000\006\004\256\052\254\001\002\000" +
    "\030\004\120\005\117\006\112\007\116\010\121\020\114" +
    "\022\122\027\110\043\111\044\250\045\113\001\002\000" +
    "\010\040\ufff0\041\151\050\uffac\001\002\000\006\011\037" +
    "\012\035\001\002\000\026\004\120\005\117\006\112\007" +
    "\116\010\121\020\114\022\122\027\110\043\111\045\113" +
    "\001\002\000\062\004\uff93\013\uff93\014\uff93\015\uff93\016" +
    "\uff93\021\143\022\134\023\126\024\144\025\135\026\131" +
    "\030\130\031\142\032\133\033\136\034\137\035\125\036" +
    "\127\037\141\041\132\045\uff93\046\uff93\051\uff93\052\uff93" +
    "\001\002\000\030\004\ufff1\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\040\ufff1\045\ufff1\046\ufff1\050\232\051\ufff1\052\ufff1" +
    "\001\002\000\006\004\235\052\233\001\002\000\006\040" +
    "\uffa8\050\uffa8\001\002\000\006\040\uff9a\050\uff9a\001\002" +
    "\000\014\040\uffa3\041\132\043\236\047\240\050\uffa3\001" +
    "\002\000\030\004\120\005\117\006\112\007\116\010\121" +
    "\020\114\022\122\027\110\043\111\044\243\045\113\001" +
    "\002\000\010\040\uffac\041\151\050\uffac\001\002\000\006" +
    "\011\037\012\035\001\002\000\006\040\uffa1\050\uffa1\001" +
    "\002\000\006\044\245\050\174\001\002\000\004\041\132" +
    "\001\002\000\010\040\uffab\041\151\050\uffab\001\002\000" +
    "\004\041\132\001\002\000\010\040\uffaa\041\151\050\uffaa" +
    "\001\002\000\006\044\252\050\174\001\002\000\026\004" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\041\132\045\uffb0" +
    "\046\uffb0\051\uffb0\052\uffb0\001\002\000\010\040\uffef\041" +
    "\151\050\uffab\001\002\000\026\004\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\016\uffaf\041\132\045\uffaf\046\uffaf\051\uffaf\052" +
    "\uffaf\001\002\000\010\040\uffee\041\151\050\uffaa\001\002" +
    "\000\006\040\uffa6\050\uffa6\001\002\000\006\040\uff98\050" +
    "\uff98\001\002\000\014\040\uffa4\041\132\043\236\047\257" +
    "\050\uffa4\001\002\000\006\011\037\012\035\001\002\000" +
    "\006\040\uffa2\050\uffa2\001\002\000\052\004\100\013\101" +
    "\015\077\021\143\022\134\023\126\024\144\025\135\026" +
    "\131\030\130\031\142\032\133\033\136\034\137\035\125" +
    "\036\127\037\141\041\132\045\056\052\070\001\002\000" +
    "\024\004\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\045\uffb3" +
    "\046\uffb3\051\uffb3\052\uffb3\001\002\000\026\002\uff8f\004" +
    "\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\045\uff8f\046\uff8f" +
    "\051\uff8f\052\uff8f\001\002\000\022\004\uff89\013\uff89\015" +
    "\uff89\016\uff89\045\uff89\046\uff89\051\uff89\052\uff89\001\002" +
    "\000\006\046\267\051\266\001\002\000\004\046\270\001" +
    "\002\000\026\002\uff8e\004\uff8e\013\uff8e\014\uff8e\015\uff8e" +
    "\016\uff8e\045\uff8e\046\uff8e\051\uff8e\052\uff8e\001\002\000" +
    "\026\002\uff8b\004\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b" +
    "\045\uff8b\046\uff8b\051\uff8b\052\uff8b\001\002\000\006\004" +
    "\276\052\274\001\002\000\026\004\120\005\117\006\112" +
    "\007\116\010\121\020\114\022\122\027\110\043\111\045" +
    "\113\001\002\000\026\004\uffad\013\uffad\014\uffad\015\uffad" +
    "\016\uffad\045\uffad\046\uffad\050\174\051\uffad\052\uffad\001" +
    "\002\000\006\040\uff9e\050\uff9e\001\002\000\006\040\uff96" +
    "\050\uff96\001\002\000\014\040\uff9f\041\132\043\236\047" +
    "\277\050\uff9f\001\002\000\006\011\037\012\035\001\002" +
    "\000\006\040\uffa0\050\uffa0\001\002\000\010\046\uff87\050" +
    "\174\051\uff87\001\002\000\006\004\305\052\303\001\002" +
    "\000\006\040\uff9d\050\uff9d\001\002\000\006\040\uff97\050" +
    "\uff97\001\002\000\014\040\uff99\041\132\043\236\047\306" +
    "\050\uff99\001\002\000\006\011\037\012\035\001\002\000" +
    "\006\040\uff9b\050\uff9b\001\002\000\006\004\315\052\313" +
    "\001\002\000\026\004\120\005\117\006\112\007\116\010" +
    "\121\020\114\022\122\027\110\043\111\045\113\001\002" +
    "\000\062\004\uff92\013\uff92\014\uff92\015\uff92\016\uff92\021" +
    "\143\022\134\023\126\024\144\025\135\026\131\030\130" +
    "\031\142\032\133\033\136\034\137\035\125\036\127\037" +
    "\141\041\132\045\uff92\046\uff92\051\uff92\052\uff92\001\002" +
    "\000\006\040\uffa5\050\uffa5\001\002\000\006\040\uff9c\050" +
    "\uff9c\001\002\000\014\040\uffa9\041\132\043\236\047\316" +
    "\050\uffa9\001\002\000\006\011\037\012\035\001\002\000" +
    "\006\040\uffa7\050\uffa7\001\002\000\004\004\032\001\002" +
    "\000\006\044\ufff3\050\ufff3\001\002\000\004\004\032\001" +
    "\002\000\012\006\023\007\024\010\027\022\026\001\002" +
    "\000\012\002\uffe7\004\uffe7\050\326\051\uffe7\001\002\000" +
    "\012\002\uffdf\004\uffdf\050\uffdf\051\uffdf\001\002\000\012" +
    "\006\023\007\024\010\027\022\026\001\002\000\012\002" +
    "\uffde\004\uffde\050\uffde\051\uffde\001\002\000\006\040\uffe5" +
    "\050\uffe5\001\002\000\012\002\ufffd\004\ufffd\017\ufffd\051" +
    "\332\001\002\000\010\002\ufffc\004\ufffc\017\ufffc\001\002" +
    "" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\006\002\004\003\003\001\001\000\006\004" +
    "\010\005\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\014\007\011\012\017\016" +
    "\013\017\016\036\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\032\001\001\000\004\020\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\035" +
    "\001\001\000\004\015\046\001\001\000\002\001\001\000" +
    "\004\015\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\052\011\051\012\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\056\001\001\000\004\025\065\001\001\000\002\001" +
    "\001\000\006\013\061\014\060\001\001\000\002\001\001" +
    "\000\004\022\063\001\001\000\004\014\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\012\104\022\075" +
    "\024\102\026\066\027\101\030\103\031\072\033\105\035" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\171\023\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\012\104\022\075\024\263" +
    "\026\066\027\101\030\264\031\072\033\105\035\070\001" +
    "\001\000\002\001\001\000\004\021\260\001\001\000\004" +
    "\032\224\001\001\000\004\021\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\114\001\001\000\004\021" +
    "\210\001\001\000\004\021\206\001\001\000\002\001\001" +
    "\000\006\021\171\023\202\001\001\000\002\001\001\000" +
    "\004\032\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\123\001" +
    "\001\000\002\001\001\000\004\032\137\001\001\000\004" +
    "\021\166\001\001\000\004\021\165\001\001\000\004\021" +
    "\164\001\001\000\004\021\163\001\001\000\004\021\162" +
    "\001\001\000\004\021\160\001\001\000\004\021\157\001" +
    "\001\000\004\021\156\001\001\000\004\021\155\001\001" +
    "\000\004\021\154\001\001\000\004\021\153\001\001\000" +
    "\002\001\001\000\004\021\147\001\001\000\004\021\146" +
    "\001\001\000\004\021\145\001\001\000\004\021\144\001" +
    "\001\000\004\032\137\001\001\000\004\032\137\001\001" +
    "\000\004\032\137\001\001\000\004\032\137\001\001\000" +
    "\004\021\151\001\001\000\004\032\137\001\001\000\002" +
    "\001\001\000\004\032\137\001\001\000\004\032\137\001" +
    "\001\000\004\032\137\001\001\000\004\032\137\001\001" +
    "\000\004\032\137\001\001\000\004\032\137\001\001\000" +
    "\002\001\001\000\004\032\137\001\001\000\004\032\137" +
    "\001\001\000\004\032\137\001\001\000\004\032\137\001" +
    "\001\000\004\032\137\001\001\000\006\021\171\023\170" +
    "\001\001\000\002\001\001\000\004\032\137\001\001\000" +
    "\002\001\001\000\004\021\175\001\001\000\002\001\001" +
    "\000\004\032\137\001\001\000\004\021\177\001\001\000" +
    "\004\032\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\137\001\001\000\002" +
    "\001\001\000\004\032\137\001\001\000\004\021\212\001" +
    "\001\000\004\032\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\012\104\022\075\024" +
    "\217\026\066\027\101\031\072\032\137\033\105\035\070" +
    "\001\001\000\002\001\001\000\022\012\104\022\075\024" +
    "\221\026\066\027\101\031\072\033\105\035\070\001\001" +
    "\000\002\001\001\000\004\035\254\001\001\000\006\021" +
    "\171\023\246\001\001\000\002\001\001\000\004\014\230" +
    "\001\001\000\004\021\227\001\001\000\004\032\137\001" +
    "\001\000\002\001\001\000\004\035\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\236\001\001\000" +
    "\006\021\171\023\241\001\001\000\002\001\001\000\004" +
    "\014\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\243\001\001\000\002\001\001\000\004\032\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\250\001\001\000\002\001\001\000\004\032\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\236\001\001\000\004\014\257\001\001\000\002" +
    "\001\001\000\024\012\104\022\075\024\261\026\066\027" +
    "\101\031\072\032\137\033\105\035\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\274\001\001\000\006\021\171\023\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\236\001\001\000\004\014\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\236\001" +
    "\001\000\004\014\306\001\001\000\002\001\001\000\004" +
    "\035\313\001\001\000\004\021\311\001\001\000\004\032" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\236\001\001\000\004\014\316\001\001\000\002\001" +
    "\001\000\004\012\320\001\001\000\002\001\001\000\004" +
    "\012\327\001\001\000\006\020\324\034\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EtaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$EtaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EtaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token){
        throw new SyntaxError(cur_token.left,cur_token.right ,"Parsing error " + cur_token.value());
    }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$EtaParser$actions {
    private final EtaParser parser;

    /** Constructor */
    CUP$EtaParser$actions(EtaParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 123. */
    public final java_cup.runtime.Symbol CUP$EtaParser$do_action_part00000000(
            int                        CUP$EtaParser$act_num,
            java_cup.runtime.lr_parser CUP$EtaParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$EtaParser$stack,
            int                        CUP$EtaParser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$EtaParser$result;

        /* select the action based on the action number */
        switch (CUP$EtaParser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int start_valright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Program start_val = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Program> value();
                RESULT = start_val;
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$EtaParser$parser.done_parsing();
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // program ::= importUseStar definitionStar 
            {
                Program RESULT = null;
                int iusleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int iusright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                ArrayList<Use> ius = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<ArrayList<Use>> value();
                int dlleft = CUP$EtaParser$stack.peek().left;
                int dlright = CUP$EtaParser$stack.peek().right;
                ArrayList<Definition> dl = CUP$EtaParser$stack.peek().<ArrayList<Definition>> value();
                
    RESULT = new Program(ius, dl,1,1);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // importUseStar ::= importUseStar use_component 
            {
                ArrayList<Use> RESULT = null;
                int iusleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int iusright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                ArrayList<Use> ius = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<ArrayList<Use>> value();
                int uleft = CUP$EtaParser$stack.peek().left;
                int uright = CUP$EtaParser$stack.peek().right;
                Use u = CUP$EtaParser$stack.peek().<Use> value();
                 ius.add(u); RESULT = ius; 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("importUseStar",1, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // importUseStar ::= 
            {
                ArrayList<Use> RESULT = null;
                 RESULT = new ArrayList<Use>(); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("importUseStar",1, CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // use_component ::= USE IDENTIFIER 
            {
                Use RESULT = null;
                int ileft = CUP$EtaParser$stack.peek().left;
                int iright = CUP$EtaParser$stack.peek().right;
                String i = CUP$EtaParser$stack.peek().<String> value();
                 RESULT = new Use(i, ileft, iright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("use_component",2, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // use_component ::= USE IDENTIFIER SEMICOLON 
            {
                Use RESULT = null;
                int ileft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int iright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                String i = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<String> value();
                 RESULT = new Use(i, ileft, iright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("use_component",2, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // definitionStar ::= definitionStar definition 
            {
                ArrayList<Definition> RESULT = null;
                int dsleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int dsright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                ArrayList<Definition> ds = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<ArrayList<Definition>> value();
                int dleft = CUP$EtaParser$stack.peek().left;
                int dright = CUP$EtaParser$stack.peek().right;
                Definition d = CUP$EtaParser$stack.peek().<Definition> value();
                ds.add(d); RESULT = ds; 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("definitionStar",3, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // definitionStar ::= 
            {
                ArrayList<Definition> RESULT = null;
                 RESULT = new ArrayList<Definition>(); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("definitionStar",3, CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // definition ::= method 
            {
                Definition RESULT = null;
                int mleft = CUP$EtaParser$stack.peek().left;
                int mright = CUP$EtaParser$stack.peek().right;
                Method m = CUP$EtaParser$stack.peek().<Method> value();
                 RESULT = m; 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("definition",4, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // definition ::= globalDecl 
            {
                Definition RESULT = null;
                int gdleft = CUP$EtaParser$stack.peek().left;
                int gdright = CUP$EtaParser$stack.peek().right;
                Definition gd = CUP$EtaParser$stack.peek().<Definition> value();
                 RESULT = gd; 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("definition",4, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // method ::= IDENTIFIER OPEN_PAREN emptyBracketDecl_star CLOSE_PAREN COLON emptyBracketType_plus block 
            {
                Method RESULT = null;
                int ileft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-6).left;
                int iright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-6).right;
                String i = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-6).<String> value();
                int dsleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).left;
                int dsright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).right;
                ArrayList<AnnotatedTypeDecl> ds = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).<ArrayList<AnnotatedTypeDecl>> value();
                int tsleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int tsright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                ArrayList<Type> ts = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<ArrayList<Type>> value();
                int bleft = CUP$EtaParser$stack.peek().left;
                int bright = CUP$EtaParser$stack.peek().right;
                Block b = CUP$EtaParser$stack.peek().<Block> value();
                
    RESULT = new Method(i,ds,ts,b,ileft,iright);
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("method",5, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-6), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // method ::= IDENTIFIER OPEN_PAREN emptyBracketDecl_star CLOSE_PAREN block 
            {
                Method RESULT = null;
                int ileft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).left;
                int iright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).right;
                String i = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).<String> value();
                int dsleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int dsright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<AnnotatedTypeDecl> ds = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<AnnotatedTypeDecl>> value();
                int bleft = CUP$EtaParser$stack.peek().left;
                int bright = CUP$EtaParser$stack.peek().right;
                Block b = CUP$EtaParser$stack.peek().<Block> value();
                 // Block b
        RESULT = new Method(i,ds,new ArrayList<Type>(),b,ileft,iright); // NONE
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("method",5, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // emptyBracketDecl_star ::= emptyBracketDecl_plus 
            {
                ArrayList<AnnotatedTypeDecl> RESULT = null;
                int declstarleft = CUP$EtaParser$stack.peek().left;
                int declstarright = CUP$EtaParser$stack.peek().right;
                ArrayList<AnnotatedTypeDecl> declstar = CUP$EtaParser$stack.peek().<ArrayList<AnnotatedTypeDecl>> value();
                 RESULT = declstar; 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl_star",6, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // emptyBracketDecl_star ::= 
            {
                ArrayList<AnnotatedTypeDecl> RESULT = null;
                 RESULT = new ArrayList<AnnotatedTypeDecl>();
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl_star",6, CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // emptyBracketDecl_plus ::= emptyBracketDecl_plus COMMA emptyBracketDecl 
            {
                ArrayList<AnnotatedTypeDecl> RESULT = null;
                int tsleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int tsright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<AnnotatedTypeDecl> ts = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<AnnotatedTypeDecl>> value();
                int dleft = CUP$EtaParser$stack.peek().left;
                int dright = CUP$EtaParser$stack.peek().right;
                AnnotatedTypeDecl d = CUP$EtaParser$stack.peek().<AnnotatedTypeDecl> value();
                 ts.add(d); RESULT = ts; 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl_plus",7, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // emptyBracketDecl_plus ::= emptyBracketDecl 
            {
                ArrayList<AnnotatedTypeDecl> RESULT = null;
                int dleft = CUP$EtaParser$stack.peek().left;
                int dright = CUP$EtaParser$stack.peek().right;
                AnnotatedTypeDecl d = CUP$EtaParser$stack.peek().<AnnotatedTypeDecl> value();
                ArrayList<AnnotatedTypeDecl> temp = new ArrayList<AnnotatedTypeDecl>();
      temp.add(d);
      RESULT = temp;
      
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl_plus",7, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // emptyBracketDecl ::= IDENTIFIER COLON emptyBracketType 
            {
                AnnotatedTypeDecl RESULT = null;
                int ileft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int iright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                String i = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<String> value();
                int tleft = CUP$EtaParser$stack.peek().left;
                int tright = CUP$EtaParser$stack.peek().right;
                Type t = CUP$EtaParser$stack.peek().<Type> value();
                 RESULT = new AnnotatedTypeDecl(new Id(i,ileft,iright),t,ileft,iright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl",8, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // fullBracketType ::= IDENTIFIER fullBracketPlus 
            {
                ArrAccessDecl RESULT = null;
                int ileft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int iright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                String i = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<String> value();
                int eleft = CUP$EtaParser$stack.peek().left;
                int eright = CUP$EtaParser$stack.peek().right;
                ArrayList<Expr> e = CUP$EtaParser$stack.peek().<ArrayList<Expr>> value();
                
    Id a = new Id(i,ileft,iright);
    RESULT = new ArrAccessDecl(a,e, ileft,iright);
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("fullBracketType",25, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // fullBracketType ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN fullBracketPlus 
            {
                ArrAccessDecl RESULT = null;
                int idleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).left;
                int idright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).right;
                String id = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).<String> value();
                int eleft = CUP$EtaParser$stack.peek().left;
                int eright = CUP$EtaParser$stack.peek().right;
                ArrayList<Expr> e = CUP$EtaParser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new ArrAccessDecl(new Id(id,idleft,idright),new ArrayList<Expr>(),e, idleft, idright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("fullBracketType",25, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // fullBracketType ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN fullBracketPlus 
            {
                ArrAccessDecl RESULT = null;
                int idleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).left;
                int idright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).right;
                String id = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).<String> value();
                int eleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int eright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<Expr> e = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<Expr>> value();
                int indileft = CUP$EtaParser$stack.peek().left;
                int indiright = CUP$EtaParser$stack.peek().right;
                ArrayList<Expr> indi = CUP$EtaParser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new ArrAccessDecl(new Id(id,idleft,idright), e,indi, idleft, idright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("fullBracketType",25, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // fullBracketPlus ::= fullBracketPlus OPEN_BRACKET expr CLOSE_BRACKET 
            {
                ArrayList<Expr> RESULT = null;
                int tsleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).left;
                int tsright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).right;
                ArrayList<Expr> ts = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).<ArrayList<Expr>> value();
                int eleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int eright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Expr e = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Expr> value();
                 ts.add(e); RESULT = ts; 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("fullBracketPlus",24, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // fullBracketPlus ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                ArrayList<Expr> RESULT = null;
                int eleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int eright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Expr e = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Expr> value();
                 ArrayList<Expr> exprList = new ArrayList<Expr>();
                         exprList.add(e);
                         RESULT = exprList;
                         
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("fullBracketPlus",24, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // globalDecl ::= newGlob 
            {
                Definition RESULT = null;
                int ngleft = CUP$EtaParser$stack.peek().left;
                int ngright = CUP$EtaParser$stack.peek().right;
                Definition ng = CUP$EtaParser$stack.peek().<Definition> value();
                RESULT = ng;
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("globalDecl",12, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // newGlob ::= emptyBracketDecl 
            {
                Definition RESULT = null;
                int edleft = CUP$EtaParser$stack.peek().left;
                int edright = CUP$EtaParser$stack.peek().right;
                AnnotatedTypeDecl ed = CUP$EtaParser$stack.peek().<AnnotatedTypeDecl> value();
                RESULT = new Globdecl(ed, null, edleft, edright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("newGlob",13, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // newGlob ::= emptyBracketDecl GETS value 
            {
                Definition RESULT = null;
                int edleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int edright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                AnnotatedTypeDecl ed = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<AnnotatedTypeDecl> value();
                int gleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int gright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Object g = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Object> value();
                int vleft = CUP$EtaParser$stack.peek().left;
                int vright = CUP$EtaParser$stack.peek().right;
                Expr v = CUP$EtaParser$stack.peek().<Expr> value();
                
        if (!ed.type.dimensions.allEmpty) {
            throw new SyntaxError(gleft,gright ,"array with init len no Val");
        }
        if (ed.type.dimensions.getDim() != 0){
            throw new SyntaxError(gleft,gright ,"global arr not init allowed");
        }
        RESULT  = new Globdecl(ed, v, edleft, edright);
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("newGlob",13, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // newGlob ::= newGlob SEMICOLON 
            {
                Definition RESULT = null;
                int gdleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int gdright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Definition gd = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Definition> value();
                RESULT = gd;
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("newGlob",13, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // newGlob ::= glob_type_list GETS valueList 
            {
                Definition RESULT = null;
                int tlleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int tlright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<AnnotatedTypeDecl> tl = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<AnnotatedTypeDecl>> value();
                int gleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int gright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Object g = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Object> value();
                int vleft = CUP$EtaParser$stack.peek().left;
                int vright = CUP$EtaParser$stack.peek().right;
                ArrayList<Expr> v = CUP$EtaParser$stack.peek().<ArrayList<Expr>> value();
                RESULT = new MultiGlobalDecl(tl,v,gleft,gright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("newGlob",13, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // glob_type_list ::= emptyBracketDecl COMMA emptyBracketDecl 
            {
                ArrayList<AnnotatedTypeDecl> RESULT = null;
                int ed1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int ed1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                AnnotatedTypeDecl ed1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<AnnotatedTypeDecl> value();
                int ed2left = CUP$EtaParser$stack.peek().left;
                int ed2right = CUP$EtaParser$stack.peek().right;
                AnnotatedTypeDecl ed2 = CUP$EtaParser$stack.peek().<AnnotatedTypeDecl> value();
                
     ArrayList<AnnotatedTypeDecl> temp = new ArrayList<>();
     temp.add(ed1);
     temp.add(ed2);
     RESULT = temp;
     
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("glob_type_list",28, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // glob_type_list ::= glob_type_list COMMA emptyBracketDecl 
            {
                ArrayList<AnnotatedTypeDecl> RESULT = null;
                int tlleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int tlright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<AnnotatedTypeDecl> tl = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<AnnotatedTypeDecl>> value();
                int edleft = CUP$EtaParser$stack.peek().left;
                int edright = CUP$EtaParser$stack.peek().right;
                AnnotatedTypeDecl ed = CUP$EtaParser$stack.peek().<AnnotatedTypeDecl> value();
                
         tl.add(ed);
         RESULT = tl;
     
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("glob_type_list",28, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // value ::= INTEGER_LITERAL 
            {
                Expr RESULT = null;
                int ileft = CUP$EtaParser$stack.peek().left;
                int iright = CUP$EtaParser$stack.peek().right;
                Long i = CUP$EtaParser$stack.peek().<Long> value();
                 RESULT = new IntLiteral(i,ileft,iright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("value",14, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // value ::= MINUS MAX_NUM 
            {
                Expr RESULT = null;
                int mleft = CUP$EtaParser$stack.peek().left;
                int mright = CUP$EtaParser$stack.peek().right;
                Object m = CUP$EtaParser$stack.peek().<Object> value();
                RESULT = new IntLiteral(Long.MIN_VALUE,mleft,mright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("value",14, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // value ::= CHARACTER_LITERAL 
            {
                Expr RESULT = null;
                int cleft = CUP$EtaParser$stack.peek().left;
                int cright = CUP$EtaParser$stack.peek().right;
                String c = CUP$EtaParser$stack.peek().<String> value();
                 RESULT = new IntLiteral(c,cleft,cright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("value",14, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // value ::= MINUS INTEGER_LITERAL 
            {
                Expr RESULT = null;
                int ileft = CUP$EtaParser$stack.peek().left;
                int iright = CUP$EtaParser$stack.peek().right;
                Long i = CUP$EtaParser$stack.peek().<Long> value();
                 RESULT = new IntLiteral(-i,ileft,iright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("value",14, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // value ::= BOOL_LITERAL 
            {
                Expr RESULT = null;
                int bleft = CUP$EtaParser$stack.peek().left;
                int bright = CUP$EtaParser$stack.peek().right;
                Boolean b = CUP$EtaParser$stack.peek().<Boolean> value();
                 RESULT = new BoolLiteral(b,bleft,bright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("value",14, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // valueList ::= value 
            {
                ArrayList<Expr> RESULT = null;
                int xleft = CUP$EtaParser$stack.peek().left;
                int xright = CUP$EtaParser$stack.peek().right;
                Expr x = CUP$EtaParser$stack.peek().<Expr> value();
                
             ArrayList<Expr> temp = new ArrayList<Expr>();
             temp.add(x);
             RESULT = temp;
         
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("valueList",26, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // valueList ::= valueList COMMA value 
            {
                ArrayList<Expr> RESULT = null;
                int aveleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int averight = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<Expr> ave = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<Expr>> value();
                int xleft = CUP$EtaParser$stack.peek().left;
                int xright = CUP$EtaParser$stack.peek().right;
                Expr x = CUP$EtaParser$stack.peek().<Expr> value();
                 ave.add(x); RESULT = ave; 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("valueList",26, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // emptyBracketType_plus ::= emptyBracketType_plus COMMA emptyBracketType 
            {
                ArrayList<Type> RESULT = null;
                int tsleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int tsright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<Type> ts = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<Type>> value();
                int tleft = CUP$EtaParser$stack.peek().left;
                int tright = CUP$EtaParser$stack.peek().right;
                Type t = CUP$EtaParser$stack.peek().<Type> value();
                 ts.add(t); RESULT = ts; 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("emptyBracketType_plus",9, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // emptyBracketType_plus ::= emptyBracketType 
            {
                ArrayList<Type> RESULT = null;
                int tleft = CUP$EtaParser$stack.peek().left;
                int tright = CUP$EtaParser$stack.peek().right;
                Type t = CUP$EtaParser$stack.peek().<Type> value();
                 ArrayList<Type> typeList = new ArrayList<Type>();
                      typeList.add(t);
                      RESULT = typeList;
                      
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("emptyBracketType_plus",9, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // emptyBracketType ::= INT emptyDimension_star 
            {
                Type RESULT = null;
                int dleft = CUP$EtaParser$stack.peek().left;
                int dright = CUP$EtaParser$stack.peek().right;
                Dimension d = CUP$EtaParser$stack.peek().<Dimension> value();
                RESULT = new Type(true,d,dleft,dright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("emptyBracketType",10, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // emptyBracketType ::= BOOL emptyDimension_star 
            {
                Type RESULT = null;
                int dleft = CUP$EtaParser$stack.peek().left;
                int dright = CUP$EtaParser$stack.peek().right;
                Dimension d = CUP$EtaParser$stack.peek().<Dimension> value();
                RESULT = new Type(false,d,dleft,dright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("emptyBracketType",10, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // emptyDimension_star ::= emptyDimension_star OPEN_BRACKET CLOSE_BRACKET 
            {
                Dimension RESULT = null;
                int dsleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int dsright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Dimension ds = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Dimension> value();
                
    ds.increment();
    ds.foundEmpty = true;
    ds.indices.add(null);
    RESULT = ds;
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",11, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // emptyDimension_star ::= emptyDimension_star OPEN_BRACKET INTEGER_LITERAL CLOSE_BRACKET 
            {
                Dimension RESULT = null;
                int dsleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).left;
                int dsright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).right;
                Dimension ds = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).<Dimension> value();
                int ileft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int iright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Long i = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Long> value();
                
        if (ds.foundEmpty) throw new SyntaxError(ileft,iright,"Filled index after empty");
        ds.allEmpty = false;
        IntLiteral iL = new IntLiteral(i,ileft,iright);
        ds.indices.add(iL);
        ds.increment(); // [][2]
        RESULT = ds;
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",11, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // emptyDimension_star ::= emptyDimension_star OPEN_BRACKET IDENTIFIER CLOSE_BRACKET 
            {
                Dimension RESULT = null;
                int dsleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).left;
                int dsright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).right;
                Dimension ds = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).<Dimension> value();
                int ileft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int iright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                String i = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<String> value();
                
        if (ds.foundEmpty) throw new SyntaxError(ileft,iright ,"Filled index after empty");
        ds.allEmpty = false;
        ds.indices.add(new Id(i,ileft,iright));
        ds.increment(); // [][2]
        RESULT = ds;
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",11, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // emptyDimension_star ::= 
            {
                Dimension RESULT = null;
                RESULT = new Dimension(-1,-1); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",11, CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int e1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Expr e1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Expr> value();
                RESULT = e1;
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // expr ::= expr TIMES expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int e1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Expr e1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Expr> value();
                int e2left = CUP$EtaParser$stack.peek().left;
                int e2right = CUP$EtaParser$stack.peek().right;
                Expr e2 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new TimesBinop(e1, e2, e1left, e1right); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // expr ::= expr HI_MULT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int e1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Expr e1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Expr> value();
                int e2left = CUP$EtaParser$stack.peek().left;
                int e2right = CUP$EtaParser$stack.peek().right;
                Expr e2 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new HighMultBinop(e1, e2, e1left, e1right); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // expr ::= expr DIVIDE expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int e1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Expr e1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Expr> value();
                int e2left = CUP$EtaParser$stack.peek().left;
                int e2right = CUP$EtaParser$stack.peek().right;
                Expr e2 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new DivideBinop(e1, e2, e1left, e1right); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // expr ::= expr MODULO expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int e1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Expr e1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Expr> value();
                int e2left = CUP$EtaParser$stack.peek().left;
                int e2right = CUP$EtaParser$stack.peek().right;
                Expr e2 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new ModuloBinop(e1, e2, e1left, e1right); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // expr ::= expr PLUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int e1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Expr e1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Expr> value();
                int e2left = CUP$EtaParser$stack.peek().left;
                int e2right = CUP$EtaParser$stack.peek().right;
                Expr e2 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new PlusBinop(e1, e2, e1left, e1right); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // expr ::= expr MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int e1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Expr e1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Expr> value();
                int e2left = CUP$EtaParser$stack.peek().left;
                int e2right = CUP$EtaParser$stack.peek().right;
                Expr e2 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new MinusBinop(e1, e2, e1left, e1right); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // expr ::= expr LT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int e1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Expr e1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Expr> value();
                int e2left = CUP$EtaParser$stack.peek().left;
                int e2right = CUP$EtaParser$stack.peek().right;
                Expr e2 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new LtBinop(e1, e2, e1left, e1right); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // expr ::= expr LEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int e1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Expr e1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Expr> value();
                int e2left = CUP$EtaParser$stack.peek().left;
                int e2right = CUP$EtaParser$stack.peek().right;
                Expr e2 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new LeqBinop(e1, e2, e1left, e1right); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // expr ::= expr GT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int e1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Expr e1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Expr> value();
                int e2left = CUP$EtaParser$stack.peek().left;
                int e2right = CUP$EtaParser$stack.peek().right;
                Expr e2 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new GtBinop(e1, e2, e1left, e1right); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // expr ::= expr GEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int e1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Expr e1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Expr> value();
                int e2left = CUP$EtaParser$stack.peek().left;
                int e2right = CUP$EtaParser$stack.peek().right;
                Expr e2 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new GeqBinop(e1, e2, e1left, e1right); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // expr ::= expr EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int e1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Expr e1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Expr> value();
                int e2left = CUP$EtaParser$stack.peek().left;
                int e2right = CUP$EtaParser$stack.peek().right;
                Expr e2 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new EqualsBinop(e1, e2, e1left, e1right); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // expr ::= expr NOT_EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int e1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Expr e1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Expr> value();
                int e2left = CUP$EtaParser$stack.peek().left;
                int e2right = CUP$EtaParser$stack.peek().right;
                Expr e2 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new NotEqualsBinop(e1, e2, e1left, e1right); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // expr ::= expr AND expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int e1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Expr e1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Expr> value();
                int e2left = CUP$EtaParser$stack.peek().left;
                int e2right = CUP$EtaParser$stack.peek().right;
                Expr e2 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new AndBinop(e1, e2, e1left, e1right); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // expr ::= expr OR expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int e1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Expr e1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Expr> value();
                int e2left = CUP$EtaParser$stack.peek().left;
                int e2right = CUP$EtaParser$stack.peek().right;
                Expr e2 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new OrBinop(e1, e2, e1left, e1right); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // expr ::= NOT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.peek().left;
                int e1right = CUP$EtaParser$stack.peek().right;
                Expr e1 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new NotUnop(e1, e1left, e1right); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // expr ::= MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$EtaParser$stack.peek().left;
                int e1right = CUP$EtaParser$stack.peek().right;
                Expr e1 = CUP$EtaParser$stack.peek().<Expr> value();
                 RESULT = new IntegerNegExpr (e1, e1left, e1right);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // expr ::= INTEGER_LITERAL 
            {
                Expr RESULT = null;
                int ileft = CUP$EtaParser$stack.peek().left;
                int iright = CUP$EtaParser$stack.peek().right;
                Long i = CUP$EtaParser$stack.peek().<Long> value();
                 RESULT = new IntLiteral(i,ileft,iright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // expr ::= MINUS MAX_NUM 
            {
                Expr RESULT = null;
                int mleft = CUP$EtaParser$stack.peek().left;
                int mright = CUP$EtaParser$stack.peek().right;
                Object m = CUP$EtaParser$stack.peek().<Object> value();
                 RESULT = new IntLiteral(Long.MIN_VALUE,mleft,mright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // expr ::= CHARACTER_LITERAL 
            {
                Expr RESULT = null;
                int cleft = CUP$EtaParser$stack.peek().left;
                int cright = CUP$EtaParser$stack.peek().right;
                String c = CUP$EtaParser$stack.peek().<String> value();
                 RESULT = new IntLiteral(c, cleft, cright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // expr ::= BOOL_LITERAL 
            {
                Expr RESULT = null;
                int bleft = CUP$EtaParser$stack.peek().left;
                int bright = CUP$EtaParser$stack.peek().right;
                Boolean b = CUP$EtaParser$stack.peek().<Boolean> value();
                 RESULT = new BoolLiteral(b, bleft, bright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // expr ::= STRING_LITERAL 
            {
                Expr RESULT = null;
                int sleft = CUP$EtaParser$stack.peek().left;
                int sright = CUP$EtaParser$stack.peek().right;
                String s = CUP$EtaParser$stack.peek().<String> value();
                 RESULT = new ArrayValueLiteral(s, sleft, sright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // expr ::= IDENTIFIER 
            {
                Expr RESULT = null;
                int idleft = CUP$EtaParser$stack.peek().left;
                int idright = CUP$EtaParser$stack.peek().right;
                String id = CUP$EtaParser$stack.peek().<String> value();
                 RESULT = new Id(id, idleft, idright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // expr ::= OPEN_BRACE CLOSE_BRACE 
            {
                Expr RESULT = null;
                int obleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int obright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Object ob = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Object> value();
                RESULT = new ArrayValueLiteral(new ArrayList<Expr>(), obleft, obright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // expr ::= OPEN_BRACE exprList CLOSE_BRACE 
            {
                Expr RESULT = null;
                int obleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int obright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Object ob = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Object> value();
                int xleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int xright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                ArrayList<Expr> x = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<ArrayList<Expr>> value();
                RESULT = new ArrayValueLiteral(x, obleft, obright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // expr ::= OPEN_BRACE exprList COMMA CLOSE_BRACE 
            {
                Expr RESULT = null;
                int obleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).left;
                int obright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).right;
                Object ob = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).<Object> value();
                int xleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int xright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<Expr> x = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<Expr>> value();
                RESULT = new ArrayValueLiteral(x, obleft, obright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // expr ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int eleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int eright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Expr e = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Expr> value();
                 RESULT = new Length(e, eleft, eright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // expr ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Expr RESULT = null;
                int idleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int idright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                String id = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<String> value();
                 RESULT = new FunctionCallExpr(new Id(id,idleft,idright),new ArrayList<Expr>(), idleft, idright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // expr ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Expr RESULT = null;
                int idleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).left;
                int idright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).right;
                String id = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).<String> value();
                int eleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int eright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                ArrayList<Expr> e = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<ArrayList<Expr>> value();
                 RESULT = new FunctionCallExpr(new Id(id,idleft,idright), e, idleft, idright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // expr ::= expr fullBracketPlus 
            {
                Expr RESULT = null;
                int eleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int eright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Expr e = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Expr> value();
                int ileft = CUP$EtaParser$stack.peek().left;
                int iright = CUP$EtaParser$stack.peek().right;
                ArrayList<Expr> i = CUP$EtaParser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new ArrayAccessExpr(e, i, eleft, eright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("expr",15, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // exprList ::= expr 
            {
                ArrayList<Expr> RESULT = null;
                int xleft = CUP$EtaParser$stack.peek().left;
                int xright = CUP$EtaParser$stack.peek().right;
                Expr x = CUP$EtaParser$stack.peek().<Expr> value();
                
            ArrayList<Expr> temp = new ArrayList<Expr>();
            temp.add(x);
            RESULT = temp;
        
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("exprList",17, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // exprList ::= exprList COMMA expr 
            {
                ArrayList<Expr> RESULT = null;
                int aveleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int averight = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<Expr> ave = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<Expr>> value();
                int xleft = CUP$EtaParser$stack.peek().left;
                int xright = CUP$EtaParser$stack.peek().right;
                Expr x = CUP$EtaParser$stack.peek().<Expr> value();
                 ave.add(x); RESULT = ave; 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("exprList",17, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // stmt ::= declaration_assign_stmt 
            {
                Stmt RESULT = null;
                int dasleft = CUP$EtaParser$stack.peek().left;
                int dasright = CUP$EtaParser$stack.peek().right;
                Stmt das = CUP$EtaParser$stack.peek().<Stmt> value();
                RESULT = das; 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("stmt",18, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // stmt ::= multi_declaration_assign_stmt 
            {
                Stmt RESULT = null;
                int mdasleft = CUP$EtaParser$stack.peek().left;
                int mdasright = CUP$EtaParser$stack.peek().right;
                Stmt mdas = CUP$EtaParser$stack.peek().<Stmt> value();
                RESULT = mdas;
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("stmt",18, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // stmt ::= WHILE expr stmt 
            {
                Stmt RESULT = null;
                int eleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int eright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Expr e = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Expr> value();
                int sleft = CUP$EtaParser$stack.peek().left;
                int sright = CUP$EtaParser$stack.peek().right;
                Stmt s = CUP$EtaParser$stack.peek().<Stmt> value();
                RESULT = new While(e,s,eleft,eright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("stmt",18, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // stmt ::= IF expr stmt 
            {
                Stmt RESULT = null;
                int eleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int eright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Expr e = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Expr> value();
                int sleft = CUP$EtaParser$stack.peek().left;
                int sright = CUP$EtaParser$stack.peek().right;
                Stmt s = CUP$EtaParser$stack.peek().<Stmt> value();
                RESULT = new IfOnly(e,s,eleft,eright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("stmt",18, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // stmt ::= IF expr stmt ELSE stmt 
            {
                Stmt RESULT = null;
                int eleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).left;
                int eright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).right;
                Expr e = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).<Expr> value();
                int s1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int s1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Stmt s1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Stmt> value();
                int s2left = CUP$EtaParser$stack.peek().left;
                int s2right = CUP$EtaParser$stack.peek().right;
                Stmt s2 = CUP$EtaParser$stack.peek().<Stmt> value();
                RESULT = new IfElse(e,s1,s2,eleft,eright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("stmt",18, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // stmt ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Stmt RESULT = null;
                int idleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int idright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                String id = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<String> value();
                 RESULT = new ProcedureCall(new Id(id,idleft,idright),new ArrayList<Expr>(),idleft,idright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("stmt",18, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // stmt ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Stmt RESULT = null;
                int idleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).left;
                int idright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).right;
                String id = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).<String> value();
                int eleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int eright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                ArrayList<Expr> e = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<ArrayList<Expr>> value();
                 RESULT = new ProcedureCall(new Id(id,idleft,idright), e, idleft,idright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("stmt",18, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // stmt ::= block 
            {
                Stmt RESULT = null;
                int bleft = CUP$EtaParser$stack.peek().left;
                int bright = CUP$EtaParser$stack.peek().right;
                Block b = CUP$EtaParser$stack.peek().<Block> value();
                 RESULT = b; 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("stmt",18, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // multi_declaration_assign_stmt ::= type_list GETS exprList 
            {
                Stmt RESULT = null;
                int tlleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int tlright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<Decl> tl = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<Decl>> value();
                int elleft = CUP$EtaParser$stack.peek().left;
                int elright = CUP$EtaParser$stack.peek().right;
                ArrayList<Expr> el = CUP$EtaParser$stack.peek().<ArrayList<Expr>> value();
                RESULT = new MultiDeclAssignStmt(tl,el,tlleft,tlright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("multi_declaration_assign_stmt",21, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // fullBracketAss ::= IDENTIFIER fullBracketPlus 
            {
                ArrAccessDecl RESULT = null;
                int idleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int idright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                String id = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<String> value();
                int fbpleft = CUP$EtaParser$stack.peek().left;
                int fbpright = CUP$EtaParser$stack.peek().right;
                ArrayList<Expr> fbp = CUP$EtaParser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new ArrAccessDecl(new Id(id,idleft,idright), fbp,idleft,idright ); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("fullBracketAss",27, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // fullBracketAss ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN fullBracketPlus 
            {
                ArrAccessDecl RESULT = null;
                int idleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).left;
                int idright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).right;
                String id = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).<String> value();
                int eleft = CUP$EtaParser$stack.peek().left;
                int eright = CUP$EtaParser$stack.peek().right;
                ArrayList<Expr> e = CUP$EtaParser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new ArrAccessDecl(new Id(id,idleft,idright),new ArrayList<Expr>(),e, idleft, idright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("fullBracketAss",27, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // fullBracketAss ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN fullBracketPlus 
            {
                ArrAccessDecl RESULT = null;
                int idleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).left;
                int idright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).right;
                String id = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).<String> value();
                int eleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int eright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<Expr> e = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<Expr>> value();
                int indileft = CUP$EtaParser$stack.peek().left;
                int indiright = CUP$EtaParser$stack.peek().right;
                ArrayList<Expr> indi = CUP$EtaParser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new ArrAccessDecl(new Id(id,idleft,idright), e,indi, idleft, idright); 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("fullBracketAss",27, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // type_list ::= UNDERSCORE COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int uleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int uright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Object u = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Object> value();
                int i2left = CUP$EtaParser$stack.peek().left;
                int i2right = CUP$EtaParser$stack.peek().right;
                String i2 = CUP$EtaParser$stack.peek().<String> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new UnderScore(uleft,uright));
        temp.add(new NoTypeDecl(new Id(i2,i2left,i2right),i2left,i2right));
        RESULT = temp;
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // type_list ::= IDENTIFIER COLON emptyBracketType COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).left;
                int i1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).right;
                String i1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).<String> value();
                int t1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int t1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Type t1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Type> value();
                int uleft = CUP$EtaParser$stack.peek().left;
                int uright = CUP$EtaParser$stack.peek().right;
                Object u = CUP$EtaParser$stack.peek().<Object> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new AnnotatedTypeDecl(new Id(i1,i1left,i1right),t1,i1left,i1right));
        temp.add(new UnderScore(uleft,uright));
        RESULT = temp;
            
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // type_list ::= UNDERSCORE COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int uleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).left;
                int uright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).right;
                Object u = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).<Object> value();
                int i2left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int i2right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                String i2 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<String> value();
                int t2left = CUP$EtaParser$stack.peek().left;
                int t2right = CUP$EtaParser$stack.peek().right;
                Type t2 = CUP$EtaParser$stack.peek().<Type> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new UnderScore(uleft,uright));
        temp.add(new AnnotatedTypeDecl(new Id(i2,i2left,i2right),t2,i2left,i2right));
        RESULT = temp;
                
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // type_list ::= IDENTIFIER COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int i1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                String i1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<String> value();
                int uleft = CUP$EtaParser$stack.peek().left;
                int uright = CUP$EtaParser$stack.peek().right;
                Object u = CUP$EtaParser$stack.peek().<Object> value();
                
            ArrayList<Decl> temp = new ArrayList<Decl>();
            temp.add(new NoTypeDecl(new Id(i1,i1left,i1right),i1left, i1right));
            temp.add(new UnderScore(uleft,uright));
            RESULT = temp;
            
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // type_list ::= UNDERSCORE COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int u1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int u1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Object u1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Object> value();
                int u2left = CUP$EtaParser$stack.peek().left;
                int u2right = CUP$EtaParser$stack.peek().right;
                Object u2 = CUP$EtaParser$stack.peek().<Object> value();
                
            ArrayList<Decl> temp = new ArrayList<Decl>();
            temp.add(new UnderScore(u1left,u1right));
            temp.add(new UnderScore(u2left,u2right));
            RESULT = temp;
            
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // type_list ::= IDENTIFIER COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int i1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                String i1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<String> value();
                int i2left = CUP$EtaParser$stack.peek().left;
                int i2right = CUP$EtaParser$stack.peek().right;
                String i2 = CUP$EtaParser$stack.peek().<String> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new NoTypeDecl(new Id(i1,i1left,i1right),i1left, i1right));
        temp.add(new NoTypeDecl(new Id(i2,i2left,i2right), i2left, i2right));
        RESULT = temp;
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // type_list ::= IDENTIFIER COLON emptyBracketType COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).left;
                int i1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).right;
                String i1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).<String> value();
                int t1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int t1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Type t1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Type> value();
                int i2left = CUP$EtaParser$stack.peek().left;
                int i2right = CUP$EtaParser$stack.peek().right;
                String i2 = CUP$EtaParser$stack.peek().<String> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new AnnotatedTypeDecl(new Id(i1,i1left,i1right),t1,i1left,i1right));
        temp.add(new NoTypeDecl(new Id(i2,i2left,i2right), i2left, i2right));
        RESULT = temp;
            
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // type_list ::= IDENTIFIER COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).left;
                int i1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).right;
                String i1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).<String> value();
                int i2left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int i2right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                String i2 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<String> value();
                int t2left = CUP$EtaParser$stack.peek().left;
                int t2right = CUP$EtaParser$stack.peek().right;
                Type t2 = CUP$EtaParser$stack.peek().<Type> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new NoTypeDecl(new Id(i1,i1left,i1right), i1left, i1right));
        temp.add(new AnnotatedTypeDecl(new Id(i2,i2left,i2right),t2, i2left, i2right));
        RESULT = temp;
                
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // type_list ::= IDENTIFIER COLON emptyBracketType COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-6).left;
                int i1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-6).right;
                String i1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-6).<String> value();
                int t1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).left;
                int t1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).right;
                Type t1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).<Type> value();
                int i2left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int i2right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                String i2 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<String> value();
                int t2left = CUP$EtaParser$stack.peek().left;
                int t2right = CUP$EtaParser$stack.peek().right;
                Type t2 = CUP$EtaParser$stack.peek().<Type> value();
                
            ArrayList<Decl> temp = new ArrayList<Decl>();
            temp.add(new AnnotatedTypeDecl(new Id(i1,i1left,i1right),t1, i1left, i1right));
            temp.add(new AnnotatedTypeDecl(new Id(i2,i2left,i2right),t2, i2left, i2right));
            RESULT = temp;
            
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-6), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // type_list ::= type_list COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int tlleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).left;
                int tlright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).right;
                ArrayList<Decl> tl = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).<ArrayList<Decl>> value();
                int ileft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int iright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                String i = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<String> value();
                int tleft = CUP$EtaParser$stack.peek().left;
                int tright = CUP$EtaParser$stack.peek().right;
                Type t = CUP$EtaParser$stack.peek().<Type> value();
                
        tl.add(new AnnotatedTypeDecl(new Id(i,ileft,iright), t, ileft, iright));
        RESULT = tl;
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // type_list ::= type_list COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int tlleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int tlright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<Decl> tl = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<Decl>> value();
                int ileft = CUP$EtaParser$stack.peek().left;
                int iright = CUP$EtaParser$stack.peek().right;
                String i = CUP$EtaParser$stack.peek().<String> value();
                
        tl.add(new NoTypeDecl(new Id(i,ileft,iright), ileft, iright));
        RESULT = tl;
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // type_list ::= type_list COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int tlleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int tlright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<Decl> tl = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<Decl>> value();
                int uleft = CUP$EtaParser$stack.peek().left;
                int uright = CUP$EtaParser$stack.peek().right;
                Object u = CUP$EtaParser$stack.peek().<Object> value();
                
            tl.add(new UnderScore(uleft,uright));
            RESULT = tl;
        
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // type_list ::= fullBracketAss COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int fbleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int fbright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrAccessDecl fb = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrAccessDecl> value();
                int uleft = CUP$EtaParser$stack.peek().left;
                int uright = CUP$EtaParser$stack.peek().right;
                Object u = CUP$EtaParser$stack.peek().<Object> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
                        temp.add(fb);
                        temp.add(new UnderScore(uleft,uright));
                        RESULT = temp; 
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // type_list ::= UNDERSCORE COMMA fullBracketAss 
            {
                ArrayList<Decl> RESULT = null;
                int uleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int uright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Object u = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Object> value();
                int fbleft = CUP$EtaParser$stack.peek().left;
                int fbright = CUP$EtaParser$stack.peek().right;
                ArrAccessDecl fb = CUP$EtaParser$stack.peek().<ArrAccessDecl> value();
                
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(new UnderScore(uleft,uright));
    temp.add(fb);
    RESULT = temp;
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // type_list ::= fullBracketAss COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int fbleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).left;
                int fbright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).right;
                ArrAccessDecl fb = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).<ArrAccessDecl> value();
                int i1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int i1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                String i1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<String> value();
                int t1left = CUP$EtaParser$stack.peek().left;
                int t1right = CUP$EtaParser$stack.peek().right;
                Type t1 = CUP$EtaParser$stack.peek().<Type> value();
                
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(fb);
    temp.add(new AnnotatedTypeDecl(new Id(i1,i1left,i1right),t1,i1left, i1right));
    RESULT = temp;
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // type_list ::= IDENTIFIER COLON emptyBracketType COMMA fullBracketAss 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).left;
                int i1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).right;
                String i1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).<String> value();
                int t1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int t1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Type t1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Type> value();
                int fbleft = CUP$EtaParser$stack.peek().left;
                int fbright = CUP$EtaParser$stack.peek().right;
                ArrAccessDecl fb = CUP$EtaParser$stack.peek().<ArrAccessDecl> value();
                
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(new AnnotatedTypeDecl(new Id(i1,i1left,i1right),t1, i1left, i1right));
    temp.add(fb);
    RESULT = temp;
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // type_list ::= fullBracketAss COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int fbleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int fbright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrAccessDecl fb = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrAccessDecl> value();
                int i1left = CUP$EtaParser$stack.peek().left;
                int i1right = CUP$EtaParser$stack.peek().right;
                String i1 = CUP$EtaParser$stack.peek().<String> value();
                
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(fb);
    temp.add(new NoTypeDecl(new Id(i1,i1left,i1right), i1left, i1right));
    RESULT = temp;
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // type_list ::= IDENTIFIER COMMA fullBracketAss 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int i1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                String i1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<String> value();
                int fbleft = CUP$EtaParser$stack.peek().left;
                int fbright = CUP$EtaParser$stack.peek().right;
                ArrAccessDecl fb = CUP$EtaParser$stack.peek().<ArrAccessDecl> value();
                
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(new NoTypeDecl(new Id(i1,i1left,i1right), i1left, i1right));
    temp.add(fb);
    RESULT = temp;
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // type_list ::= fullBracketAss COMMA fullBracketAss 
            {
                ArrayList<Decl> RESULT = null;
                int fb1left = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int fb1right = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrAccessDecl fb1 = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrAccessDecl> value();
                int fb2left = CUP$EtaParser$stack.peek().left;
                int fb2right = CUP$EtaParser$stack.peek().right;
                ArrAccessDecl fb2 = CUP$EtaParser$stack.peek().<ArrAccessDecl> value();
                
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(fb1);
    temp.add(fb2);
    RESULT = temp;
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // type_list ::= type_list COMMA fullBracketAss 
            {
                ArrayList<Decl> RESULT = null;
                int tlleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int tlright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<Decl> tl = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<Decl>> value();
                int fbleft = CUP$EtaParser$stack.peek().left;
                int fbright = CUP$EtaParser$stack.peek().right;
                ArrAccessDecl fb = CUP$EtaParser$stack.peek().<ArrAccessDecl> value();
                
    tl.add(fb);
    RESULT = tl;
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("type_list",23, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // declaration_assign_stmt ::= emptyBracketDecl GETS expr 
            {
                Stmt RESULT = null;
                int dleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int dright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                AnnotatedTypeDecl d = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<AnnotatedTypeDecl> value();
                int gleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int gright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Object g = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Object> value();
                int eleft = CUP$EtaParser$stack.peek().left;
                int eright = CUP$EtaParser$stack.peek().right;
                Expr e = CUP$EtaParser$stack.peek().<Expr> value();
                 // ANNOTATED
    if (!d.type.dimensions.allEmpty) {
        throw new SyntaxError(gleft, gright,"array with init len no Val");
    }
    RESULT = new DeclAssignStmt(d,e,gleft,gright);
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",20, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // declaration_assign_stmt ::= emptyBracketDecl 
            {
                Stmt RESULT = null;
                int dleft = CUP$EtaParser$stack.peek().left;
                int dright = CUP$EtaParser$stack.peek().right;
                AnnotatedTypeDecl d = CUP$EtaParser$stack.peek().<AnnotatedTypeDecl> value();
                RESULT = new DeclNoAssignStmt(d,dleft,dright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",20, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // declaration_assign_stmt ::= IDENTIFIER GETS expr 
            {
                Stmt RESULT = null;
                int idleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int idright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                String id = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<String> value();
                int gleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int gright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Object g = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Object> value();
                int eleft = CUP$EtaParser$stack.peek().left;
                int eright = CUP$EtaParser$stack.peek().right;
                Expr e = CUP$EtaParser$stack.peek().<Expr> value();
                
        NoTypeDecl tempDec = new NoTypeDecl(new Id(id,idleft,idright),idleft,idright);
        RESULT = new DeclAssignStmt(tempDec,e,gleft,gright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",20, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 111: // declaration_assign_stmt ::= UNDERSCORE GETS expr 
            {
                Stmt RESULT = null;
                int uleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int uright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Object u = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Object> value();
                int gleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int gright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Object g = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Object> value();
                int eleft = CUP$EtaParser$stack.peek().left;
                int eright = CUP$EtaParser$stack.peek().right;
                Expr e = CUP$EtaParser$stack.peek().<Expr> value();
                
        UnderScore tempUnder = new UnderScore(uleft,uright);
        RESULT = new DeclAssignStmt(tempUnder,e,gleft,gright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",20, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 112: // declaration_assign_stmt ::= fullBracketType GETS expr 
            {
                Stmt RESULT = null;
                int dleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int dright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrAccessDecl d = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrAccessDecl> value();
                int eleft = CUP$EtaParser$stack.peek().left;
                int eright = CUP$EtaParser$stack.peek().right;
                Expr e = CUP$EtaParser$stack.peek().<Expr> value();
                
    RESULT = new DeclAssignStmt(d,e,dleft,dright);
    
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",20, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 113: // block ::= OPEN_BRACE statement_star CLOSE_BRACE 
            {
                Block RESULT = null;
                int obleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int obright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Object ob = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Object> value();
                int ssleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int ssright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                ArrayList<Stmt> ss = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<ArrayList<Stmt>> value();
                RESULT = new Block(ss,obleft,obright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("block",16, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 114: // block ::= OPEN_BRACE statement_star SEMICOLON CLOSE_BRACE 
            {
                Block RESULT = null;
                int obleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).left;
                int obright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).right;
                Object ob = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).<Object> value();
                int ssleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int ssright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<Stmt> ss = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<Stmt>> value();
                RESULT = new Block(ss,obleft,obright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("block",16, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 115: // block ::= OPEN_BRACE statement_star SEMICOLON return CLOSE_BRACE 
            {
                Block RESULT = null;
                int obleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).left;
                int obright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).right;
                Object ob = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).<Object> value();
                int ssleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).left;
                int ssright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).right;
                ArrayList<Stmt> ss = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).<ArrayList<Stmt>> value();
                int rleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int rright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Return r = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Return> value();
                ss.add(r); RESULT = new Block(ss,obleft,obright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("block",16, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 116: // block ::= OPEN_BRACE statement_star return SEMICOLON CLOSE_BRACE 
            {
                Block RESULT = null;
                int obleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).left;
                int obright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).right;
                Object ob = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).<Object> value();
                int ssleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).left;
                int ssright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).right;
                ArrayList<Stmt> ss = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).<ArrayList<Stmt>> value();
                int rleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int rright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Return r = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Return> value();
                ss.add(r); RESULT = new Block(ss,obleft,obright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("block",16, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 117: // block ::= OPEN_BRACE statement_star return CLOSE_BRACE 
            {
                Block RESULT = null;
                int obleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).left;
                int obright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).right;
                Object ob = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3).<Object> value();
                int ssleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int ssright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<Stmt> ss = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<Stmt>> value();
                int rleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int rright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Return r = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Return> value();
                ss.add(r); RESULT = new Block(ss,obleft,obright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("block",16, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-3), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 118: // block ::= OPEN_BRACE statement_star SEMICOLON return SEMICOLON CLOSE_BRACE 
            {
                Block RESULT = null;
                int obleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-5).left;
                int obright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-5).right;
                Object ob = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-5).<Object> value();
                int ssleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).left;
                int ssright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).right;
                ArrayList<Stmt> ss = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-4).<ArrayList<Stmt>> value();
                int rleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int rright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                Return r = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<Return> value();
                ss.add(r); RESULT = new Block(ss,obleft,obright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("block",16, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-5), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 119: // statement_star ::= statement_star stmt 
            {
                ArrayList<Stmt> RESULT = null;
                int ssleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int ssright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                ArrayList<Stmt> ss = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<ArrayList<Stmt>> value();
                int sleft = CUP$EtaParser$stack.peek().left;
                int sright = CUP$EtaParser$stack.peek().right;
                Stmt s = CUP$EtaParser$stack.peek().<Stmt> value();
                 ss.add(s); RESULT = ss;
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("statement_star",19, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 120: // statement_star ::= statement_star SEMICOLON stmt 
            {
                ArrayList<Stmt> RESULT = null;
                int ssleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).left;
                int ssright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).right;
                ArrayList<Stmt> ss = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2).<ArrayList<Stmt>> value();
                int sleft = CUP$EtaParser$stack.peek().left;
                int sright = CUP$EtaParser$stack.peek().right;
                Stmt s = CUP$EtaParser$stack.peek().<Stmt> value();
                 ss.add(s); RESULT = ss;
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("statement_star",19, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-2), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 121: // statement_star ::= 
            {
                ArrayList<Stmt> RESULT = null;
                RESULT = new ArrayList<Stmt>();
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("statement_star",19, CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 122: // return ::= RETURN exprList 
            {
                Return RESULT = null;
                int rleft = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).left;
                int rright = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).right;
                Object r = CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1).<Object> value();
                int elleft = CUP$EtaParser$stack.peek().left;
                int elright = CUP$EtaParser$stack.peek().right;
                ArrayList<Expr> el = CUP$EtaParser$stack.peek().<ArrayList<Expr>> value();
                RESULT = new Return(el,rleft,rright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("return",22, CUP$EtaParser$stack.elementAt(CUP$EtaParser$top-1), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 123: // return ::= RETURN 
            {
                Return RESULT = null;
                int rleft = CUP$EtaParser$stack.peek().left;
                int rright = CUP$EtaParser$stack.peek().right;
                Object r = CUP$EtaParser$stack.peek().<Object> value();
                RESULT = new Return(new ArrayList<Expr>(),rleft,rright);
                CUP$EtaParser$result = parser.getSymbolFactory().newSymbol("return",22, CUP$EtaParser$stack.peek(), CUP$EtaParser$stack.peek(), RESULT);
            }
            return CUP$EtaParser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$EtaParser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$EtaParser$do_action(
            int                        CUP$EtaParser$act_num,
            java_cup.runtime.lr_parser CUP$EtaParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$EtaParser$stack,
            int                        CUP$EtaParser$top)
            throws java.lang.Exception {
            return CUP$EtaParser$do_action_part00000000(
                           CUP$EtaParser$act_num,
                           CUP$EtaParser$parser,
                           CUP$EtaParser$stack,
                           CUP$EtaParser$top);
    }
}

}
