// A stub for an Eta CUP specification.
package aar226_akc55_ayc62_ahl88;

import java_cup.runtime.*;
import aar226_akc55_ayc62_ahl88.newast.*;
import java.util.ArrayList;

// You might want to add types to these declarations.
parser EtaParser {:
    public void syntax_error(Symbol cur_token){
        throw new Error(cur_token.left + ":" + cur_token.right + " error: Parsing error " + cur_token.value());
    }
:};

terminal String     IDENTIFIER;
terminal String     STRING_LITERAL;
terminal String     CHARACTER_LITERAL;
terminal Long       INTEGER_LITERAL;
terminal Boolean    BOOL_LITERAL;
terminal            INT, BOOL;

terminal IF, ELSE, WHILE, BREAK, RETURN, USE, LENGTH, PLUS, MINUS, TIMES, HI_MULT,
  DIVIDE, MODULO, NOT, LT, LEQ, GT, GEQ, AND, OR, EQUAL, NOT_EQUAL, GETS,
  OPEN_BRACKET, CLOSE_BRACKET, OPEN_PAREN, CLOSE_PAREN, OPEN_BRACE, CLOSE_BRACE,
  COLON, COMMA, SEMICOLON, UNDERSCORE, UMINUS,MAX_NUM;

nonterminal Program                 program;
nonterminal ArrayList<Use>          importUseStar;
nonterminal Use                     use_component;
nonterminal ArrayList<Definition>   definitionStar;
nonterminal Definition              definition;
nonterminal Method                  method;
nonterminal ArrayList<Decl>         emptyBracketDecl_star;
nonterminal Decl                    emptyBracketDecl;
nonterminal ArrayList<Type>         emptyBracketType_plus;
nonterminal Type                    emptyBracketType;
nonterminal Dimension               emptyDimension_star;
nonterminal Definition              globalDecl;
nonterminal Value                   value;
nonterminal Expr                    expr;
nonterminal Block                   block;
nonterminal ArrayList<Expr>         exprList;
nonterminal Stmt                    stmt;
nonterminal ArrayList<Stmt>         statement_star;
nonterminal Stmt                    declaration_assign_stmt;
nonterminal Stmt                    multi_declaration_assign_stmt;
nonterminal Return                  return;
nonterminal ArrayList<Decl>         type_list;
nonterminal ArrayList<Expr>         fullBracketPlus;
nonterminal ArrayAccess             fullBracketType;
nonterminal ArrayList<Value>        valueList;
nonterminal MultiGlobalDecl         glob_multi_declaration_assign_stmt;
nonterminal ArrayAccess             fullBracketAss;

precedence nonassoc IF;
precedence nonassoc ELSE;
// function call
precedence left OR;
precedence left AND;
precedence left EQUAL,NOT_EQUAL;
precedence left LT,LEQ,GEQ,GT;
precedence left PLUS,MINUS;
precedence left TIMES,HI_MULT,DIVIDE,MODULO;
precedence nonassoc NOT, UMINUS;// ??? negation?
precedence left OPEN_BRACKET,CLOSE_BRACKET,OPEN_PAREN,CLOSE_PAREN;

start with program;

program ::= importUseStar:ius definitionStar:dl {:
    RESULT = new Program(ius, dl);:}
    ;

importUseStar ::=
    importUseStar:ius use_component:u {: ius.add(u); RESULT = ius; :}
    | {: RESULT = new ArrayList<Use>(); :}
    ;

use_component::=
      USE IDENTIFIER:i           {: RESULT = new Use(i, ileft, iright); :}
    | USE IDENTIFIER:i SEMICOLON {: RESULT = new Use(i, ileft, iright); :}
    ;

definitionStar ::=
    definitionStar:ds definition:d {:ds.add(d); RESULT = ds; :}
    | {: RESULT = new ArrayList<Definition>(); :}
    ;

definition ::=
    method:m {: RESULT = m; :}
    | globalDecl:gd {: RESULT = gd; :}
    ;

method ::= // Id b
    IDENTIFIER:i OPEN_PAREN emptyBracketDecl_star:ds CLOSE_PAREN COLON emptyBracketType_plus:ts block:b{:
    RESULT = new Method(i,ds,ts,b,);
    :}
    | IDENTIFIER:i OPEN_PAREN emptyBracketDecl_star:ds CLOSE_PAREN block:b {: // Block b
        RESULT = new Method(i,ds,new ArrayList<Type>(),b); // NONE
    :}
    ;

emptyBracketDecl_star ::=
    emptyBracketDecl_star:declstar COMMA emptyBracketDecl:d {:declstar.add(d); RESULT = declstar; :}
    |emptyBracketDecl:d {:ArrayList<Decl> temp = new ArrayList<Decl>();
      temp.add(d);
      RESULT = temp;
      :}
    | {: RESULT = new ArrayList<Decl>();:}
    ;

emptyBracketDecl ::=
    IDENTIFIER:i COLON emptyBracketType:t {: RESULT = new Decl(i,t); :}
    ;

fullBracketType::=
    IDENTIFIER: i fullBracketPlus:e {:System.out.println("IM HERE"); Id a = new Id(i); RESULT = new ArrayAccess(a,e, true);:}
 ;

fullBracketPlus ::=
    fullBracketPlus:ts OPEN_BRACKET expr:e CLOSE_BRACKET {: ts.add(e); System.out.println(ts.toString()); RESULT = ts; :}
   | OPEN_BRACKET expr:e CLOSE_BRACKET {: ArrayList<Expr> exprList = new ArrayList<Expr>();
                         exprList.add(e);
                         RESULT = exprList;
                         :}
    ;

globalDecl ::=
    emptyBracketDecl:ed {:RESULT = new Globdecl(ed, null);:}
    | emptyBracketDecl:ed GETS:g value:v {:
        if (!ed.type.dimensions.allEmpty) {
            throw new Error(gleft +":" + gright +" "  + "array with init len no Val");
        }
        if (ed.type.dimensions.getDim() != 0){
            throw new Error(gleft +":" + gright +" " + "global arr not init allowed");
        }
        RESULT  = new Globdecl(ed, v);
    :}
    | globalDecl:gd SEMICOLON {:RESULT = gd;:}
    ;

emptyBracketType_plus ::=
    emptyBracketType_plus:ts COMMA emptyBracketType:t {: ts.add(t); RESULT = ts; :}
    | emptyBracketType:t {: ArrayList<Type> typeList = new ArrayList<Type>();
                      typeList.add(t);
                      RESULT = typeList;
                      :}
    ;

emptyBracketType ::=
   INT  emptyDimension_star:d {:RESULT = new Type(true,d); :}
 | BOOL emptyDimension_star:d {:RESULT = new Type(false,d); :}
 ;

emptyDimension_star ::=
    emptyDimension_star:ds OPEN_BRACKET CLOSE_BRACKET {:
    ds.increment();
    ds.foundEmpty = true;
    ds.indices.add(null);
    RESULT = ds;:}
    |emptyDimension_star:ds OPEN_BRACKET INTEGER_LITERAL:i CLOSE_BRACKET {:
        if (ds.foundEmpty) throw new Error(ileft + ":" + iright  + " Filled index after empty");
        ds.allEmpty = false;
        IntLiteral iL = new IntLiteral(i,true,ileft,iright);
        ds.indices.add(iL);
        ds.increment(); // [][2]
        RESULT = ds;:}
    |emptyDimension_star:ds OPEN_BRACKET IDENTIFIER:i CLOSE_BRACKET {:
        if (ds.foundEmpty) throw new Error(ileft + ":" + iright  + " Filled index after empty");
        ds.allEmpty = false;
        ds.indices.add(new Id(i));
        ds.increment(); // [][2]
        RESULT = ds;:}
    | {:RESULT = new Dimension(0); :}
    ;

expr ::=
    // ignore Paren
    OPEN_PAREN expr:e1 CLOSE_PAREN {:RESULT = e1;:}

    //BINOP
    |  expr:e1 TIMES     expr:e2  {: RESULT = new TimesBinop(e1, e2, e1left, e1right); :}
    |  expr:e1 HI_MULT   expr:e2  {: RESULT = new Hi_MultBinop(e1, e2, e1left, e1right); :}
    |  expr:e1 DIVIDE    expr:e2  {: RESULT = new DivideBinop(e1, e2, e1left, e1right); :}
    |  expr:e1 MODULO    expr:e2  {: RESULT = new ModuloBinop(e1, e2, e1left, e1right); :}
    |  expr:e1 PLUS      expr:e2  {: RESULT = new PlusBinop(e1, e2, e1left, e1right); :}
    |  expr:e1 MINUS     expr:e2  {: RESULT = new MinusBinop(e1, e2, e1left, e1right); :}
    |  expr:e1 LT        expr:e2  {: RESULT = new LtBinop(e1, e2, e1left, e1right); :}
    |  expr:e1 LEQ       expr:e2  {: RESULT = new LeqBinop(e1, e2, e1left, e1right); :}
    |  expr:e1 GT        expr:e2  {: RESULT = new GtBinop(e1, e2, e1left, e1right); :}
    |  expr:e1 GEQ       expr:e2  {: RESULT = new GeqBinop(e1, e2, e1left, e1right); :}
    |  expr:e1 EQUAL     expr:e2  {: RESULT = new EqualsBinop(e1, e2, e1left, e1right); :}
    |  expr:e1 NOT_EQUAL expr:e2  {: RESULT = new NotEqualsBinop(e1, e2, e1left, e1right); :}
    |  expr:e1 AND       expr:e2  {: RESULT = new AndBinop(e1, e2, e1left, e1right); :}
    |  expr:e1 OR        expr:e2  {: RESULT = new OrBinop(e1, e2, e1left, e1right); :}

    // UNOP
    |  NOT               expr:e1  {: RESULT = new NotUnop(e1, e1left, e1right); :}
    |  MINUS expr:e1              {: RESULT = new IntegerNegExpr (e1, e1left, e1right);:} %prec UMINUS // IF ITS INT CONVER TO NEG

    // LITS
    | INTEGER_LITERAL:i           {: RESULT = new IntLiteral(i,true,ileft,iright); :}
    | MINUS MAX_NUM:m             {: RESULT = new IntLiteral(Long.MIN_VALUE,false,mleft,mright);:}
    | CHARACTER_LITERAL:c         {: RESULT = new IntLiteral(c, cleft, cright); :}// Create as INT cause Chars are ints
    | BOOL_LITERAL:b              {: RESULT = new BoolLiteral(b, bleft, bright); :}
    | STRING_LITERAL:s            {: RESULT = new ArrayValueLiteral(s, sleft, sright); :}

    // IDS
    | IDENTIFIER:id {: RESULT = new Id(id, idleft, idright); :}

    // ARRAY LITERALS
    | OPEN_BRACE:ob CLOSE_BRACE {:RESULT = new ArrayValueLiteral(new ArrayList<Expr>(), obleft, obright);:}
    | OPEN_BRACE exprList:x CLOSE_BRACE {:RESULT = new ArrayValueLiteral(x);:}
    | OPEN_BRACE exprList:x COMMA CLOSE_BRACE {:RESULT = new ArrayValueLiteral(x); :}

    // Functions
    |  LENGTH OPEN_PAREN expr:e CLOSE_PAREN {: RESULT = new Length(e); :}
    | IDENTIFIER:id OPEN_PAREN CLOSE_PAREN {: RESULT = new FunctionCallExpr(id,new ArrayList<Expr>() ); :}
    | IDENTIFIER:id OPEN_PAREN exprList:e CLOSE_PAREN {: RESULT = new FunctionCallExpr(id, e); :}
    | expr:e fullBracketPlus:i {: RESULT = new ArrayAccess(e, i, false); :}
    ;


exprList ::=
    expr:x {:
            ArrayList<Expr> temp = new ArrayList<Expr>();
            temp.add(x);
            RESULT = temp;
        :}
    |  exprList:ave COMMA expr:x {: ave.add(x); RESULT = ave; :}
;

stmt ::=

    // single or multiple TODO a = 4
    declaration_assign_stmt:das {:RESULT = das; :}

    | multi_declaration_assign_stmt:mdas {:RESULT = mdas;:}
    | WHILE expr:e stmt:s {:RESULT = new While(e,s);:}
    | IF expr:e stmt:s {:RESULT = new IfOnly(e,s);:}
    | IF expr:e stmt:s1 ELSE stmt:s2 {:RESULT = new IfElse(e,s1,s2);:}
    | IDENTIFIER:id OPEN_PAREN CLOSE_PAREN {: RESULT = new Procedure(id,new ArrayList<Expr>() ); :}
    | IDENTIFIER:id OPEN_PAREN exprList:e CLOSE_PAREN {: RESULT = new Procedure(id, e); :}
    | block:b {: RESULT = b; :}
;

multi_declaration_assign_stmt ::=
    type_list:tl GETS exprList:el {:RESULT = new MultiDeclStmt(tl,el);:}
;

fullBracketAss ::= IDENTIFIER:id fullBracketPlus:fbp {: RESULT = new ArrayAccess(new Id(id), fbp, false); :};

type_list ::=
    UNDERSCORE COMMA IDENTIFIER:i2 {:
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new UnderScore());
        temp.add(new Decl(i2));
        RESULT = temp;
    :}
    |IDENTIFIER:i1 COLON emptyBracketType:t1 COMMA UNDERSCORE {:
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new Decl(i1,t1));
        temp.add(new UnderScore());
        RESULT = temp;
            :}
    |UNDERSCORE COMMA IDENTIFIER:i2 COLON emptyBracketType:t2 {:
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new UnderScore());
        temp.add(new Decl(i2,t2));
        RESULT = temp;
                :}
    |IDENTIFIER:i1 COMMA UNDERSCORE {:
            ArrayList<Decl> temp = new ArrayList<Decl>();
            temp.add(new Decl(i1));
            temp.add(new UnderScore());
            RESULT = temp;
            :}
    |UNDERSCORE COMMA UNDERSCORE {:
            ArrayList<Decl> temp = new ArrayList<Decl>();
            temp.add(new UnderScore());
            temp.add(new UnderScore());
            RESULT = temp;
            :}
    |IDENTIFIER:i1 COMMA IDENTIFIER:i2 {:
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new Decl(i1));
        temp.add(new Decl(i2));
        RESULT = temp;
    :}
    |IDENTIFIER:i1 COLON emptyBracketType:t1 COMMA IDENTIFIER:i2 {:
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new Decl(i1,t1));
        temp.add(new Decl(i2));
        RESULT = temp;
            :}
    |IDENTIFIER:i1 COMMA IDENTIFIER:i2 COLON emptyBracketType:t2 {:
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new Decl(i1));
        temp.add(new Decl(i2,t2));
        RESULT = temp;
                :}
    |IDENTIFIER:i1 COLON emptyBracketType:t1 COMMA IDENTIFIER:i2 COLON emptyBracketType:t2 {:
            ArrayList<Decl> temp = new ArrayList<Decl>();
            temp.add(new Decl(i1,t1));
            temp.add(new Decl(i2,t2));
            RESULT = temp;
            :}
    |type_list:tl COMMA IDENTIFIER:i COLON emptyBracketType:t {:
        tl.add(new Decl(i,t));
        RESULT = tl;
    :}
    | type_list:tl COMMA IDENTIFIER:i {:
        tl.add(new Decl(i));
        RESULT = tl;
    :}
    | type_list:tl COMMA UNDERSCORE {:
            tl.add(new UnderScore());
            RESULT = tl;
        :}

    |fullBracketAss:fb  COMMA UNDERSCORE {:
        ArrayList<Decl> temp = new ArrayList<Decl>();
                        temp.add(new Decl(fb));
                        temp.add(new UnderScore());
                        RESULT = temp; :}
    | UNDERSCORE COMMA fullBracketAss:fb{:
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(new UnderScore());
    temp.add(new Decl(fb));
    RESULT = temp;
    :}
    |fullBracketAss:fb COMMA IDENTIFIER:i1 COLON emptyBracketType:t1 {:
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(new Decl(fb));
    temp.add(new Decl(i1,t1));
    RESULT = temp;
    :}
    | IDENTIFIER:i1 COLON emptyBracketType:t1 COMMA fullBracketAss:fb{:
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(new Decl(i1,t1));
    temp.add(new Decl(fb));
    RESULT = temp;
    :}
    |fullBracketAss:fb COMMA IDENTIFIER:i1 {:
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(new Decl(fb));
    temp.add(new Decl(i1));
    RESULT = temp;
    :}
    | IDENTIFIER:i1 COMMA fullBracketAss:fb{:
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(new Decl(i1));
    temp.add(new Decl(fb));
    RESULT = temp;
    :}
    | fullBracketAss:fb1 COMMA fullBracketAss:fb2{:
    ArrayList<Decl> temp = new ArrayList<Decl>();
    temp.add(new Decl(fb1));
    temp.add(new Decl(fb2));
    RESULT = temp;
    :}
    | type_list:tl COMMA fullBracketAss:fb {:
    tl.add(new Decl(fb));
    RESULT = tl;
    :}
;
declaration_assign_stmt ::=
    emptyBracketDecl:d GETS:g expr:e {:
    if (!d.type.dimensions.allEmpty) {
        throw new Error(gleft + ":" + gright + " array with init len no Val");
    }
    RESULT = new DeclStmt(d,e);
    :}
    | emptyBracketDecl:d {:RESULT = new DeclStmt(d,null);:}
    | IDENTIFIER:id GETS expr:e {: RESULT = new Reassignment(id,e);:}
    | UNDERSCORE GETS expr:e {:RESULT = new DeclStmt(new UnderScore(),e);:}
    | fullBracketType:d GETS expr:e {: System.out.println("we in reassign"); RESULT = new Reassignment(d,e);:}
;

block ::=
    OPEN_BRACE statement_star:ss CLOSE_BRACE {:RESULT = new Block(ss);:}
    |OPEN_BRACE statement_star:ss SEMICOLON CLOSE_BRACE {:RESULT = new Block(ss);:}
    |OPEN_BRACE statement_star:ss SEMICOLON return:r CLOSE_BRACE{:ss.add(r); RESULT = new Block(ss);:}
    |OPEN_BRACE statement_star:ss return:r SEMICOLON CLOSE_BRACE{:ss.add(r); RESULT = new Block(ss);:}
    |OPEN_BRACE statement_star:ss return:r CLOSE_BRACE{:ss.add(r); RESULT = new Block(ss);:}
    |OPEN_BRACE statement_star:ss SEMICOLON return:r SEMICOLON CLOSE_BRACE{:ss.add(r); RESULT = new Block(ss);:}
;

return ::=
      RETURN exprList:el {:RESULT = new Return(el);:}
      | RETURN {:RESULT = new Return(new ArrayList<Expr>());:}
;
statement_star ::=
    statement_star:ss stmt:s {: ss.add(s); RESULT = ss;:}
    |statement_star:ss SEMICOLON stmt:s {: ss.add(s); RESULT = ss;:}
    | {:RESULT = new ArrayList<Stmt>();:}
;