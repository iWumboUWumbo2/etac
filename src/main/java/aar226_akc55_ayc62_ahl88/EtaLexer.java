/* The following code was generated by JFlex 1.6.1 */

package aar226_akc55_ayc62_ahl88;
import org.apache.commons.text.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./src/main/java/aar226_akc55_ayc62_ahl88/etalex.flex</tt>
 */
public class EtaLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CHARACTER = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\33\1\55"+
    "\2\0\1\36\1\42\1\7\1\47\1\50\1\34\1\37\1\46\1\32"+
    "\1\0\1\22\1\10\11\5\1\44\1\45\1\40\1\41\1\35\2\0"+
    "\6\11\24\4\1\51\1\56\1\52\1\0\1\6\1\0\1\17\1\25"+
    "\2\11\1\15\1\16\1\31\1\30\1\23\2\4\1\20\1\4\1\24"+
    "\1\26\2\4\1\13\1\21\1\12\1\14\1\4\1\27\1\57\2\4"+
    "\1\53\1\43\1\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\4\1\5\1\3\6\2"+
    "\1\6\3\2\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\3\33\1\34"+
    "\2\35\1\36\1\34\6\2\1\0\1\37\3\2\1\40"+
    "\1\0\1\41\1\42\1\43\1\44\5\0\1\45\1\46"+
    "\1\47\1\50\1\0\2\2\1\51\3\2\2\52\1\53"+
    "\2\2\1\54\1\55\1\56\1\57\1\60\2\0\1\61"+
    "\1\2\1\62\1\2\1\63\1\2\2\0\2\2\1\64"+
    "\3\0\1\65\1\66\1\67\1\0\1\70\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\300"+
    "\0\300\0\300\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240"+
    "\0\u0270\0\u02a0\0\u02d0\0\u0300\0\300\0\u0330\0\u0360\0\u0390"+
    "\0\300\0\300\0\u03c0\0\u03f0\0\300\0\300\0\300\0\300"+
    "\0\300\0\300\0\300\0\300\0\300\0\300\0\300\0\300"+
    "\0\u0420\0\300\0\u0450\0\300\0\u0480\0\300\0\300\0\u04b0"+
    "\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\360"+
    "\0\u0630\0\u0660\0\u0690\0\300\0\u06c0\0\300\0\300\0\300"+
    "\0\300\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\300\0\300"+
    "\0\300\0\300\0\u07e0\0\u0810\0\u0840\0\360\0\u0870\0\u08a0"+
    "\0\u08d0\0\u0900\0\300\0\360\0\u0930\0\u0960\0\300\0\300"+
    "\0\300\0\300\0\300\0\u0990\0\u09c0\0\360\0\u09f0\0\360"+
    "\0\u0a20\0\360\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\360"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\300\0\360\0\360\0\u0bd0\0\300"+
    "\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\6\1\13\1\14\1\15\1\16\1\17\1\6\1\20"+
    "\1\6\1\21\1\22\1\6\1\23\1\6\1\24\2\6"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\0\1\6\1\51\2\52"+
    "\4\51\1\52\46\51\1\53\1\51\1\54\1\55\1\56"+
    "\52\54\1\57\1\60\1\54\2\0\1\5\141\0\16\6"+
    "\1\0\7\6\25\0\1\6\5\0\1\7\2\0\1\7"+
    "\53\0\7\6\1\61\6\6\1\0\7\6\25\0\1\6"+
    "\4\0\11\6\1\62\4\6\1\0\7\6\25\0\1\6"+
    "\4\0\15\6\1\63\1\0\7\6\25\0\1\6\4\0"+
    "\14\6\1\64\1\6\1\0\7\6\25\0\1\6\4\0"+
    "\13\6\1\65\2\6\1\0\7\6\25\0\1\6\4\0"+
    "\11\6\1\66\4\6\1\0\7\6\25\0\1\6\22\0"+
    "\1\67\41\0\12\6\1\70\3\6\1\0\1\6\1\71"+
    "\5\6\25\0\1\6\4\0\16\6\1\0\3\6\1\72"+
    "\3\6\25\0\1\6\4\0\16\6\1\0\5\6\1\73"+
    "\1\6\25\0\1\6\41\0\1\74\53\0\1\75\63\0"+
    "\1\76\57\0\1\77\57\0\1\100\25\0\1\101\57\0"+
    "\1\102\2\0\1\103\11\0\1\104\31\0\1\105\1\106"+
    "\2\0\1\56\67\0\1\107\11\0\1\110\30\0\1\111"+
    "\1\112\1\113\4\0\10\6\1\114\5\6\1\0\7\6"+
    "\25\0\1\6\4\0\6\6\1\115\7\6\1\0\7\6"+
    "\25\0\1\6\4\0\11\6\1\116\4\6\1\0\7\6"+
    "\25\0\1\6\4\0\15\6\1\117\1\0\7\6\25\0"+
    "\1\6\4\0\14\6\1\120\1\6\1\0\7\6\25\0"+
    "\1\6\4\0\16\6\1\0\1\6\1\121\5\6\25\0"+
    "\1\6\1\67\1\122\1\123\55\67\4\0\6\6\1\124"+
    "\7\6\1\0\7\6\25\0\1\6\4\0\16\6\1\0"+
    "\3\6\1\125\3\6\25\0\1\6\4\0\16\6\1\0"+
    "\1\126\6\6\25\0\1\6\35\0\1\127\31\0\1\130"+
    "\57\0\1\131\57\0\1\132\57\0\1\133\123\0\1\134"+
    "\57\0\1\135\10\0\11\6\1\136\4\6\1\0\7\6"+
    "\25\0\1\6\4\0\10\6\1\137\5\6\1\0\7\6"+
    "\25\0\1\6\4\0\11\6\1\140\4\6\1\0\7\6"+
    "\25\0\1\6\4\0\15\6\1\114\1\0\7\6\25\0"+
    "\1\6\4\0\16\6\1\0\6\6\1\141\25\0\1\6"+
    "\2\0\1\123\61\0\14\6\1\142\1\6\1\0\7\6"+
    "\25\0\1\6\4\0\14\6\1\143\1\6\1\0\7\6"+
    "\25\0\1\6\5\0\1\144\2\0\2\144\3\0\3\144"+
    "\5\0\1\144\37\0\1\145\2\0\2\145\3\0\3\145"+
    "\5\0\1\145\36\0\7\6\1\146\6\6\1\0\7\6"+
    "\25\0\1\6\4\0\6\6\1\147\7\6\1\0\7\6"+
    "\25\0\1\6\4\0\11\6\1\150\4\6\1\0\7\6"+
    "\25\0\1\6\5\0\1\151\2\0\2\151\3\0\3\151"+
    "\5\0\1\151\26\0\1\152\10\0\1\153\2\0\2\153"+
    "\3\0\3\153\5\0\1\153\26\0\1\154\7\0\16\6"+
    "\1\0\1\6\1\155\5\6\25\0\1\6\4\0\16\6"+
    "\1\0\5\6\1\156\1\6\25\0\1\6\5\0\1\157"+
    "\2\0\2\157\3\0\3\157\5\0\1\157\26\0\1\152"+
    "\12\0\1\160\55\0\1\161\2\0\2\161\3\0\3\161"+
    "\5\0\1\161\26\0\1\154\10\0\1\162\2\0\2\162"+
    "\3\0\3\162\5\0\1\162\26\0\1\152\10\0\1\163"+
    "\2\0\2\163\3\0\3\163\5\0\1\163\26\0\1\154"+
    "\10\0\1\164\2\0\2\164\3\0\3\164\5\0\1\164"+
    "\26\0\1\152\10\0\1\165\2\0\2\165\3\0\3\165"+
    "\5\0\1\165\26\0\1\154\10\0\1\166\2\0\2\166"+
    "\3\0\3\166\5\0\1\166\26\0\1\152\10\0\1\167"+
    "\2\0\2\167\3\0\3\167\5\0\1\167\26\0\1\154"+
    "\57\0\1\152\57\0\1\154\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3408];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\2\1\3\11\12\1\1\11\3\1"+
    "\2\11\2\1\14\11\1\1\1\11\1\1\1\11\1\1"+
    "\2\11\7\1\1\0\4\1\1\11\1\0\4\11\5\0"+
    "\4\11\1\0\7\1\1\11\3\1\5\11\2\0\6\1"+
    "\2\0\3\1\3\0\1\11\2\1\1\0\1\11\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    enum TokenType {
      // keywords
      USE,
      IF,
      WHILE,
      ELSE,
      RETURN,
      LENGTH,

      ID,

      INT_LITERAL,
      INT_TYPE,

      BOOL_LITERAL,
      BOOL_TYPE,

      CHAR_LITERAL,
      STRING_LITERAL,

      MINUS,
      NOT,
      MULT,
      HI_MULT,
      DIV,
      MOD,
      PLUS,
      LT,
      LEQ,
      GEQ,
      GT,
      EQ,
      NEQ,
      LAND,
      LOR,

      COLON,
      SEMICOLON,
      COMMA,
      LPARA,
      RPARA,
      LBRACKET,
      RBRACKET,
      LCURLY,
      RCURLY,

      ASSIGN,
      THROWAWAY,

      ERROR
    }

    StringBuilder sb = new StringBuilder();
    int globalLineNum = 0;
    int globalColNum = 0;
    // stack overflow example
    private static final char[] HEX_ARRAY = "0123456789ABCDEF".toCharArray();
    public static String bytesToHex(byte[] bytes) {
        char[] hexChars = new char[bytes.length * 2];
        for (int j = 0; j < bytes.length; j++) {
            int v = bytes[j] & 0xFF;
            hexChars[j * 2] = HEX_ARRAY[v >>> 4];
            hexChars[j * 2 + 1] = HEX_ARRAY[v & 0x0F];
        }
        return new String(hexChars);
    }
    public static boolean isEscape( int ch){
        if (ch == 92 || ch == 10 || ch == 39 || ch == 34 || ch == 9 || ch == 8 || ch == 82 || ch == 102){
            return true;
        }
        return false;
    }

    class Token {
        TokenType type;
        Object attribute;
        String text;
        int line;
        int col;

        Token(TokenType tt) {
            type = tt; attribute = null;
            this.text = yytext();
            this.line = lineNumber();
            this.col = column();
        }
        // added string consturctor
        Token(String text, TokenType tt, String attr) {
//            System.out.println("In string constructor");
            type = tt; attribute = attr;
            this.text = text + " " + attr;
            this.line = globalLineNum;
            this.col = globalColNum;
        }
        Token(String text, TokenType tt, Object attr) {
//            System.out.println("In general Constructor");
            type = tt; attribute = attr;
            this.text = text + " " + yytext();
            this.line = lineNumber();
            this.col = column();
        }
        Token(String errorString) {
            type = TokenType.ERROR;
            attribute = null;
            this.text = errorString;
            this.line = lineNumber();
            this.col = column();
        }
        Token(String errorString, String failedString) {
            type = TokenType.ERROR;
            attribute = null;
            this.text = errorString;
            this.line = globalLineNum;
            this.col = globalColNum;
        }
        public String toString() {
            return "" + type + "(" + attribute + ")";
        }
    }
    public int lineNumber() { return yyline + 1; }
    public int column() { return yycolumn + 1; }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EtaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignoring whitespace */
            }
          case 57: break;
          case 2: 
            { globalLineNum = lineNumber(); globalColNum = column();
          return new Token("id", TokenType.ID, yytext());
            }
          case 58: break;
          case 3: 
            { try {

                    String temp = "-" + yytext();
                    //System.out.println(Long.parseLong(temp)); // MUST REMEMBER INTEGERS ARE NEGATIVE
                    return new Token("integer", TokenType.INT_LITERAL, Long.parseLong(temp));
                } catch (Exception e) {
                    return new Token("Integer parse error");
                }
            }
          case 59: break;
          case 4: 
            { return new Token(TokenType.THROWAWAY);
            }
          case 60: break;
          case 5: 
            { globalLineNum = lineNumber(); globalColNum = column(); yybegin(CHARACTER);
            }
          case 61: break;
          case 6: 
            { return new Token(TokenType.DIV);
            }
          case 62: break;
          case 7: 
            { return new Token(TokenType.MINUS);
            }
          case 63: break;
          case 8: 
            { return new Token(TokenType.NOT);
            }
          case 64: break;
          case 9: 
            { return new Token(TokenType.MULT);
            }
          case 65: break;
          case 10: 
            { return new Token(TokenType.GT);
            }
          case 66: break;
          case 11: 
            { return new Token(TokenType.MOD);
            }
          case 67: break;
          case 12: 
            { return new Token(TokenType.PLUS);
            }
          case 68: break;
          case 13: 
            { return new Token(TokenType.LT);
            }
          case 69: break;
          case 14: 
            { return new Token(TokenType.ASSIGN);
            }
          case 70: break;
          case 15: 
            { return new Token(TokenType.LAND);
            }
          case 71: break;
          case 16: 
            { return new Token(TokenType.LOR);
            }
          case 72: break;
          case 17: 
            { return new Token(TokenType.COLON);
            }
          case 73: break;
          case 18: 
            { return new Token(TokenType.SEMICOLON);
            }
          case 74: break;
          case 19: 
            { return new Token(TokenType.COMMA);
            }
          case 75: break;
          case 20: 
            { return new Token(TokenType.LPARA);
            }
          case 76: break;
          case 21: 
            { return new Token(TokenType.RPARA);
            }
          case 77: break;
          case 22: 
            { return new Token(TokenType.LBRACKET);
            }
          case 78: break;
          case 23: 
            { return new Token(TokenType.RBRACKET);
            }
          case 79: break;
          case 24: 
            { return new Token(TokenType.LCURLY);
            }
          case 80: break;
          case 25: 
            { return new Token(TokenType.RCURLY);
            }
          case 81: break;
          case 26: 
            { globalLineNum = lineNumber(); globalColNum = column(); sb.setLength(0); yybegin(STRING);
            }
          case 82: break;
          case 27: 
            { yybegin(YYINITIAL);
          return new Token("Invalid character constant",yytext());
            }
          case 83: break;
          case 28: 
            { byte[] bytearr = yytext().getBytes("UTF-32");
        int ch = Integer.parseInt(String.valueOf(bytesToHex(bytearr)),16);
        if (ch > 0x10FFFF || ch < 0x0){
            return new Token("Invalid Unicode Character","outside of Unicode Range String");
        }else if (isEscape(ch)){
            sb.append("\\x{"+Integer.toHexString(ch)+ "}");
        }else if (ch >= 0x20 && ch <= 0x7E){
           sb.append(Character.toChars(ch));
        }else{
           sb.append("\\x{"+Integer.toHexString(ch)+ "}");
        }
            }
          case 84: break;
          case 29: 
            { yybegin(YYINITIAL);
          return new Token("Unterminated string",yytext());
            }
          case 85: break;
          case 30: 
            { yybegin(YYINITIAL);
          String s = sb.toString();
          return new Token("string", TokenType.STRING_LITERAL, s);
            }
          case 86: break;
          case 31: 
            { return new Token(TokenType.IF);
            }
          case 87: break;
          case 32: 
            { return new Token(TokenType.NEQ);
            }
          case 88: break;
          case 33: 
            { return new Token(TokenType.GEQ);
            }
          case 89: break;
          case 34: 
            { return new Token(TokenType.LEQ);
            }
          case 90: break;
          case 35: 
            { return new Token(TokenType.EQ);
            }
          case 91: break;
          case 36: 
            { yybegin(YYINITIAL);
          byte[] bytearr = yytext().substring(0,yytext().length()-1).getBytes("UTF-32");
          int ch = Integer.parseInt(String.valueOf(bytesToHex(bytearr)),16);
          if (ch > 0x10FFFF || ch < 0x0){
              return new Token("Invalid Unicode Character", "outside of Unicode Range Char");
          } else if (isEscape(ch)){
                return new Token("character", TokenType.CHAR_LITERAL,"\\x{"+Integer.toHexString(ch)+ "}");
          }else if (ch >= 0x20 && ch <= 0x7E){
              return new Token("character", TokenType.CHAR_LITERAL,
                              StringEscapeUtils.escapeJava(new String(Character.toChars(ch))));
          }else{
              return new Token("character", TokenType.CHAR_LITERAL,"\\x{"+Integer.toHexString(ch)+ "}");
          }
//          return new Token("character", TokenType.CHAR_LITERAL, Character.toString(yytext().charAt(0)));
            }
          case 92: break;
          case 37: 
            { sb.append(StringEscapeUtils.escapeJava("\t"));
            }
          case 93: break;
          case 38: 
            { sb.append(StringEscapeUtils.escapeJava("\n"));
            }
          case 94: break;
          case 39: 
            { sb.append("\"");
            }
          case 95: break;
          case 40: 
            { sb.append(StringEscapeUtils.escapeJava("\\"));
            }
          case 96: break;
          case 41: 
            { return new Token(TokenType.USE);
            }
          case 97: break;
          case 42: 
            { /* ignoring comment */
            }
          case 98: break;
          case 43: 
            { return new Token(TokenType.INT_TYPE);
            }
          case 99: break;
          case 44: 
            { return new Token(TokenType.HI_MULT);
            }
          case 100: break;
          case 45: 
            { yybegin(YYINITIAL);
             return new Token("character", TokenType.CHAR_LITERAL, StringEscapeUtils.escapeJava("'"));
            }
          case 101: break;
          case 46: 
            { yybegin(YYINITIAL);
              return new Token("character", TokenType.CHAR_LITERAL, StringEscapeUtils.escapeJava("\t"));
            }
          case 102: break;
          case 47: 
            { yybegin(YYINITIAL);
          return new Token("character", TokenType.CHAR_LITERAL, StringEscapeUtils.escapeJava("\n"));
            }
          case 103: break;
          case 48: 
            { yybegin(YYINITIAL);
              return new Token("character", TokenType.CHAR_LITERAL, StringEscapeUtils.escapeJava("\\"));
            }
          case 104: break;
          case 49: 
            { return new Token("boolean", TokenType.BOOL_LITERAL, Boolean.parseBoolean(yytext()));
            }
          case 105: break;
          case 50: 
            { return new Token(TokenType.ELSE);
            }
          case 106: break;
          case 51: 
            { return new Token(TokenType.BOOL_TYPE);
            }
          case 107: break;
          case 52: 
            { return new Token(TokenType.WHILE);
            }
          case 108: break;
          case 53: 
            { int ch = Integer.parseInt(yytext().substring(3, yytext().length() - 1), 16);
                                 if (ch > 0x10FFFF || ch < 0x0){
                                     return new Token("Invalid Unicode Character","outside of Unicode Range String");
                                 }else if (isEscape(ch)){
                                    sb.append(StringEscapeUtils.escapeJava(new String(Character.toChars(ch))));
                                 }else if (ch >= 0x20 && ch <= 0x7E){
                                    sb.append(Character.toChars(ch));
                                 }else{
                                    sb.append("\\x{"+Integer.toHexString(ch)+ "}");
                                 }
            }
          case 109: break;
          case 54: 
            { return new Token(TokenType.RETURN);
            }
          case 110: break;
          case 55: 
            { return new Token(TokenType.LENGTH);
            }
          case 111: break;
          case 56: 
            { yybegin(YYINITIAL);
                int ch = Integer.parseInt(yytext().substring(3, yytext().length() - 2), 16);
                if (ch > 0x10FFFF || ch < 0x0){
                    return new Token("Invalid Unicode Character", "outside of Unicode Range Char");
                } else if (isEscape(ch)){
                    return new Token("character", TokenType.CHAR_LITERAL,
                    StringEscapeUtils.escapeJava(new String(Character.toChars(ch))));
                }else if (ch >= 0x20 && ch <= 0x7E){
                    return new Token("character", TokenType.CHAR_LITERAL, Character.toChars(ch));
                }else{
                    return new Token("character", TokenType.CHAR_LITERAL,"\\x{"+Integer.toHexString(ch)+ "}");
                }
            }
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
