
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package aar226_akc55_ayc62_ahl88;

import java_cup.runtime.*;
import aar226_akc55_ayc62_ahl88.ast.*;
import java.util.ArrayList;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\004\005" +
    "\000\002\036\004\000\002\036\002\000\002\035\010\000" +
    "\002\035\006\000\002\005\004\000\002\005\002\000\002" +
    "\006\003\000\002\006\003\000\002\007\011\000\002\007" +
    "\007\000\002\010\005\000\002\010\003\000\002\010\002" +
    "\000\002\011\005\000\002\034\004\000\002\033\006\000" +
    "\002\033\005\000\002\015\003\000\002\015\005\000\002" +
    "\015\004\000\002\016\003\000\002\016\003\000\002\016" +
    "\004\000\002\016\003\000\002\016\003\000\002\012\005" +
    "\000\002\012\003\000\002\013\004\000\002\013\004\000" +
    "\002\014\005\000\002\014\006\000\002\014\006\000\002" +
    "\014\002\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\004\000\002\020\004\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\004\000\002\020\005\000\002\020\006\000\002" +
    "\020\006\000\002\020\005\000\002\020\006\000\002\020" +
    "\004\000\002\024\003\000\002\024\005\000\002\025\003" +
    "\000\002\025\003\000\002\025\005\000\002\025\005\000" +
    "\002\025\007\000\002\025\005\000\002\025\006\000\002" +
    "\025\003\000\002\030\005\000\002\030\003\000\002\032" +
    "\005\000\002\032\007\000\002\032\007\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\007\000" +
    "\002\032\007\000\002\032\011\000\002\032\007\000\002" +
    "\032\005\000\002\032\005\000\002\027\005\000\002\027" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\021\005\000\002\021\006\000\002\021\007\000" +
    "\002\021\007\000\002\021\006\000\002\021\010\000\002" +
    "\031\004\000\002\031\003\000\002\026\004\000\002\026" +
    "\005\000\002\026\002" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\006\002\ufffa\004\ufffa\001\002\000\004\002" +
    "\040\001\002\000\006\002\000\004\007\001\002\000\006" +
    "\002\ufffb\004\ufffb\001\002\000\004\044\010\001\002\000" +
    "\010\004\011\045\uffef\051\uffef\001\002\000\004\050\036" +
    "\001\002\000\006\045\015\051\014\001\002\000\006\045" +
    "\ufff0\051\ufff0\001\002\000\004\004\011\001\002\000\010" +
    "\002\ufff8\004\ufff8\050\016\001\002\000\006\011\022\012" +
    "\017\001\002\000\014\002\uffdb\004\uffdb\042\uffdb\045\uffdb" +
    "\051\uffdb\001\002\000\010\002\uffe1\004\uffe1\051\uffe1\001" +
    "\002\000\010\002\ufff9\004\ufff9\051\032\001\002\000\014" +
    "\002\uffdb\004\uffdb\042\uffdb\045\uffdb\051\uffdb\001\002\000" +
    "\014\002\uffe0\004\uffe0\042\024\045\uffe0\051\uffe0\001\002" +
    "\000\010\004\027\007\026\043\025\001\002\000\014\002" +
    "\uffde\004\uffde\042\uffde\045\uffde\051\uffde\001\002\000\004" +
    "\043\031\001\002\000\004\043\030\001\002\000\014\002" +
    "\uffdc\004\uffdc\042\uffdc\045\uffdc\051\uffdc\001\002\000\014" +
    "\002\uffdd\004\uffdd\042\uffdd\045\uffdd\051\uffdd\001\002\000" +
    "\006\011\022\012\017\001\002\000\010\002\uffe2\004\uffe2" +
    "\051\uffe2\001\002\000\014\002\uffdf\004\uffdf\042\024\045" +
    "\uffdf\051\uffdf\001\002\000\006\045\ufff1\051\ufff1\001\002" +
    "\000\006\011\022\012\017\001\002\000\006\045\uffee\051" +
    "\uffee\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\006\002\003\036\004\001\001\000\002\001" +
    "\001\000\004\035\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\011\011\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\034" +
    "\001\001\000\002\001\001\000\006\012\020\013\017\001" +
    "\001\000\004\014\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\036\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 107. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= topLevelInter EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                EtiInterface start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<EtiInterface> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // topLevelInter ::= interfaceStar 
            {
                EtiInterface RESULT = null;
                int isleft = CUP$parser$stack.peek().left;
                int isright = CUP$parser$stack.peek().right;
                ArrayList<Method_Interface> is = CUP$parser$stack.peek().<ArrayList<Method_Interface>> value();
                
    RESULT = new EtiInterface(is);
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelInter",0, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // importUseStar ::= importUseStar use_component 
            {
                ArrayList<Use> RESULT = null;
                int iusleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int iusright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Use> ius = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Use>> value();
                int uleft = CUP$parser$stack.peek().left;
                int uright = CUP$parser$stack.peek().right;
                Use u = CUP$parser$stack.peek().<Use> value();
                 ius.add(u); RESULT = ius;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("importUseStar",1, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // importUseStar ::= 
            {
                ArrayList<Use> RESULT = null;
                 RESULT = new ArrayList<Use>();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("importUseStar",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // use_component ::= USE IDENTIFIER 
            {
                Use RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                String i = CUP$parser$stack.peek().<String> value();
                           RESULT = new Use(i); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_component",2, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // use_component ::= USE IDENTIFIER SEMICOLON 
            {
                Use RESULT = null;
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-1).<String> value();
                 RESULT = new Use(i); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_component",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // interfaceStar ::= interfaceStar method_interface 
            {
                ArrayList<Method_Interface> RESULT = null;
                int isleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int isright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Method_Interface> is = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Method_Interface>> value();
                int mileft = CUP$parser$stack.peek().left;
                int miright = CUP$parser$stack.peek().right;
                Method_Interface mi = CUP$parser$stack.peek().<Method_Interface> value();
                 is.add(mi); RESULT = is;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interfaceStar",28, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // interfaceStar ::= 
            {
                ArrayList<Method_Interface> RESULT = null;
                RESULT = new ArrayList<Method_Interface>();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interfaceStar",28, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // method_interface ::= IDENTIFIER OPEN_PAREN emptyBracketDecl_star CLOSE_PAREN COLON emptyBracketType_plus 
            {
                Method_Interface RESULT = null;
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-5).<String> value();
                int dsleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int dsright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayList<Decl> ds = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayList<Decl>> value();
                int tsleft = CUP$parser$stack.peek().left;
                int tsright = CUP$parser$stack.peek().right;
                ArrayList<Type> ts = CUP$parser$stack.peek().<ArrayList<Type>> value();
                
     RESULT = new Method_Interface(i,ds,ts);
     
                CUP$parser$result = parser.getSymbolFactory().newSymbol("method_interface",27, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // method_interface ::= IDENTIFIER OPEN_PAREN emptyBracketDecl_star CLOSE_PAREN 
            {
                Method_Interface RESULT = null;
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int dsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Decl> ds = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Decl>> value();
                
      RESULT = new Method_Interface(i,ds,new ArrayList<Type>());
      
                CUP$parser$result = parser.getSymbolFactory().newSymbol("method_interface",27, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // definitionStar ::= definitionStar definition 
            {
                ArrayList<Definition> RESULT = null;
                int dsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Definition> ds = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Definition>> value();
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                Definition d = CUP$parser$stack.peek().<Definition> value();
                ds.add(d); RESULT = ds; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definitionStar",3, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // definitionStar ::= 
            {
                ArrayList<Definition> RESULT = null;
                RESULT = new ArrayList<Definition>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definitionStar",3, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // definition ::= method 
            {
                Definition RESULT = null;
                int mleft = CUP$parser$stack.peek().left;
                int mright = CUP$parser$stack.peek().right;
                Method m = CUP$parser$stack.peek().<Method> value();
                 RESULT = m;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // definition ::= globalDecl 
            {
                Definition RESULT = null;
                int gdleft = CUP$parser$stack.peek().left;
                int gdright = CUP$parser$stack.peek().right;
                Globdecl gd = CUP$parser$stack.peek().<Globdecl> value();
                RESULT = gd; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // method ::= IDENTIFIER OPEN_PAREN emptyBracketDecl_star CLOSE_PAREN COLON emptyBracketType_plus block 
            {
                Method RESULT = null;
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-6).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-6).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-6).<String> value();
                int dsleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int dsright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                ArrayList<Decl> ds = CUP$parser$stack.elementAt(CUP$parser$top-4).<ArrayList<Decl>> value();
                int tsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int tsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Type> ts = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Type>> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Block b = CUP$parser$stack.peek().<Block> value();
                
    RESULT = new Method(i,ds,ts,b);
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("method",5, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // method ::= IDENTIFIER OPEN_PAREN emptyBracketDecl_star CLOSE_PAREN block 
            {
                Method RESULT = null;
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int dsleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dsright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Decl> ds = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Decl>> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Block b = CUP$parser$stack.peek().<Block> value();
                 // Block b
        RESULT = new Method(i,ds,new ArrayList<Type>(),b); // NONE
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("method",5, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // emptyBracketDecl_star ::= emptyBracketDecl_star COMMA emptyBracketDecl 
            {
                ArrayList<Decl> RESULT = null;
                int declstarleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int declstarright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Decl> declstar = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Decl>> value();
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                Decl d = CUP$parser$stack.peek().<Decl> value();
                declstar.add(d); RESULT = declstar; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl_star",6, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // emptyBracketDecl_star ::= emptyBracketDecl 
            {
                ArrayList<Decl> RESULT = null;
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                Decl d = CUP$parser$stack.peek().<Decl> value();
                ArrayList<Decl> temp = new ArrayList<Decl>();
      temp.add(d);
      RESULT = temp;
      
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl_star",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // emptyBracketDecl_star ::= 
            {
                ArrayList<Decl> RESULT = null;
                 RESULT = new ArrayList<Decl>();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl_star",6, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // emptyBracketDecl ::= IDENTIFIER COLON emptyBracketType 
            {
                Decl RESULT = null;
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new Decl(i,t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl",7, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // fullBracketType ::= IDENTIFIER fullBracketPlus 
            {
                ArrayAccess RESULT = null;
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-1).<String> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                ArrayList<Expr> e = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                Id a = new Id(i); RESULT = new ArrayAccess(a,e);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("fullBracketType",26, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // fullBracketPlus ::= fullBracketPlus OPEN_BRACKET expr CLOSE_BRACKET 
            {
                ArrayList<Expr> RESULT = null;
                int tsleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int tsright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayList<Expr> ts = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayList<Expr>> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 ts.add(e); RESULT = ts; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("fullBracketPlus",25, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // fullBracketPlus ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                ArrayList<Expr> RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 ArrayList<Expr> exprList = new ArrayList<Expr>();
                         exprList.add(e);
                         RESULT = exprList;
                         
                CUP$parser$result = parser.getSymbolFactory().newSymbol("fullBracketPlus",25, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // globalDecl ::= emptyBracketDecl 
            {
                Globdecl RESULT = null;
                int edleft = CUP$parser$stack.peek().left;
                int edright = CUP$parser$stack.peek().right;
                Decl ed = CUP$parser$stack.peek().<Decl> value();
                RESULT = new Globdecl(ed, null);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // globalDecl ::= emptyBracketDecl GETS value 
            {
                Globdecl RESULT = null;
                int edleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int edright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Decl ed = CUP$parser$stack.elementAt(CUP$parser$top-2).<Decl> value();
                int vleft = CUP$parser$stack.peek().left;
                int vright = CUP$parser$stack.peek().right;
                Value v = CUP$parser$stack.peek().<Value> value();
                
        if (!ed.type.dimensions.allEmpty) {
            throw new Error("array with init len no Val");
        }
        if (ed.type.dimensions.getDim() != 0){
            throw new Error("global arr not init allowed");
        }
        RESULT  = new Globdecl(ed, v);
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // globalDecl ::= globalDecl SEMICOLON 
            {
                Globdecl RESULT = null;
                int gdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int gdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Globdecl gd = CUP$parser$stack.elementAt(CUP$parser$top-1).<Globdecl> value();
                RESULT = gd;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",11, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // value ::= INTEGER_LITERAL 
            {
                Value RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Long i = CUP$parser$stack.peek().<Long> value();
                 RESULT = new IntLiteral(i,true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("value",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // value ::= CHARACTER_LITERAL 
            {
                Value RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                String c = CUP$parser$stack.peek().<String> value();
                 RESULT = new IntLiteral(c); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("value",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // value ::= MINUS INTEGER_LITERAL 
            {
                Value RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Long i = CUP$parser$stack.peek().<Long> value();
                 RESULT = new IntLiteral(i,false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("value",12, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // value ::= BOOL_LITERAL 
            {
                Value RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Boolean b = CUP$parser$stack.peek().<Boolean> value();
                 RESULT = new BoolLiteral(b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("value",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // value ::= STRING_LITERAL 
            {
                Value RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                String s = CUP$parser$stack.peek().<String> value();
                 new ArrayValueLiteral(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("value",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // emptyBracketType_plus ::= emptyBracketType_plus COMMA emptyBracketType 
            {
                ArrayList<Type> RESULT = null;
                int tsleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tsright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Type> ts = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Type>> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 ts.add(t); RESULT = ts; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketType_plus",8, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // emptyBracketType_plus ::= emptyBracketType 
            {
                ArrayList<Type> RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 ArrayList<Type> typeList = new ArrayList<Type>();
                      typeList.add(t);
                      RESULT = typeList;
                      
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketType_plus",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // emptyBracketType ::= INT emptyDimension_star 
            {
                Type RESULT = null;
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                Dimension d = CUP$parser$stack.peek().<Dimension> value();
                RESULT = new Type(true,d); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketType",9, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // emptyBracketType ::= BOOL emptyDimension_star 
            {
                Type RESULT = null;
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                Dimension d = CUP$parser$stack.peek().<Dimension> value();
                RESULT = new Type(false,d); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketType",9, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // emptyDimension_star ::= emptyDimension_star OPEN_BRACKET CLOSE_BRACKET 
            {
                Dimension RESULT = null;
                int dsleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dsright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Dimension ds = CUP$parser$stack.elementAt(CUP$parser$top-2).<Dimension> value();
                
    ds.increment();
    ds.foundEmpty = true;
    ds.indices.add(null);
    RESULT = ds;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // emptyDimension_star ::= emptyDimension_star OPEN_BRACKET INTEGER_LITERAL CLOSE_BRACKET 
            {
                Dimension RESULT = null;
                int dsleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int dsright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Dimension ds = CUP$parser$stack.elementAt(CUP$parser$top-3).<Dimension> value();
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Long i = CUP$parser$stack.elementAt(CUP$parser$top-1).<Long> value();
                
        if (ds.foundEmpty) throw new Error("Filled index after empty");
        ds.allEmpty = false;
        IntLiteral iL = new IntLiteral(i,true);
        ds.indices.add(iL);
        ds.increment(); // [][2]
        RESULT = ds;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",10, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // emptyDimension_star ::= emptyDimension_star OPEN_BRACKET IDENTIFIER CLOSE_BRACKET 
            {
                Dimension RESULT = null;
                int dsleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int dsright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Dimension ds = CUP$parser$stack.elementAt(CUP$parser$top-3).<Dimension> value();
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-1).<String> value();
                
        if (ds.foundEmpty) throw new Error("Filled index after empty");
        ds.allEmpty = false;
        ds.indices.add(new Id(i));
        ds.increment(); // [][2]
        RESULT = ds;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",10, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // emptyDimension_star ::= 
            {
                Dimension RESULT = null;
                RESULT = new Dimension(0); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",10, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                RESULT = e1;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // expr ::= expr TIMES expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new TimesExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // expr ::= expr HI_MULT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new Hi_MultExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // expr ::= expr DIVIDE expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new DivideExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // expr ::= expr MODULO expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ModuloExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // expr ::= expr PLUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new PlusExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // expr ::= expr MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new MinusExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // expr ::= expr LT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new LtExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // expr ::= expr LEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new LeqExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // expr ::= expr GT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new GtExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // expr ::= expr GEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new GeqExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // expr ::= expr EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new EqualExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // expr ::= expr NOT_EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new Not_EqualExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // expr ::= expr AND expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AndExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // expr ::= expr OR expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new OrExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // expr ::= NOT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.peek().left;
                int e1right = CUP$parser$stack.peek().right;
                Expr e1 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new NotExpr(e1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // expr ::= MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.peek().left;
                int e1right = CUP$parser$stack.peek().right;
                Expr e1 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new IntegerNegExpr (e1);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // expr ::= INTEGER_LITERAL 
            {
                Expr RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Long i = CUP$parser$stack.peek().<Long> value();
                 RESULT = new IntLiteral(i,true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // expr ::= CHARACTER_LITERAL 
            {
                Expr RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                String c = CUP$parser$stack.peek().<String> value();
                 RESULT = new IntLiteral(c); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // expr ::= BOOL_LITERAL 
            {
                Expr RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Boolean b = CUP$parser$stack.peek().<Boolean> value();
                 RESULT = new BoolLiteral(b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // expr ::= STRING_LITERAL 
            {
                Expr RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                String s = CUP$parser$stack.peek().<String> value();
                 RESULT = new ArrayValueLiteral(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // expr ::= IDENTIFIER 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Id(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // expr ::= OPEN_BRACE CLOSE_BRACE 
            {
                Expr RESULT = null;
                RESULT = new ArrayExpr(new ArrayList<Expr>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // expr ::= OPEN_BRACE exprList CLOSE_BRACE 
            {
                Expr RESULT = null;
                int xleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int xright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> x = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                RESULT = new ArrayExpr(x);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // expr ::= OPEN_BRACE exprList COMMA CLOSE_BRACE 
            {
                Expr RESULT = null;
                int xleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int xright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Expr> x = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Expr>> value();
                RESULT = new ArrayExpr(x); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // expr ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new Length(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // expr ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new FunctionCallExpr(id,new ArrayList<Expr>() ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // expr ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> e = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new FunctionCallExpr(id, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // expr ::= expr fullBracketPlus 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                ArrayList<Expr> i = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new ArrayAccess(e, i); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // exprList ::= expr 
            {
                ArrayList<Expr> RESULT = null;
                int xleft = CUP$parser$stack.peek().left;
                int xright = CUP$parser$stack.peek().right;
                Expr x = CUP$parser$stack.peek().<Expr> value();
                
            ArrayList<Expr> temp = new ArrayList<Expr>();
            temp.add(x);
            RESULT = temp;
        
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // exprList ::= exprList COMMA expr 
            {
                ArrayList<Expr> RESULT = null;
                int aveleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int averight = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Expr> ave = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Expr>> value();
                int xleft = CUP$parser$stack.peek().left;
                int xright = CUP$parser$stack.peek().right;
                Expr x = CUP$parser$stack.peek().<Expr> value();
                 ave.add(x); RESULT = ave; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // stmt ::= declaration_assign_stmt 
            {
                Stmt RESULT = null;
                int dasleft = CUP$parser$stack.peek().left;
                int dasright = CUP$parser$stack.peek().right;
                Stmt das = CUP$parser$stack.peek().<Stmt> value();
                RESULT = das; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // stmt ::= multi_declaration_assign_stmt 
            {
                Stmt RESULT = null;
                int mdasleft = CUP$parser$stack.peek().left;
                int mdasright = CUP$parser$stack.peek().right;
                Stmt mdas = CUP$parser$stack.peek().<Stmt> value();
                RESULT = mdas;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // stmt ::= WHILE expr stmt 
            {
                Stmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                RESULT = new While(e,s);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // stmt ::= IF expr stmt 
            {
                Stmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                RESULT = new IfOnly(e,s);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // stmt ::= IF expr stmt ELSE stmt 
            {
                Stmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-3).<Expr> value();
                int s1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int s1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Stmt s1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Stmt> value();
                int s2left = CUP$parser$stack.peek().left;
                int s2right = CUP$parser$stack.peek().right;
                Stmt s2 = CUP$parser$stack.peek().<Stmt> value();
                RESULT = new IfElse(e,s1,s2);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // stmt ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Stmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Procedure(id,new ArrayList<Expr>() ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // stmt ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Stmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> e = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Procedure(id, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // stmt ::= block 
            {
                Stmt RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Block b = CUP$parser$stack.peek().<Block> value();
                 RESULT = b; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // multi_declaration_assign_stmt ::= type_list GETS exprList 
            {
                Stmt RESULT = null;
                int tlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Decl> tl = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Decl>> value();
                int elleft = CUP$parser$stack.peek().left;
                int elright = CUP$parser$stack.peek().right;
                ArrayList<Expr> el = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                RESULT = new MultiDeclStmt(tl,el);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_declaration_assign_stmt",22, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // multi_declaration_assign_stmt ::= type_list 
            {
                Stmt RESULT = null;
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                ArrayList<Decl> tl = CUP$parser$stack.peek().<ArrayList<Decl>> value();
                 RESULT = new MultiDeclStmt(tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_declaration_assign_stmt",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // type_list ::= UNDERSCORE COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int i2left = CUP$parser$stack.peek().left;
                int i2right = CUP$parser$stack.peek().right;
                String i2 = CUP$parser$stack.peek().<String> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new UnderScore());
        temp.add(new Decl(i2));
        RESULT = temp;
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // type_list ::= IDENTIFIER COLON emptyBracketType COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int i1right = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String i1 = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int t1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int t1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new Decl(i1,t1));
        temp.add(new UnderScore());
        RESULT = temp;
            
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",24, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // type_list ::= UNDERSCORE COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int i2left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int i2right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String i2 = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int t2left = CUP$parser$stack.peek().left;
                int t2right = CUP$parser$stack.peek().right;
                Type t2 = CUP$parser$stack.peek().<Type> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new UnderScore());
        temp.add(new Decl(i2,t2));
        RESULT = temp;
                
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",24, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // type_list ::= IDENTIFIER COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int i1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String i1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                
            ArrayList<Decl> temp = new ArrayList<Decl>();
            temp.add(new Decl(i1));
            temp.add(new UnderScore());
            RESULT = temp;
            
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // type_list ::= UNDERSCORE COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                
            ArrayList<Decl> temp = new ArrayList<Decl>();
            temp.add(new UnderScore());
            temp.add(new UnderScore());
            RESULT = temp;
            
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // type_list ::= IDENTIFIER COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int i1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String i1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int i2left = CUP$parser$stack.peek().left;
                int i2right = CUP$parser$stack.peek().right;
                String i2 = CUP$parser$stack.peek().<String> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new Decl(i1));
        temp.add(new Decl(i2));
        RESULT = temp;
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // type_list ::= IDENTIFIER COLON emptyBracketType COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int i1right = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String i1 = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int t1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int t1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int i2left = CUP$parser$stack.peek().left;
                int i2right = CUP$parser$stack.peek().right;
                String i2 = CUP$parser$stack.peek().<String> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new Decl(i1,t1));
        temp.add(new Decl(i2));
        RESULT = temp;
            
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",24, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // type_list ::= IDENTIFIER COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int i1right = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String i1 = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int i2left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int i2right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String i2 = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int t2left = CUP$parser$stack.peek().left;
                int t2right = CUP$parser$stack.peek().right;
                Type t2 = CUP$parser$stack.peek().<Type> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new Decl(i1));
        temp.add(new Decl(i2,t2));
        RESULT = temp;
                
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",24, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // type_list ::= IDENTIFIER COLON emptyBracketType COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$parser$stack.elementAt(CUP$parser$top-6).left;
                int i1right = CUP$parser$stack.elementAt(CUP$parser$top-6).right;
                String i1 = CUP$parser$stack.elementAt(CUP$parser$top-6).<String> value();
                int t1left = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int t1right = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Type t1 = CUP$parser$stack.elementAt(CUP$parser$top-4).<Type> value();
                int i2left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int i2right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String i2 = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int t2left = CUP$parser$stack.peek().left;
                int t2right = CUP$parser$stack.peek().right;
                Type t2 = CUP$parser$stack.peek().<Type> value();
                
            ArrayList<Decl> temp = new ArrayList<Decl>();
            temp.add(new Decl(i1,t1));
            temp.add(new Decl(i2,t2));
            RESULT = temp;
            
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",24, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // type_list ::= type_list COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int tlleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int tlright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                ArrayList<Decl> tl = CUP$parser$stack.elementAt(CUP$parser$top-4).<ArrayList<Decl>> value();
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                
        tl.add(new Decl(i,t));
        RESULT = tl;
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",24, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // type_list ::= type_list COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int tlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Decl> tl = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Decl>> value();
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                String i = CUP$parser$stack.peek().<String> value();
                
        tl.add(new Decl(i));
        RESULT = tl;
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // type_list ::= type_list COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int tlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Decl> tl = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Decl>> value();
                
            tl.add(new UnderScore());
            RESULT = tl;
        
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // declaration_assign_stmt ::= emptyBracketDecl GETS expr 
            {
                Stmt RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Decl d = CUP$parser$stack.elementAt(CUP$parser$top-2).<Decl> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                
    if (!d.type.dimensions.allEmpty) {
        throw new Error("array with init len no Val");
    }
    RESULT = new DeclStmt(d,e);
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // declaration_assign_stmt ::= emptyBracketDecl 
            {
                Stmt RESULT = null;
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                Decl d = CUP$parser$stack.peek().<Decl> value();
                RESULT = new DeclStmt(d,null);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // declaration_assign_stmt ::= IDENTIFIER GETS expr 
            {
                Stmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new Reassignment(id,e);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // declaration_assign_stmt ::= UNDERSCORE GETS expr 
            {
                Stmt RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                RESULT = new DeclStmt(new UnderScore(),e);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // declaration_assign_stmt ::= fullBracketType GETS expr 
            {
                Stmt RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayAccess d = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayAccess> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new Reassignment(d,e);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // block ::= OPEN_BRACE statement_star CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Stmt>> value();
                RESULT = new Block(ss);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // block ::= OPEN_BRACE statement_star SEMICOLON CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Stmt>> value();
                RESULT = new Block(ss);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",15, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // block ::= OPEN_BRACE statement_star SEMICOLON return CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayList<Stmt>> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Return r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Return> value();
                ss.add(r); RESULT = new Block(ss);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",15, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // block ::= OPEN_BRACE statement_star return SEMICOLON CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayList<Stmt>> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Return r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Return> value();
                ss.add(r); RESULT = new Block(ss);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",15, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // block ::= OPEN_BRACE statement_star return CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Stmt>> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Return r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Return> value();
                ss.add(r); RESULT = new Block(ss);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",15, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // block ::= OPEN_BRACE statement_star SEMICOLON return SEMICOLON CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-4).<ArrayList<Stmt>> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Return r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Return> value();
                ss.add(r); RESULT = new Block(ss);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",15, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // return ::= RETURN exprList 
            {
                Return RESULT = null;
                int elleft = CUP$parser$stack.peek().left;
                int elright = CUP$parser$stack.peek().right;
                ArrayList<Expr> el = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                RESULT = new Return(el);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",23, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // return ::= RETURN 
            {
                Return RESULT = null;
                RESULT = new Return(new ArrayList<Expr>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",23, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // statement_star ::= statement_star stmt 
            {
                ArrayList<Stmt> RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Stmt>> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 ss.add(s); RESULT = ss;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_star",20, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // statement_star ::= statement_star SEMICOLON stmt 
            {
                ArrayList<Stmt> RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Stmt>> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 ss.add(s); RESULT = ss;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_star",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // statement_star ::= 
            {
                ArrayList<Stmt> RESULT = null;
                RESULT = new ArrayList<Stmt>();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_star",20, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
