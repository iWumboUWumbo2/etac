
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package aar226_akc55_ayc62_ahl88;

import java_cup.runtime.*;
import aar226_akc55_ayc62_ahl88.ast.*;
import java.util.ArrayList;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\004\005" +
    "\000\002\005\004\000\002\005\002\000\002\006\003\000" +
    "\002\006\003\000\002\007\011\000\002\007\007\000\002" +
    "\010\005\000\002\010\003\000\002\010\002\000\002\011" +
    "\005\000\002\036\004\000\002\035\006\000\002\035\005" +
    "\000\002\015\003\000\002\015\005\000\002\015\004\000" +
    "\002\016\003\000\002\016\003\000\002\016\004\000\002" +
    "\016\003\000\002\016\003\000\002\012\005\000\002\012" +
    "\003\000\002\013\004\000\002\013\004\000\002\014\005" +
    "\000\002\014\006\000\002\014\006\000\002\014\002\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\004\000\002" +
    "\020\004\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\004" +
    "\000\002\020\005\000\002\020\006\000\002\020\006\000" +
    "\002\020\005\000\002\020\006\000\002\020\004\000\002" +
    "\024\003\000\002\024\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\005\000\002\025\005\000\002\025\007" +
    "\000\002\025\005\000\002\025\006\000\002\025\003\000" +
    "\002\032\005\000\002\032\003\000\002\034\005\000\002" +
    "\034\007\000\002\034\007\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\007\000\002\034\007" +
    "\000\002\034\011\000\002\034\007\000\002\034\005\000" +
    "\002\034\005\000\002\031\005\000\002\031\003\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\021" +
    "\005\000\002\021\006\000\002\021\007\000\002\021\007" +
    "\000\002\021\006\000\002\021\010\000\002\033\004\000" +
    "\002\033\003\000\002\030\004\000\002\030\005\000\002" +
    "\030\002" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\010\002\ufffe\004\ufffe\020\ufffe\001\002\000" +
    "\010\002\ufffa\004\ufffa\020\007\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\004\270\001" +
    "\002\000\006\002\000\004\015\001\002\000\010\002\uffff" +
    "\004\uffff\020\uffff\001\002\000\006\002\ufff9\004\ufff9\001" +
    "\002\000\010\002\ufff8\004\ufff8\052\267\001\002\000\006" +
    "\002\ufffb\004\ufffb\001\002\000\006\044\027\050\030\001" +
    "\002\000\012\002\uffee\004\uffee\041\017\052\uffee\001\002" +
    "\000\014\005\022\006\020\007\021\010\024\023\025\001" +
    "\002\000\010\002\uffea\004\uffea\052\uffea\001\002\000\010" +
    "\002\uffeb\004\uffeb\052\uffeb\001\002\000\010\002\uffe7\004" +
    "\uffe7\052\uffe7\001\002\000\010\002\uffed\004\uffed\052\uffed" +
    "\001\002\000\010\002\uffe8\004\uffe8\052\uffe8\001\002\000" +
    "\004\007\026\001\002\000\010\002\uffe9\004\uffe9\052\uffe9" +
    "\001\002\000\010\004\044\045\ufff3\051\ufff3\001\002\000" +
    "\006\011\033\012\031\001\002\000\036\002\uffdf\004\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\017\uffdf\041\uffdf\042\uffdf\045" +
    "\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf\053\uffdf\001\002" +
    "\000\016\002\ufff2\004\ufff2\041\ufff2\045\ufff2\051\ufff2\052" +
    "\ufff2\001\002\000\036\002\uffdf\004\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\017\uffdf\041\uffdf\042\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\001\002\000\036\002\uffe4" +
    "\004\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4\041\uffe4\042" +
    "\035\045\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\001\002\000\010\004\040\007\037\043\036\001\002\000" +
    "\036\002\uffe2\004\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2" +
    "\041\uffe2\042\uffe2\045\uffe2\046\uffe2\047\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\001\002\000\004\043\042\001\002\000\004" +
    "\043\041\001\002\000\036\002\uffe0\004\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\017\uffe0\041\uffe0\042\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\051\uffe0\052\uffe0\053\uffe0\001\002\000\036\002" +
    "\uffe1\004\uffe1\013\uffe1\014\uffe1\015\uffe1\017\uffe1\041\uffe1" +
    "\042\uffe1\045\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\001\002\000\036\002\uffe3\004\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\017\uffe3\041\uffe3\042\035\045\uffe3\046\uffe3\047" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\001\002\000\004\050\030" +
    "\001\002\000\006\045\050\051\047\001\002\000\006\045" +
    "\ufff4\051\ufff4\001\002\000\004\004\044\001\002\000\006" +
    "\046\051\050\053\001\002\000\022\004\uff9a\013\uff9a\015" +
    "\uff9a\017\uff9a\046\uff9a\047\uff9a\052\uff9a\053\uff9a\001\002" +
    "\000\006\002\ufff6\004\ufff6\001\002\000\006\011\033\012" +
    "\031\001\002\000\006\046\uffe5\051\uffe5\001\002\000\006" +
    "\046\051\051\056\001\002\000\006\011\033\012\031\001" +
    "\002\000\006\002\ufff7\004\ufff7\001\002\000\006\046\uffe6" +
    "\051\uffe6\001\002\000\022\004\072\013\073\015\070\017" +
    "\064\046\051\047\067\052\066\053\063\001\002\000\024" +
    "\004\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\046\uffbf\047" +
    "\uffbf\052\uffbf\053\uffbf\001\002\000\006\041\260\051\257" +
    "\001\002\000\032\004\112\005\110\006\104\007\111\010" +
    "\113\021\106\023\114\030\102\044\103\046\105\047\uff9d" +
    "\052\uff9d\001\002\000\030\004\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\017\uffb6\041\250\046\uffb6\047\uffb6\051\247\052\uffb6" +
    "\053\uffb6\001\002\000\020\004\072\013\073\015\070\017" +
    "\064\046\051\047\241\053\063\001\002\000\026\002\uffa4" +
    "\004\uffa4\013\uffa4\014\uffa4\015\uffa4\017\uffa4\046\uffa4\047" +
    "\uffa4\052\uffa4\053\uffa4\001\002\000\026\004\112\005\110" +
    "\006\104\007\111\010\113\021\106\023\114\030\102\044" +
    "\103\046\105\001\002\000\024\004\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\017\uffb8\046\uffb8\047\uffb8\052\uffb8\053\uffb8\001" +
    "\002\000\014\041\220\042\122\044\215\050\217\051\214" +
    "\001\002\000\026\004\112\005\110\006\104\007\111\010" +
    "\113\021\106\023\114\030\102\044\103\046\105\001\002" +
    "\000\024\004\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe\046" +
    "\uffbe\047\uffbe\052\uffbe\053\uffbe\001\002\000\026\004\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\017\uffa8\041\206\046\uffa8\047" +
    "\uffa8\052\uffa8\053\uffa8\001\002\000\006\047\204\052\203" +
    "\001\002\000\022\004\uff9c\013\uff9c\015\uff9c\017\uff9c\046" +
    "\uff9c\047\uff9c\052\uff9c\053\uff9c\001\002\000\004\041\101" +
    "\001\002\000\026\004\112\005\110\006\104\007\111\010" +
    "\113\021\106\023\114\030\102\044\103\046\105\001\002" +
    "\000\026\004\112\005\110\006\104\007\111\010\113\021" +
    "\106\023\114\030\102\044\103\046\105\001\002\000\026" +
    "\004\112\005\110\006\104\007\111\010\113\021\106\023" +
    "\114\030\102\044\103\046\105\001\002\000\070\004\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\017\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc\043" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\001\002\000\030\004\112\005\110\006\104\007\111\010" +
    "\113\021\106\023\114\030\102\044\103\046\105\047\173" +
    "\001\002\000\004\044\170\001\002\000\062\004\uffa5\013" +
    "\uffa5\014\uffa5\015\uffa5\017\uffa5\022\134\023\125\024\117" +
    "\025\135\026\126\027\121\031\123\032\133\033\124\034" +
    "\127\035\130\036\116\037\120\040\131\042\122\046\uffa5" +
    "\047\uffa5\052\uffa5\053\uffa5\001\002\000\070\004\uffca\013" +
    "\uffca\014\uffca\015\uffca\017\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\042\uffca\043\uffca" +
    "\045\uffca\046\uffca\047\uffca\051\uffca\052\uffca\053\uffca\001" +
    "\002\000\070\004\uffcd\013\uffcd\014\uffcd\015\uffcd\017\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\042\uffcd\043\uffcd\045\uffcd\046\uffcd\047\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\001\002\000\072\004\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\017\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\042\uffc9\043\uffc9\044" +
    "\161\045\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\001\002\000\070\004\uffcb\013\uffcb\014\uffcb\015\uffcb\017" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\042\uffcb\043\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\001\002\000\026\004\112\005" +
    "\110\006\104\007\111\010\113\021\106\023\114\030\102" +
    "\044\103\046\105\001\002\000\070\004\uffce\013\uffce\014" +
    "\uffce\015\uffce\017\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\042\122\043\uffce\045\uffce" +
    "\046\uffce\047\uffce\051\uffce\052\uffce\053\uffce\001\002\000" +
    "\026\004\112\005\110\006\104\007\111\010\113\021\106" +
    "\023\114\030\102\044\103\046\105\001\002\000\026\004" +
    "\112\005\110\006\104\007\111\010\113\021\106\023\114" +
    "\030\102\044\103\046\105\001\002\000\026\004\112\005" +
    "\110\006\104\007\111\010\113\021\106\023\114\030\102" +
    "\044\103\046\105\001\002\000\026\004\112\005\110\006" +
    "\104\007\111\010\113\021\106\023\114\030\102\044\103" +
    "\046\105\001\002\000\026\004\112\005\110\006\104\007" +
    "\111\010\113\021\106\023\114\030\102\044\103\046\105" +
    "\001\002\000\026\004\112\005\110\006\104\007\111\010" +
    "\113\021\106\023\114\030\102\044\103\046\105\001\002" +
    "\000\026\004\112\005\110\006\104\007\111\010\113\021" +
    "\106\023\114\030\102\044\103\046\105\001\002\000\026" +
    "\004\112\005\110\006\104\007\111\010\113\021\106\023" +
    "\114\030\102\044\103\046\105\001\002\000\026\004\112" +
    "\005\110\006\104\007\111\010\113\021\106\023\114\030" +
    "\102\044\103\046\105\001\002\000\026\004\112\005\110" +
    "\006\104\007\111\010\113\021\106\023\114\030\102\044" +
    "\103\046\105\001\002\000\026\004\112\005\110\006\104" +
    "\007\111\010\113\021\106\023\114\030\102\044\103\046" +
    "\105\001\002\000\026\004\112\005\110\006\104\007\111" +
    "\010\113\021\106\023\114\030\102\044\103\046\105\001" +
    "\002\000\070\004\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\042\141\043\uffc2\045\uffc2\046\uffc2\047\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\001\002\000\026\004\112\005\110" +
    "\006\104\007\111\010\113\021\106\023\114\030\102\044" +
    "\103\046\105\001\002\000\026\004\112\005\110\006\104" +
    "\007\111\010\113\021\106\023\114\030\102\044\103\046" +
    "\105\001\002\000\026\004\112\005\110\006\104\007\111" +
    "\010\113\021\106\023\114\030\102\044\103\046\105\001" +
    "\002\000\070\004\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\042\122\043\uffdc\045\uffdc\046\uffdc\047\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\001\002\000\070\004\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\017\uffd9\022\uffd9\023\uffd9\024\117\025" +
    "\135\026\126\027\121\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\042\122\043\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\051\uffd9\052\uffd9\053\uffd9\001\002" +
    "\000\070\004\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\022" +
    "\134\023\125\024\117\025\135\026\126\027\121\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\042\122\043\uffd6\045\uffd6\046\uffd6\047\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\001\002\000\026\004\112\005\110\006" +
    "\104\007\111\010\113\021\106\023\114\030\102\044\103" +
    "\046\105\001\002\000\042\022\134\023\125\024\117\025" +
    "\135\026\126\027\121\031\123\032\133\033\124\034\127" +
    "\035\130\036\116\037\120\040\131\042\122\043\143\001" +
    "\002\000\072\004\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\043\ufff0\045\ufff0\046\ufff0\047" +
    "\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002\000\070\004\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\017\uffd2\022\134\023\125\024" +
    "\117\025\135\026\126\027\121\031\123\032\133\033\124" +
    "\034\127\035\uffd2\036\uffd2\037\uffd2\040\uffd2\042\122\043" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\001\002\000\070\004\uffd1\013\uffd1\014\uffd1\015\uffd1\017" +
    "\uffd1\022\134\023\125\024\117\025\135\026\126\027\121" +
    "\031\123\032\133\033\124\034\127\035\uffd1\036\uffd1\037" +
    "\120\040\131\042\122\043\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\001\002\000\070\004\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\017\uffd4\022\134\023\125\024\117" +
    "\025\135\026\126\027\121\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\042\122\043\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052\uffd4\053\uffd4\001" +
    "\002\000\070\004\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\042\122\043\uffdb\045\uffdb\046\uffdb\047\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\001\002\000\070\004\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\017\uffd8\022\uffd8\023\uffd8\024\117\025" +
    "\135\026\126\027\121\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\122\043\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\051\uffd8\052\uffd8\053\uffd8\001\002" +
    "\000\070\004\uffd5\013\uffd5\014\uffd5\015\uffd5\017\uffd5\022" +
    "\134\023\125\024\117\025\135\026\126\027\121\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\042\122\043\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\001\002\000\070\004\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\017\uffd7\022\134\023\125\024\117\025\135" +
    "\026\126\027\121\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\042\122\043\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\051\uffd7\052\uffd7\053\uffd7\001\002\000" +
    "\042\022\134\023\125\024\117\025\135\026\126\027\121" +
    "\031\123\032\133\033\124\034\127\035\130\036\116\037" +
    "\120\040\131\042\122\043\154\001\002\000\072\004\uffef" +
    "\013\uffef\014\uffef\015\uffef\017\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042" +
    "\uffef\043\uffef\045\uffef\046\uffef\047\uffef\051\uffef\052\uffef" +
    "\053\uffef\001\002\000\070\004\uffda\013\uffda\014\uffda\015" +
    "\uffda\017\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\042\122\043\uffda\045\uffda\046\uffda" +
    "\047\uffda\051\uffda\052\uffda\053\uffda\001\002\000\070\004" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\022\134\023\125" +
    "\024\117\025\135\026\126\027\121\031\123\032\133\033" +
    "\124\034\127\035\uffd3\036\uffd3\037\uffd3\040\uffd3\042\122" +
    "\043\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3\052\uffd3\053" +
    "\uffd3\001\002\000\070\004\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\017\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\042\122\043\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\051\uffdd\052\uffdd\053\uffdd\001\002\000\070\004\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\017\uffd0\022\134\023\125\024" +
    "\117\025\135\026\126\027\121\031\123\032\133\033\124" +
    "\034\127\035\130\036\uffd0\037\120\040\131\042\122\043" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\001\002\000\030\004\112\005\110\006\104\007\111\010" +
    "\113\021\106\023\114\030\102\044\103\045\164\046\105" +
    "\001\002\000\006\045\166\051\165\001\002\000\066\004" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\017\uffc1\022\134\023\125" +
    "\024\117\025\135\026\126\027\121\031\123\032\133\033" +
    "\124\034\127\035\130\036\116\037\120\040\131\042\122" +
    "\045\uffc1\046\uffc1\047\uffc1\051\uffc1\052\uffc1\053\uffc1\001" +
    "\002\000\070\004\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\042\uffc4\043\uffc4\045\uffc4\046\uffc4\047\uffc4\051" +
    "\uffc4\052\uffc4\053\uffc4\001\002\000\026\004\112\005\110" +
    "\006\104\007\111\010\113\021\106\023\114\030\102\044" +
    "\103\046\105\001\002\000\070\004\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\017\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\042\uffc3\043\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\051\uffc3\052\uffc3\053\uffc3\001\002\000\066" +
    "\004\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0\022\134\023" +
    "\125\024\117\025\135\026\126\027\121\031\123\032\133" +
    "\033\124\034\127\035\130\036\116\037\120\040\131\042" +
    "\122\045\uffc0\046\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0" +
    "\001\002\000\026\004\112\005\110\006\104\007\111\010" +
    "\113\021\106\023\114\030\102\044\103\046\105\001\002" +
    "\000\042\022\134\023\125\024\117\025\135\026\126\027" +
    "\121\031\123\032\133\033\124\034\127\035\130\036\116" +
    "\037\120\040\131\042\122\045\172\001\002\000\070\004" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\042\uffc5" +
    "\043\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5\053" +
    "\uffc5\001\002\000\070\004\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\017\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\042\uffc8\043\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\001\002\000\006\047\176" +
    "\051\175\001\002\000\030\004\112\005\110\006\104\007" +
    "\111\010\113\021\106\023\114\030\102\044\103\046\105" +
    "\047\177\001\002\000\070\004\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\017\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\051\uffc7\052\uffc7\053\uffc7\001\002\000\070\004" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\042\uffc6" +
    "\043\uffc6\045\uffc6\046\uffc6\047\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\001\002\000\042\022\134\023\125\024\117\025\135" +
    "\026\126\027\121\031\123\032\133\033\124\034\127\035" +
    "\130\036\116\037\120\040\131\042\122\045\201\001\002" +
    "\000\070\004\uffde\013\uffde\014\uffde\015\uffde\017\uffde\022" +
    "\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\042\uffde\043\uffde\045\uffde\046\uffde\047\uffde\051\uffde" +
    "\052\uffde\053\uffde\001\002\000\070\004\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\017\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\042\122\043\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\051\uffcf\052\uffcf\053\uffcf\001\002\000" +
    "\004\047\205\001\002\000\026\002\uffa0\004\uffa0\013\uffa0" +
    "\014\uffa0\015\uffa0\017\uffa0\046\uffa0\047\uffa0\052\uffa0\053" +
    "\uffa0\001\002\000\026\002\uffa1\004\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\017\uffa1\046\uffa1\047\uffa1\052\uffa1\053\uffa1\001" +
    "\002\000\026\004\112\005\110\006\104\007\111\010\113" +
    "\021\106\023\114\030\102\044\103\046\105\001\002\000" +
    "\062\004\uffa9\013\uffa9\014\uffa9\015\uffa9\017\uffa9\022\134" +
    "\023\125\024\117\025\135\026\126\027\121\031\123\032" +
    "\133\033\124\034\127\035\130\036\116\037\120\040\131" +
    "\042\122\046\uffa9\047\uffa9\052\uffa9\053\uffa9\001\002\000" +
    "\052\004\072\013\073\015\070\022\134\023\125\024\117" +
    "\025\135\026\126\027\121\031\123\032\133\033\124\034" +
    "\127\035\130\036\116\037\120\040\131\042\122\046\051" +
    "\053\063\001\002\000\024\004\uffbc\013\uffbc\014\212\015" +
    "\uffbc\017\uffbc\046\uffbc\047\uffbc\052\uffbc\053\uffbc\001\002" +
    "\000\014\004\072\013\073\015\070\046\051\053\063\001" +
    "\002\000\024\004\uffbb\013\uffbb\014\uffbb\015\uffbb\017\uffbb" +
    "\046\uffbb\047\uffbb\052\uffbb\053\uffbb\001\002\000\006\004" +
    "\234\053\233\001\002\000\030\004\112\005\110\006\104" +
    "\007\111\010\113\021\106\023\114\030\102\044\103\045" +
    "\231\046\105\001\002\000\006\041\ufff1\042\141\001\002" +
    "\000\006\011\033\012\031\001\002\000\026\004\112\005" +
    "\110\006\104\007\111\010\113\021\106\023\114\030\102" +
    "\044\103\046\105\001\002\000\062\004\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\017\uffa7\022\134\023\125\024\117\025\135" +
    "\026\126\027\121\031\123\032\133\033\124\034\127\035" +
    "\130\036\116\037\120\040\131\042\122\046\uffa7\047\uffa7" +
    "\052\uffa7\053\uffa7\001\002\000\030\004\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\017\ufff2\041\ufff2\046\ufff2\047\ufff2\051\223" +
    "\052\ufff2\053\ufff2\001\002\000\006\004\225\053\224\001" +
    "\002\000\030\004\uffb4\013\uffb4\014\uffb4\015\uffb4\017\uffb4" +
    "\041\uffb4\046\uffb4\047\uffb4\051\uffb4\052\uffb4\053\uffb4\001" +
    "\002\000\032\004\uffaf\013\uffaf\014\uffaf\015\uffaf\017\uffaf" +
    "\041\uffaf\046\uffaf\047\uffaf\050\226\051\uffaf\052\uffaf\053" +
    "\uffaf\001\002\000\006\011\033\012\031\001\002\000\030" +
    "\004\uffad\013\uffad\014\uffad\015\uffad\017\uffad\041\uffad\046" +
    "\uffad\047\uffad\051\uffad\052\uffad\053\uffad\001\002\000\006" +
    "\045\232\051\165\001\002\000\024\004\uffba\013\uffba\014" +
    "\uffba\015\uffba\017\uffba\046\uffba\047\uffba\052\uffba\053\uffba" +
    "\001\002\000\024\004\uffb9\013\uffb9\014\uffb9\015\uffb9\017" +
    "\uffb9\046\uffb9\047\uffb9\052\uffb9\053\uffb9\001\002\000\030" +
    "\004\uffb2\013\uffb2\014\uffb2\015\uffb2\017\uffb2\041\uffb2\046" +
    "\uffb2\047\uffb2\051\uffb2\052\uffb2\053\uffb2\001\002\000\032" +
    "\004\uffb0\013\uffb0\014\uffb0\015\uffb0\017\uffb0\041\uffb0\046" +
    "\uffb0\047\uffb0\050\235\051\uffb0\052\uffb0\053\uffb0\001\002" +
    "\000\006\011\033\012\031\001\002\000\030\004\uffae\013" +
    "\uffae\014\uffae\015\uffae\017\uffae\041\uffae\046\uffae\047\uffae" +
    "\051\uffae\052\uffae\053\uffae\001\002\000\052\004\072\013" +
    "\073\015\070\022\134\023\125\024\117\025\135\026\126" +
    "\027\121\031\123\032\133\033\124\034\127\035\130\036" +
    "\116\037\120\040\131\042\122\046\051\053\063\001\002" +
    "\000\024\004\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\046" +
    "\uffbd\047\uffbd\052\uffbd\053\uffbd\001\002\000\026\002\uffa3" +
    "\004\uffa3\013\uffa3\014\uffa3\015\uffa3\017\uffa3\046\uffa3\047" +
    "\uffa3\052\uffa3\053\uffa3\001\002\000\022\004\uff9b\013\uff9b" +
    "\015\uff9b\017\uff9b\046\uff9b\047\uff9b\052\uff9b\053\uff9b\001" +
    "\002\000\006\047\245\052\244\001\002\000\004\047\246" +
    "\001\002\000\026\002\uffa2\004\uffa2\013\uffa2\014\uffa2\015" +
    "\uffa2\017\uffa2\046\uffa2\047\uffa2\052\uffa2\053\uffa2\001\002" +
    "\000\026\002\uff9f\004\uff9f\013\uff9f\014\uff9f\015\uff9f\017" +
    "\uff9f\046\uff9f\047\uff9f\052\uff9f\053\uff9f\001\002\000\006" +
    "\004\253\053\252\001\002\000\026\004\112\005\110\006" +
    "\104\007\111\010\113\021\106\023\114\030\102\044\103" +
    "\046\105\001\002\000\026\004\uffb7\013\uffb7\014\uffb7\015" +
    "\uffb7\017\uffb7\046\uffb7\047\uffb7\051\165\052\uffb7\053\uffb7" +
    "\001\002\000\030\004\uffaa\013\uffaa\014\uffaa\015\uffaa\017" +
    "\uffaa\041\uffaa\046\uffaa\047\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\001\002\000\032\004\uffab\013\uffab\014\uffab\015\uffab\017" +
    "\uffab\041\uffab\046\uffab\047\uffab\050\254\051\uffab\052\uffab" +
    "\053\uffab\001\002\000\006\011\033\012\031\001\002\000" +
    "\030\004\uffac\013\uffac\014\uffac\015\uffac\017\uffac\041\uffac" +
    "\046\uffac\047\uffac\051\uffac\052\uffac\053\uffac\001\002\000" +
    "\010\047\uff9e\051\165\052\uff9e\001\002\000\006\004\263" +
    "\053\262\001\002\000\026\004\112\005\110\006\104\007" +
    "\111\010\113\021\106\023\114\030\102\044\103\046\105" +
    "\001\002\000\062\004\uffa6\013\uffa6\014\uffa6\015\uffa6\017" +
    "\uffa6\022\134\023\125\024\117\025\135\026\126\027\121" +
    "\031\123\032\133\033\124\034\127\035\130\036\116\037" +
    "\120\040\131\042\122\046\uffa6\047\uffa6\052\uffa6\053\uffa6" +
    "\001\002\000\030\004\uffb1\013\uffb1\014\uffb1\015\uffb1\017" +
    "\uffb1\041\uffb1\046\uffb1\047\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\001\002\000\032\004\uffb5\013\uffb5\014\uffb5\015\uffb5\017" +
    "\uffb5\041\uffb5\046\uffb5\047\uffb5\050\264\051\uffb5\052\uffb5" +
    "\053\uffb5\001\002\000\006\011\033\012\031\001\002\000" +
    "\030\004\uffb3\013\uffb3\014\uffb3\015\uffb3\017\uffb3\041\uffb3" +
    "\046\uffb3\047\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002\000" +
    "\006\045\ufff5\051\ufff5\001\002\000\010\002\uffec\004\uffec" +
    "\052\uffec\001\002\000\012\002\ufffd\004\ufffd\020\ufffd\052" +
    "\271\001\002\000\010\002\ufffc\004\ufffc\020\ufffc\001\002" +
    "" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\006\002\004\003\003\001\001\000\006\004" +
    "\010\005\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\013\007\011\011\015\015" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\044" +
    "\011\045\001\001\000\004\013\031\001\001\000\004\014" +
    "\042\001\001\000\002\001\001\000\004\014\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\265\001\001\000\004" +
    "\021\051\001\001\000\004\030\060\001\001\000\002\001" +
    "\001\000\006\012\054\013\053\001\001\000\002\001\001" +
    "\000\004\021\056\001\001\000\004\013\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\011\074\021\070" +
    "\025\076\031\061\032\073\033\075\034\064\036\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\162" +
    "\024\255\001\001\000\002\001\001\000\022\011\074\021" +
    "\070\025\241\031\061\032\073\033\242\034\064\036\077" +
    "\001\001\000\002\001\001\000\004\020\236\001\001\000" +
    "\002\001\001\000\004\035\215\001\001\000\004\020\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\106" +
    "\001\001\000\004\020\201\001\001\000\004\020\177\001" +
    "\001\000\002\001\001\000\006\020\162\024\173\001\001" +
    "\000\002\001\001\000\004\035\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\114\001\001\000\004\035\131\001\001\000" +
    "\004\020\157\001\001\000\004\020\156\001\001\000\004" +
    "\020\155\001\001\000\004\020\154\001\001\000\004\020" +
    "\152\001\001\000\004\020\151\001\001\000\004\020\150" +
    "\001\001\000\004\020\147\001\001\000\004\020\146\001" +
    "\001\000\004\020\145\001\001\000\004\020\144\001\001" +
    "\000\004\020\143\001\001\000\002\001\001\000\004\020" +
    "\137\001\001\000\004\020\136\001\001\000\004\020\135" +
    "\001\001\000\004\035\131\001\001\000\004\035\131\001" +
    "\001\000\004\035\131\001\001\000\004\020\141\001\001" +
    "\000\004\035\131\001\001\000\002\001\001\000\004\035" +
    "\131\001\001\000\004\035\131\001\001\000\004\035\131" +
    "\001\001\000\004\035\131\001\001\000\004\035\131\001" +
    "\001\000\004\035\131\001\001\000\004\035\131\001\001" +
    "\000\004\035\131\001\001\000\002\001\001\000\004\035" +
    "\131\001\001\000\004\035\131\001\001\000\004\035\131" +
    "\001\001\000\004\035\131\001\001\000\006\020\162\024" +
    "\161\001\001\000\002\001\001\000\004\035\131\001\001" +
    "\000\002\001\001\000\004\020\166\001\001\000\002\001" +
    "\001\000\004\035\131\001\001\000\004\020\170\001\001" +
    "\000\004\035\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\131\001\001\000" +
    "\002\001\001\000\004\035\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\206\001" +
    "\001\000\004\035\131\001\001\000\022\011\074\021\070" +
    "\025\210\031\061\032\073\034\064\035\131\036\077\001" +
    "\001\000\002\001\001\000\020\011\074\021\070\025\212" +
    "\031\061\032\073\034\064\036\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\162\024\227\001\001" +
    "\000\002\001\001\000\004\013\221\001\001\000\004\020" +
    "\220\001\001\000\004\035\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\235\001\001\000\002\001\001" +
    "\000\022\011\074\021\070\025\237\031\061\032\073\034" +
    "\064\035\131\036\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\162\024\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\260\001\001\000\004\035\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token){
        throw new Error(cur_token.left + ":" + cur_token.right + " error: Parsing error" + cur_token.value());
    }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 103. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Program start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // program ::= importUseStar definitionStar 
            {
                Program RESULT = null;
                int iusleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int iusright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Use> ius = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Use>> value();
                int dlleft = CUP$parser$stack.peek().left;
                int dlright = CUP$parser$stack.peek().right;
                ArrayList<Definition> dl = CUP$parser$stack.peek().<ArrayList<Definition>> value();
                
    RESULT = new Program(ius,dl);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // importUseStar ::= importUseStar use_component 
            {
                ArrayList<Use> RESULT = null;
                int iusleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int iusright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Use> ius = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Use>> value();
                int uleft = CUP$parser$stack.peek().left;
                int uright = CUP$parser$stack.peek().right;
                Use u = CUP$parser$stack.peek().<Use> value();
                 ius.add(u); RESULT = ius;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("importUseStar",1, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // importUseStar ::= 
            {
                ArrayList<Use> RESULT = null;
                 RESULT = new ArrayList<Use>();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("importUseStar",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // use_component ::= USE IDENTIFIER 
            {
                Use RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                String i = CUP$parser$stack.peek().<String> value();
                           RESULT = new Use(i); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_component",2, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // use_component ::= USE IDENTIFIER SEMICOLON 
            {
                Use RESULT = null;
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-1).<String> value();
                 RESULT = new Use(i); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use_component",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // definitionStar ::= definitionStar definition 
            {
                ArrayList<Definition> RESULT = null;
                int dsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Definition> ds = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Definition>> value();
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                Definition d = CUP$parser$stack.peek().<Definition> value();
                ds.add(d); RESULT = ds; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definitionStar",3, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // definitionStar ::= 
            {
                ArrayList<Definition> RESULT = null;
                RESULT = new ArrayList<Definition>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definitionStar",3, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // definition ::= method 
            {
                Definition RESULT = null;
                int mleft = CUP$parser$stack.peek().left;
                int mright = CUP$parser$stack.peek().right;
                Method m = CUP$parser$stack.peek().<Method> value();
                 RESULT = m;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // definition ::= globalDecl 
            {
                Definition RESULT = null;
                int gdleft = CUP$parser$stack.peek().left;
                int gdright = CUP$parser$stack.peek().right;
                Globdecl gd = CUP$parser$stack.peek().<Globdecl> value();
                RESULT = gd; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // method ::= IDENTIFIER OPEN_PAREN emptyBracketDecl_star CLOSE_PAREN COLON emptyBracketType_plus block 
            {
                Method RESULT = null;
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-6).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-6).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-6).<String> value();
                int dsleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int dsright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                ArrayList<Decl> ds = CUP$parser$stack.elementAt(CUP$parser$top-4).<ArrayList<Decl>> value();
                int tsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int tsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Type> ts = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Type>> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Block b = CUP$parser$stack.peek().<Block> value();
                
    RESULT = new Method(i,ds,ts,b);
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("method",5, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // method ::= IDENTIFIER OPEN_PAREN emptyBracketDecl_star CLOSE_PAREN block 
            {
                Method RESULT = null;
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int dsleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dsright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Decl> ds = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Decl>> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Block b = CUP$parser$stack.peek().<Block> value();
                 // Block b
        RESULT = new Method(i,ds,new ArrayList<Type>(),b); // NONE
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("method",5, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // emptyBracketDecl_star ::= emptyBracketDecl_star COMMA emptyBracketDecl 
            {
                ArrayList<Decl> RESULT = null;
                int declstarleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int declstarright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Decl> declstar = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Decl>> value();
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                Decl d = CUP$parser$stack.peek().<Decl> value();
                declstar.add(d); RESULT = declstar; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl_star",6, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // emptyBracketDecl_star ::= emptyBracketDecl 
            {
                ArrayList<Decl> RESULT = null;
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                Decl d = CUP$parser$stack.peek().<Decl> value();
                ArrayList<Decl> temp = new ArrayList<Decl>();
      temp.add(d);
      RESULT = temp;
      
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl_star",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // emptyBracketDecl_star ::= 
            {
                ArrayList<Decl> RESULT = null;
                 RESULT = new ArrayList<Decl>();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl_star",6, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // emptyBracketDecl ::= IDENTIFIER COLON emptyBracketType 
            {
                Decl RESULT = null;
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new Decl(i,t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketDecl",7, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // fullBracketType ::= IDENTIFIER fullBracketPlus 
            {
                ArrayAccess RESULT = null;
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-1).<String> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                ArrayList<Expr> e = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                Id a = new Id(i); RESULT = new ArrayAccess(a,e);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("fullBracketType",28, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // fullBracketPlus ::= fullBracketPlus OPEN_BRACKET expr CLOSE_BRACKET 
            {
                ArrayList<Expr> RESULT = null;
                int tsleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int tsright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayList<Expr> ts = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayList<Expr>> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 ts.add(e); RESULT = ts; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("fullBracketPlus",27, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // fullBracketPlus ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                ArrayList<Expr> RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 ArrayList<Expr> exprList = new ArrayList<Expr>();
                         exprList.add(e);
                         RESULT = exprList;
                         
                CUP$parser$result = parser.getSymbolFactory().newSymbol("fullBracketPlus",27, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // globalDecl ::= emptyBracketDecl 
            {
                Globdecl RESULT = null;
                int edleft = CUP$parser$stack.peek().left;
                int edright = CUP$parser$stack.peek().right;
                Decl ed = CUP$parser$stack.peek().<Decl> value();
                RESULT = new Globdecl(ed, null);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // globalDecl ::= emptyBracketDecl GETS value 
            {
                Globdecl RESULT = null;
                int edleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int edright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Decl ed = CUP$parser$stack.elementAt(CUP$parser$top-2).<Decl> value();
                int vleft = CUP$parser$stack.peek().left;
                int vright = CUP$parser$stack.peek().right;
                Value v = CUP$parser$stack.peek().<Value> value();
                
        if (!ed.type.dimensions.allEmpty) {
            throw new Error("array with init len no Val");
        }
        if (ed.type.dimensions.getDim() != 0){
            throw new Error("global arr not init allowed");
        }
        RESULT  = new Globdecl(ed, v);
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // globalDecl ::= globalDecl SEMICOLON 
            {
                Globdecl RESULT = null;
                int gdleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int gdright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Globdecl gd = CUP$parser$stack.elementAt(CUP$parser$top-1).<Globdecl> value();
                RESULT = gd;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",11, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // value ::= INTEGER_LITERAL 
            {
                Value RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Long i = CUP$parser$stack.peek().<Long> value();
                 RESULT = new IntLiteral(i,true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("value",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // value ::= CHARACTER_LITERAL 
            {
                Value RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                String c = CUP$parser$stack.peek().<String> value();
                 RESULT = new IntLiteral(c); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("value",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // value ::= MINUS INTEGER_LITERAL 
            {
                Value RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Long i = CUP$parser$stack.peek().<Long> value();
                 RESULT = new IntLiteral(i,false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("value",12, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // value ::= BOOL_LITERAL 
            {
                Value RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Boolean b = CUP$parser$stack.peek().<Boolean> value();
                 RESULT = new BoolLiteral(b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("value",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // value ::= STRING_LITERAL 
            {
                Value RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                String s = CUP$parser$stack.peek().<String> value();
                 new ArrayValueLiteral(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("value",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // emptyBracketType_plus ::= emptyBracketType_plus COMMA emptyBracketType 
            {
                ArrayList<Type> RESULT = null;
                int tsleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tsright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Type> ts = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Type>> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 ts.add(t); RESULT = ts; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketType_plus",8, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // emptyBracketType_plus ::= emptyBracketType 
            {
                ArrayList<Type> RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 ArrayList<Type> typeList = new ArrayList<Type>();
                      typeList.add(t);
                      RESULT = typeList;
                      
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketType_plus",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // emptyBracketType ::= INT emptyDimension_star 
            {
                Type RESULT = null;
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                Dimension d = CUP$parser$stack.peek().<Dimension> value();
                RESULT = new Type(true,d); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketType",9, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // emptyBracketType ::= BOOL emptyDimension_star 
            {
                Type RESULT = null;
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                Dimension d = CUP$parser$stack.peek().<Dimension> value();
                RESULT = new Type(false,d); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyBracketType",9, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // emptyDimension_star ::= emptyDimension_star OPEN_BRACKET CLOSE_BRACKET 
            {
                Dimension RESULT = null;
                int dsleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dsright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Dimension ds = CUP$parser$stack.elementAt(CUP$parser$top-2).<Dimension> value();
                
    ds.increment();
    ds.foundEmpty = true;
    ds.indices.add(null);
    RESULT = ds;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // emptyDimension_star ::= emptyDimension_star OPEN_BRACKET INTEGER_LITERAL CLOSE_BRACKET 
            {
                Dimension RESULT = null;
                int dsleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int dsright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Dimension ds = CUP$parser$stack.elementAt(CUP$parser$top-3).<Dimension> value();
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Long i = CUP$parser$stack.elementAt(CUP$parser$top-1).<Long> value();
                
        if (ds.foundEmpty) throw new Error("Filled index after empty");
        ds.allEmpty = false;
        IntLiteral iL = new IntLiteral(i,true);
        ds.indices.add(iL);
        ds.increment(); // [][2]
        RESULT = ds;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",10, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // emptyDimension_star ::= emptyDimension_star OPEN_BRACKET IDENTIFIER CLOSE_BRACKET 
            {
                Dimension RESULT = null;
                int dsleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int dsright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Dimension ds = CUP$parser$stack.elementAt(CUP$parser$top-3).<Dimension> value();
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-1).<String> value();
                
        if (ds.foundEmpty) throw new Error("Filled index after empty");
        ds.allEmpty = false;
        ds.indices.add(new Id(i));
        ds.increment(); // [][2]
        RESULT = ds;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",10, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // emptyDimension_star ::= 
            {
                Dimension RESULT = null;
                RESULT = new Dimension(0); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("emptyDimension_star",10, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                RESULT = e1;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // expr ::= expr TIMES expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new TimesExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // expr ::= expr HI_MULT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new Hi_MultExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // expr ::= expr DIVIDE expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new DivideExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // expr ::= expr MODULO expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new ModuloExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // expr ::= expr PLUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new PlusExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // expr ::= expr MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new MinusExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // expr ::= expr LT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new LtExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // expr ::= expr LEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new LeqExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // expr ::= expr GT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new GtExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // expr ::= expr GEQ expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new GeqExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // expr ::= expr EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new EqualExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // expr ::= expr NOT_EQUAL expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new Not_EqualExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // expr ::= expr AND expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AndExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // expr ::= expr OR expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int e2left = CUP$parser$stack.peek().left;
                int e2right = CUP$parser$stack.peek().right;
                Expr e2 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new OrExpr(e1, e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // expr ::= NOT expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.peek().left;
                int e1right = CUP$parser$stack.peek().right;
                Expr e1 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new NotExpr(e1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // expr ::= MINUS expr 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.peek().left;
                int e1right = CUP$parser$stack.peek().right;
                Expr e1 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new IntegerNegExpr (e1);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // expr ::= INTEGER_LITERAL 
            {
                Expr RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Long i = CUP$parser$stack.peek().<Long> value();
                 RESULT = new IntLiteral(i,true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // expr ::= CHARACTER_LITERAL 
            {
                Expr RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                String c = CUP$parser$stack.peek().<String> value();
                 RESULT = new IntLiteral(c); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // expr ::= BOOL_LITERAL 
            {
                Expr RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Boolean b = CUP$parser$stack.peek().<Boolean> value();
                 RESULT = new BoolLiteral(b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // expr ::= STRING_LITERAL 
            {
                Expr RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                String s = CUP$parser$stack.peek().<String> value();
                 RESULT = new ArrayValueLiteral(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // expr ::= IDENTIFIER 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Id(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // expr ::= OPEN_BRACE CLOSE_BRACE 
            {
                Expr RESULT = null;
                RESULT = new ArrayExpr(new ArrayList<Expr>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // expr ::= OPEN_BRACE exprList CLOSE_BRACE 
            {
                Expr RESULT = null;
                int xleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int xright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> x = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                RESULT = new ArrayExpr(x);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // expr ::= OPEN_BRACE exprList COMMA CLOSE_BRACE 
            {
                Expr RESULT = null;
                int xleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int xright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Expr> x = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Expr>> value();
                RESULT = new ArrayExpr(x); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // expr ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new Length(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // expr ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new FunctionCallExpr(id,new ArrayList<Expr>() ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // expr ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> e = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new FunctionCallExpr(id, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // expr ::= expr fullBracketPlus 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                ArrayList<Expr> i = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new ArrayAccess(e, i); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // exprList ::= expr 
            {
                ArrayList<Expr> RESULT = null;
                int xleft = CUP$parser$stack.peek().left;
                int xright = CUP$parser$stack.peek().right;
                Expr x = CUP$parser$stack.peek().<Expr> value();
                
            ArrayList<Expr> temp = new ArrayList<Expr>();
            temp.add(x);
            RESULT = temp;
        
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // exprList ::= exprList COMMA expr 
            {
                ArrayList<Expr> RESULT = null;
                int aveleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int averight = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Expr> ave = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Expr>> value();
                int xleft = CUP$parser$stack.peek().left;
                int xright = CUP$parser$stack.peek().right;
                Expr x = CUP$parser$stack.peek().<Expr> value();
                 ave.add(x); RESULT = ave; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // stmt ::= declaration_assign_stmt 
            {
                Stmt RESULT = null;
                int dasleft = CUP$parser$stack.peek().left;
                int dasright = CUP$parser$stack.peek().right;
                Stmt das = CUP$parser$stack.peek().<Stmt> value();
                RESULT = das; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // stmt ::= multi_declaration_assign_stmt 
            {
                Stmt RESULT = null;
                int mdasleft = CUP$parser$stack.peek().left;
                int mdasright = CUP$parser$stack.peek().right;
                Stmt mdas = CUP$parser$stack.peek().<Stmt> value();
                RESULT = mdas;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // stmt ::= WHILE expr stmt 
            {
                Stmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                RESULT = new While(e,s);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // stmt ::= IF expr stmt 
            {
                Stmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                RESULT = new IfOnly(e,s);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // stmt ::= IF expr stmt ELSE stmt 
            {
                Stmt RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-3).<Expr> value();
                int s1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int s1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Stmt s1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Stmt> value();
                int s2left = CUP$parser$stack.peek().left;
                int s2right = CUP$parser$stack.peek().right;
                Stmt s2 = CUP$parser$stack.peek().<Stmt> value();
                RESULT = new IfElse(e,s1,s2);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // stmt ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Stmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Procedure(id,new ArrayList<Expr>() ); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // stmt ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Stmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> e = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Procedure(id, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // stmt ::= block 
            {
                Stmt RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Block b = CUP$parser$stack.peek().<Block> value();
                 RESULT = b; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // multi_declaration_assign_stmt ::= type_list GETS exprList 
            {
                Stmt RESULT = null;
                int tlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Decl> tl = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Decl>> value();
                int elleft = CUP$parser$stack.peek().left;
                int elright = CUP$parser$stack.peek().right;
                ArrayList<Expr> el = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                RESULT = new MultiDeclStmt(tl,el);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_declaration_assign_stmt",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // multi_declaration_assign_stmt ::= type_list 
            {
                Stmt RESULT = null;
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                ArrayList<Decl> tl = CUP$parser$stack.peek().<ArrayList<Decl>> value();
                 RESULT = new MultiDeclStmt(tl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_declaration_assign_stmt",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // type_list ::= UNDERSCORE COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int i2left = CUP$parser$stack.peek().left;
                int i2right = CUP$parser$stack.peek().right;
                String i2 = CUP$parser$stack.peek().<String> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new UnderScore());
        temp.add(new Decl(i2));
        RESULT = temp;
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // type_list ::= IDENTIFIER COLON emptyBracketType COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int i1right = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String i1 = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int t1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int t1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new Decl(i1,t1));
        temp.add(new UnderScore());
        RESULT = temp;
            
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",26, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // type_list ::= UNDERSCORE COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int i2left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int i2right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String i2 = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int t2left = CUP$parser$stack.peek().left;
                int t2right = CUP$parser$stack.peek().right;
                Type t2 = CUP$parser$stack.peek().<Type> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new UnderScore());
        temp.add(new Decl(i2,t2));
        RESULT = temp;
                
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",26, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // type_list ::= IDENTIFIER COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int i1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String i1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                
            ArrayList<Decl> temp = new ArrayList<Decl>();
            temp.add(new Decl(i1));
            temp.add(new UnderScore());
            RESULT = temp;
            
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // type_list ::= UNDERSCORE COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                
            ArrayList<Decl> temp = new ArrayList<Decl>();
            temp.add(new UnderScore());
            temp.add(new UnderScore());
            RESULT = temp;
            
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // type_list ::= IDENTIFIER COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int i1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String i1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int i2left = CUP$parser$stack.peek().left;
                int i2right = CUP$parser$stack.peek().right;
                String i2 = CUP$parser$stack.peek().<String> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new Decl(i1));
        temp.add(new Decl(i2));
        RESULT = temp;
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // type_list ::= IDENTIFIER COLON emptyBracketType COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int i1right = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String i1 = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int t1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int t1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int i2left = CUP$parser$stack.peek().left;
                int i2right = CUP$parser$stack.peek().right;
                String i2 = CUP$parser$stack.peek().<String> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new Decl(i1,t1));
        temp.add(new Decl(i2));
        RESULT = temp;
            
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",26, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // type_list ::= IDENTIFIER COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int i1right = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String i1 = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int i2left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int i2right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String i2 = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int t2left = CUP$parser$stack.peek().left;
                int t2right = CUP$parser$stack.peek().right;
                Type t2 = CUP$parser$stack.peek().<Type> value();
                
        ArrayList<Decl> temp = new ArrayList<Decl>();
        temp.add(new Decl(i1));
        temp.add(new Decl(i2,t2));
        RESULT = temp;
                
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",26, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // type_list ::= IDENTIFIER COLON emptyBracketType COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int i1left = CUP$parser$stack.elementAt(CUP$parser$top-6).left;
                int i1right = CUP$parser$stack.elementAt(CUP$parser$top-6).right;
                String i1 = CUP$parser$stack.elementAt(CUP$parser$top-6).<String> value();
                int t1left = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int t1right = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                Type t1 = CUP$parser$stack.elementAt(CUP$parser$top-4).<Type> value();
                int i2left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int i2right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String i2 = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int t2left = CUP$parser$stack.peek().left;
                int t2right = CUP$parser$stack.peek().right;
                Type t2 = CUP$parser$stack.peek().<Type> value();
                
            ArrayList<Decl> temp = new ArrayList<Decl>();
            temp.add(new Decl(i1,t1));
            temp.add(new Decl(i2,t2));
            RESULT = temp;
            
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",26, CUP$parser$stack.elementAt(CUP$parser$top-6), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // type_list ::= type_list COMMA IDENTIFIER COLON emptyBracketType 
            {
                ArrayList<Decl> RESULT = null;
                int tlleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int tlright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                ArrayList<Decl> tl = CUP$parser$stack.elementAt(CUP$parser$top-4).<ArrayList<Decl>> value();
                int ileft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int iright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String i = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                
        tl.add(new Decl(i,t));
        RESULT = tl;
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",26, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // type_list ::= type_list COMMA IDENTIFIER 
            {
                ArrayList<Decl> RESULT = null;
                int tlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Decl> tl = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Decl>> value();
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                String i = CUP$parser$stack.peek().<String> value();
                
        tl.add(new Decl(i));
        RESULT = tl;
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // type_list ::= type_list COMMA UNDERSCORE 
            {
                ArrayList<Decl> RESULT = null;
                int tlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Decl> tl = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Decl>> value();
                
            tl.add(new UnderScore());
            RESULT = tl;
        
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // declaration_assign_stmt ::= emptyBracketDecl GETS expr 
            {
                Stmt RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Decl d = CUP$parser$stack.elementAt(CUP$parser$top-2).<Decl> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                
    if (!d.type.dimensions.allEmpty) {
        throw new Error("array with init len no Val");
    }
    RESULT = new DeclStmt(d,e);
    
                CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",23, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // declaration_assign_stmt ::= emptyBracketDecl 
            {
                Stmt RESULT = null;
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                Decl d = CUP$parser$stack.peek().<Decl> value();
                RESULT = new DeclStmt(d,null);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",23, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // declaration_assign_stmt ::= IDENTIFIER GETS expr 
            {
                Stmt RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new Reassignment(id,e);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",23, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // declaration_assign_stmt ::= UNDERSCORE GETS expr 
            {
                Stmt RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                RESULT = new DeclStmt(new UnderScore(),e);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",23, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // declaration_assign_stmt ::= fullBracketType GETS expr 
            {
                Stmt RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayAccess d = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayAccess> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new Reassignment(d,e);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_assign_stmt",23, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // block ::= OPEN_BRACE statement_star CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Stmt>> value();
                RESULT = new Block(ss);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // block ::= OPEN_BRACE statement_star SEMICOLON CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Stmt>> value();
                RESULT = new Block(ss);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",15, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // block ::= OPEN_BRACE statement_star SEMICOLON return CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayList<Stmt>> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Return r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Return> value();
                ss.add(r); RESULT = new Block(ss);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",15, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // block ::= OPEN_BRACE statement_star return SEMICOLON CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayList<Stmt>> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Return r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Return> value();
                ss.add(r); RESULT = new Block(ss);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",15, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // block ::= OPEN_BRACE statement_star return CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Stmt>> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Return r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Return> value();
                ss.add(r); RESULT = new Block(ss);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",15, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // block ::= OPEN_BRACE statement_star SEMICOLON return SEMICOLON CLOSE_BRACE 
            {
                Block RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-4).<ArrayList<Stmt>> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Return r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Return> value();
                ss.add(r); RESULT = new Block(ss);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",15, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // return ::= RETURN exprList 
            {
                Return RESULT = null;
                int elleft = CUP$parser$stack.peek().left;
                int elright = CUP$parser$stack.peek().right;
                ArrayList<Expr> el = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                RESULT = new Return(el);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // return ::= RETURN 
            {
                Return RESULT = null;
                RESULT = new Return(new ArrayList<Expr>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // statement_star ::= statement_star stmt 
            {
                ArrayList<Stmt> RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Stmt>> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 ss.add(s); RESULT = ss;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_star",22, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // statement_star ::= statement_star SEMICOLON stmt 
            {
                ArrayList<Stmt> RESULT = null;
                int ssleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ssright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Stmt> ss = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Stmt>> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Stmt s = CUP$parser$stack.peek().<Stmt> value();
                 ss.add(s); RESULT = ss;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_star",22, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // statement_star ::= 
            {
                ArrayList<Stmt> RESULT = null;
                RESULT = new ArrayList<Stmt>();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_star",22, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
